﻿///<jscompress sourcefile="base.js" />

function getMenuIdFromDocumentUrl(){
	var curUrl = document.URL;
	var index = curUrl.indexOf("&menuid=");
	if(index == -1){
		index = curUrl.indexOf("?menuid=");
		if(index == -1)
			return "";
	}
	index = index + 8;
    var lastIndex = curUrl.indexOf("&", index);
	if(lastIndex == -1) {
		lastIndex = curUrl.length;
	}
	var menuId = curUrl.substring(index, lastIndex);
	return menuId;
}

function getUserCodeFromDocumentUrl(){
	var curUrl = document.URL;
	var index = curUrl.indexOf("&userCode=");
	if(index == -1){
		index = curUrl.indexOf("?userCode=");
		if(index == -1)
			return "";
	}
	index = index + 10; 
    var lastIndex = curUrl.indexOf("&", index);
	if(lastIndex == -1) {
		lastIndex = curUrl.length;
	}
	var userCode = curUrl.substring(index, lastIndex); 
	return userCode;
}

function getYearFromDocumentUrl(){
	var curUrl = document.URL;
	var index = curUrl.indexOf("&year=");
	if(index == -1){
		index = curUrl.indexOf("?year=");
		if(index == -1)
			return "";
	}
	index = index + 6; 
    var lastIndex = curUrl.indexOf("&", index);
	if(lastIndex == -1) {
		lastIndex = curUrl.length;
	}
	var year = curUrl.substring(index, lastIndex); 
	return year;
}

function UUID() {
    for (var e = [], t = "0123456789ABCDEF".split(""), i = 0; i < 36; i++) {
	e[i] = Math.floor(16 * Math.random());
    }
    e[14] = 4;
    e[19] = 3 & e[19] | 8;
    for (i = 0; i < 36; i++) {
	e[i] = t[e[i]];
    }
    e[8] = e[13] = e[18] = e[23] = "-";
    return e.join("");
}

(function($) {
	// 核心对象

	window.kitui = $.kitui = {
		version : '1.0.0',
		components : {},
		uids : {},
		ux: {},
		doc : document,
		window : window,
		idPre : "kitui-",
		idIndex : 1,
		classes : {},
		uiClasses : {},
		getComponents : function() {
			var objs = [];
			for (var t in kitui.components) {
				var i = kitui.components[t];
				if (i.isControl) {
					objs.push(i);
				}
			}
			return objs;
		},
		get : function(o) {
			if (!o) {
				return null;
			}
			if (kitui.isControl(o)) {
				return o;
			}
			if ("string" == typeof o) {
				if ("#" == o.charAt(0)) {
					o = o.substr(1);
				}
			}
			if ("string" == typeof o) {
				return kitui.components[o];
			} else {
				var t = kitui.uids[o.uid];
				if (t && t.el == o) {
					return t;
				}
			}
			return null;
		},
	    getbyUID: function(e) {
	        return kitui.uids[e];
	    },		
		emptyFn : function() {
		},
	    findControls: function(fn, obj) {
	        if (!fn) {
	            return [];
	        }
	        obj = obj || kitui;
	        var rtn = [];
	        var uids = kitui.uids;
	        for (var p in uids) {
	            var o = uids[p];
	            var b = fn.call(obj, o);
	            if (b === true || b === 1) {
	                rtn.push(o);
	                if (b === 1) {
	                    break;
	                }
	            }
	        }
	        return rtn;
	    },
	    getChildControls: function(obj) {
	        var ele = obj.el ? obj.el : obj;
	        var rtn = kitui.findControls(function(d) {
	            if (!d.el || obj == d) {
	                return false;
	            }
	            if (kitui.isAncestor(ele, d.el) && d.within) {
	                return true;
	            }
	            return false;
	        });
	        return rtn;
	    },	    
		getClassByUICls : function(clsname) {
			return this.uiClasses[clsname.toLowerCase()];
		},
		getsbyName : function(name, obj) {
			var tag = kitui.isControl(obj), n = obj;
			if (obj && tag) {
				obj = obj.el;
			}
			obj = kitui.byId(obj);
			obj = obj || document.body;
			var s = kitui.findControls(function(control) {
						if (!control.el) {
							return false;
						}
						if (control.name == name && kitui.isAncestor(obj, control.el)) {
							return true;
						}
						return false;
					}, this);
			if (tag && 0 == s.length && n && n.getbyName) {
				var o = n.getbyName(name);
				if (o) {
					s.push(o);
				}
			}
			return s;
		},
		getbyName : function(name, obj) {
			return kitui.getsbyName(name, obj)[0];
		},
	    getParams: function(e) {
	        if (!e) {
	            e = location.href;
	        }
	        e = e.split("?")[1];
	        var t = {};
	        if (e) {
	            for (var i = e.split("&"), n = 0, s = i.length; n < s; n++) {
	                var o = i[n].split("=");
	                try {
	                    t[o[0]] = decodeURIComponent(unescape(o[1]));
	                } catch (r) {}
	            }
	        }
	        return t;
	    },		
		reg : function(e) {
			this.components[e.id] = e;
			this.uids[e.uid] = e;
		},
		unreg : function(e) {
			delete kitui.components[e.id];
			delete kitui.uids[e.uid];
		},
		newId : function(e) {
			return (e || this.idPre) + this.idIndex++;
		},
		copyTo : function(dest, opt) {
			if (dest && opt) {
				for (var p in opt) {
					dest[p] = opt[p];
				}
			}
			return dest;
		},
		copyIf : function(dest, opt) {
			if (dest && opt) {
				for (var p in opt) {
					if (kitui.isNull(dest[p])) {
						dest[p] = opt[p];
					}
				}
			}
			return dest;
		},
		createDelegate : function(e, t) {
			if (!e) {
				return function() {
				};
			}
			return function() {
				return e.apply(t, arguments);
			};
		},
		isControl : function(e) {
			return !!(e && e.isControl);
		},
		toBoolean : function(e) {
			if(e == 'false'){
				return false;
			}else if(e == 'true'){
				return true;
			}
			return e;
		},
		isElement : function(e) {
			return e && e.appendChild;
		},
		isDate : function(e) {
			return !!(e && e.getFullYear);
		},
		isArray : function(e) {
			return !!(e && !!e.unshift);
		},
		isNull : function(e) {
			return null === e || void 0 === e;
		},
		isNumber : function(e) {
			return !isNaN(e) && "number" == typeof e;
		},
		isEquals : function(e, t) {
			if (0 !== e && 0 !== t) {
				if ((kitui.isNull(e) || "" == e)
						&& (kitui.isNull(t) || "" == t)) {
					return true;
				}
			}
			if (e && t && e.getFullYear && t.getFullYear) {
				return e.getTime() === t.getTime();
			}
			if ("object" == typeof e && "object" == typeof t) {
				return e === t;
			}
			return String(e) === String(t);
		},
		forEach : function(arr, fn, i) {
			for (var n = arr.clone(), index = 0, len = n.length; index < len; index++) {
				var r = n[index];
				if (false === fn.call(i, r, index, arr)) {
					break;
				}
			}
		},
		sort: function(c, fn, a) {
	        a = a || c;
	        c.sort(fn);
	    },
		removeNode : function(e) {
			$(e).remove();
		},
		elWarp : document.createElement("div"),
		byClass: function(a, b) {
	        if (typeof b == "string") {
	            b = kitui.byId(b);
	        }
	        return jQuery("." + a, b)[0];
	    },
	    getClass: function(a) {
	        if (!a) {
	            return null;
	        }
	        return this.classes[a.toLowerCase()];
	    },
	    closeWin:function(){
		    if (kitui.isIE) {
		       parent.fixIEFocus();
		    }	    	
	    	window.CloseOwnerWindow("close");
	    }
	};
	
if ("undefined" == typeof kitui_useShims) {
    kitui_useShims = true;//中科版本是true，公司版本是false
}	
	
	

kitui_isAncestor = function(pnode, subnode) {
    var rtn = false;
    pnode = kitui.byId(pnode);
    subnode = kitui.byId(subnode);
    if (pnode === subnode) {
        return true;
    }
    if (pnode && subnode) {
        if (pnode.contains) {
            try {
                return pnode.contains(subnode);
            } catch (b) {
                return false;
            }
        } else {
            if (pnode.compareDocumentPosition) {
                return !!(pnode.compareDocumentPosition(subnode) & 16);
            } else {
                while (subnode = subnode.parentNode) {
                    rtn = subnode == pnode || rtn;
                }
            }
        }
    }
    return rtn;
};



kitui_findParent = function(node, className, h) {
    node = kitui.byId(node);
    var body = document.body, i = 0, d;
    h = h || 50;
    if (typeof h != "number") {
        d = kitui.byId(h);
        h = 10;
    }
    while (node && node.nodeType == 1 && i < h && node != body && node != d) {
        if (kitui.hasClass(node, className)) {
            return node;
        }
        i++;
        node = node.parentNode;
    }
    return null;
};
	kitui_on = function(obj, mName, fn, scope) {
	    obj = kitui.byId(obj);
	    scope = scope || obj;
	    if (!obj || !mName || !fn || !scope) {
	        return false;
	    }
	    var f = kitui.findListener(obj, mName, fn, scope);
	    if (f) {
	        return false;
	    }
	    var g = kitui.createDelegate(fn, scope);
	    kitui.listeners.push([ obj, mName, fn, scope, g ]);
	    jQuery(obj).bind(mName, g);
	};
	
	kitui_un = function(obj, mName, fn, scope) {
	    obj = kitui.byId(obj);
	    scope = scope || obj;
	    if (!obj || !mName || !fn || !scope) {
	        return false;
	    }
	    var f = kitui.findListener(obj, mName, fn, scope);
	    if (!f) {
	        return false;
	    }
	    kitui.listeners.remove(f);
	    jQuery(obj).unbind(mName, f[4]);
	};	
	kitui.getStyle = function() {
	    var e = document.defaultView;
	    return new Function("el", "style", [ "style['indexOf']('-')>-1 && (style=style.replace(/-(\\w)/g,function(m,a){return a.toUpperCase()}));", "style=='float' && (style='", e ? "cssFloat" : "styleFloat", "');return el.style[style] || ", e ? "window.getComputedStyle(el,null)[style]" : "el.currentStyle[style]", " || null;" ].join(""));
	}();	
	kitui.copyTo(kitui,{
				isAncestor: kitui_isAncestor,
    			findParent: kitui_findParent,
    			selectRange: function(c, b, a) {
			        if (c.createTextRange) {
			            var f = c.createTextRange();
			            f.moveStart("character", b);
			            f.moveEnd("character", a - c.value.length);
			            f.select();
			        } else {
			            if (c.setSelectionRange) {
			                c.setSelectionRange(b, a);
			            }
			        }
			        try {
			            c.focus();
			        } catch (d) {}
			    },
			    getOffsetsTo: function(e, t) {
			        var i = this.getXY(e), n = this.getXY(t);
			        return [ i[0] - n[0], i[1] - n[1] ];
			    },
			    scrollIntoView: function(e, t, i) {
			        var n = kitui.byId(t) || document.body, s = this.getOffsetsTo(e, n), o = s[0] + n.scrollLeft, r = s[1] + n.scrollTop, l = r + e.offsetHeight, a = o + e.offsetWidth, h = n.clientHeight, u = parseInt(n.scrollTop, 10), d = parseInt(n.scrollLeft, 10), c = u + h, f = d + n.clientWidth;
			        if (e.offsetHeight > h || r < u) {
			            n.scrollTop = r;
			        } else {
			            if (l > c) {
			                n.scrollTop = l - h;
			            }
			        }
			        n.scrollTop = n.scrollTop;
			        if (false !== i) {
			            if (e.offsetWidth > n.clientWidth || o < d) {
			                n.scrollLeft = o;
			            } else {
			                if (a > f) {
			                    n.scrollLeft = a - n.clientWidth;
			                }
			            }
			            n.scrollLeft = n.scrollLeft;
			        }
			        return this;
			    },
			    getScrollOffset: function() {
			        if (!kitui._scrollOffset) {
			            var e = document.createElement("div");
			            e.style.cssText = "width:100px;background:#eee;height:50px;overflow:scroll;padding:1px;position:absolute;left:-1000px;top:0;";
			            document.body.appendChild(e);
			            kitui._scrollOffset = e.offsetWidth - e.clientWidth;
			            e.parentNode.removeChild(e);
			        }
			        return kitui._scrollOffset;
			    },
			    setOpacity: function(e, t) {
			        jQuery(e).css({
			            opacity: t
			        });
			    }		    
	})
	kitui.copyTo(kitui, {
				extend : function(e, t, i) {
					if ("function" != typeof t) {
						return this;
					}
					var n = e, s = n.prototype, o = t.prototype;
					if (n.superclass == o) {
						return;
					}
					n.superclass = o;
					n.superclass.constructor = t;
					for (var r in o) {
						s[r] = o[r];
					}
					if (i) {
						for (r in i) {
							s[r] = i[r];
						}
					}
					return n;
				},
				regClass : function(e, name) {
					name = name.toLowerCase();
					if (!kitui.classes[name]) {
						kitui.classes[name] = e;
						e.prototype.type = name;
					}
					var i = e.prototype.uiCls;
					if (!kitui.isNull(i) && !kitui.uiClasses[i]) {
						kitui.uiClasses[i] = e;
					}
				},
				debug : false
			});
		kitui.copyTo(kitui, {
		    listeners: [],
		    on: kitui_on,
		    un: kitui_un,
		    _getListeners: function() {
		        var d = kitui.listeners;
		        for (var c = d.length - 1; c >= 0; c--) {
		            var f = d[c];
		            try {
		                if (f[0] == 1 && f[1] == 1 && f[2] == 1 && f[3] == 1) {
		                    var a = 1;
		                }
		            } catch (b) {
		                d.removeAt(c);
		            }
		        }
		        return d;
		    },
		    findListener: function(h, g, f, d) {
		        h = kitui.byId(h);
		        d = d || h;
		        if (!h || !g || !f || !d) {
		            return false;
		        }
		        var c = kitui._getListeners();
		        for (var b = c.length - 1; b >= 0; b--) {
		            var j = c[b];
		            try {
		                if (j[0] == h && j[1] == g && j[2] == f && j[3] == d) {
		                    return j;
		                }
		            } catch (a) {}
		        }
		    },
		    clearEvent: function(d, c) {
		        d = kitui.byId(d);
		        if (!d) {
		            return false;
		        }
		        var b = kitui._getListeners();
		        for (var a = b.length - 1; a >= 0; a--) {
		            var f = b[a];
		            if (f[0] == d) {
		                if (!c || c == f[1]) {
		                    kitui.un(d, f[1], f[2], f[3]);
		                }
		            }
		        }
		        d.onmouseover = d.onmousedown = null;
		    }
		});
	kitui.copyTo(kitui, {
		byId : function(e, t) {
			if ("string" == typeof e) {
				if ("#" == e.charAt(0)) {
					e = e.substr(1);
				}
				var i = document.getElementById(e);
				if (i) {
					return i;
				}

				return i;
			} else {
				return e;
			}
		},
		hasClass : function(node, className) {
			node = kitui.byId(node);
			if (!node) {
				return;
			}
			if (!node.className) {
				return false;
			}
			var i = String(node.className).split(" ");
			return -1 != i.indexOf(className);
		},
		addClass : function(node, className) {
			if (!className) {
				return;
			}
			if (false == kitui.hasClass(node, className)) {
				jQuery(node).addClass(className);
			}
		},
		removeClass : function(node, className) {
			if (!className) {
				return;
			}
			jQuery(node).removeClass(className);
		},
		getChildNodes : function(e, t) {
			e = kitui.byId(e);
			if (!e) {
				return;
			}
			for (var i = e.childNodes, n = [], s = 0, o = i.length; s < o; s++) {
				var r = i[s];
				if (1 == r.nodeType || true === t) {
					n.push(r);
				}
			}
			return n;
		},
	    repaint: function(a) {
	        if (!a) {
	            a = document.body;
	        }
	        kitui.addClass(a, "kitui-repaint");
	        setTimeout(function() {
	            kitui.removeClass(a, "kitui-repaint");
	        }, 1);
	    },
	    setBox: function(d, b, f, c, a) {
	        if (f === undefined) {
	            f = b.y;
	            c = b.width;
	            a = b.height;
	            b = b.x;
	        }
	        kitui.setXY(d, b, f);
	        kitui.setWidth(d, c);
	        kitui.setHeight(d, a);
	    },
	    getBox: function(a) {
	        var c = kitui.getXY(a);
	        var b = {
	            x: c[0],
	            y: c[1],
	            width: kitui.getWidth(a),
	            height: kitui.getHeight(a)
	        };
	        b.left = b.x;
	        b.top = b.y;
	        b.right = b.x + b.width;
	        b.bottom = b.y + b.height;
	        return b;
	    },
	    
	    
		setStyle : function(e, t) {
			e = kitui.byId(e);
			if (!e || "string" != typeof t) {
				return;
			}
			for (var i = jQuery(e), n = t.toLowerCase().split(";"), s = 0, o = n.length; s < o; s++) {
				var r = n[s], l = r.split(":");
				if (l.length > 1) {
					if (l.length > 2) {
						var a = l[0].trim();
						l.removeAt(0);
						var h = l.join(":").trim();
						i.css(a, h);
					} else {
						i.css(l[0].trim(), l[1].trim());
					}
				}
			}
		},
		getStyle : function() {
			var e = document.defaultView;
			return new Function(
					"el",
					"style",
					[
							"style['indexOf']('-')>-1 && (style=style.replace(/-(\\w)/g,function(m,a){return a.toUpperCase()}));",
							"style=='float' && (style='",
							e ? "cssFloat" : "styleFloat",
							"');return el.style[style] || ",
							e
									? "window.getComputedStyle(el,null)[style]"
									: "el.currentStyle[style]", " || null;"]
							.join(""));
		},
	    getMargins: function(a) {
		    a = kitui.byId(a);
		    var b = jQuery(a);
		    return {
		        top: parseInt(b.css("margin-top"), 10) || 0,
		        left: parseInt(b.css("margin-left"), 10) || 0,
		        bottom: parseInt(b.css("margin-bottom"), 10) || 0,
		        right: parseInt(b.css("margin-right"), 10) || 0
		    };
		},
	    getBorders: function(a) {
		    a = kitui.byId(a);
		    var b = jQuery(a);
		    return {
		        top: parseInt(b.css("border-top-width"), 10) || 0,
		        left: parseInt(b.css("border-left-width"), 10) || 0,
		        bottom: parseInt(b.css("border-bottom-width"), 10) || 0,
		        right: parseInt(b.css("border-right-width"), 10) || 0
		    };
		},
	    getPaddings: function(a) {
		    a = kitui.byId(a);
		    var b = jQuery(a);
		    return {
		        top: parseInt(b.css("padding-top"), 10) || 0,
		        left: parseInt(b.css("padding-left"), 10) || 0,
		        bottom: parseInt(b.css("padding-bottom"), 10) || 0,
		        right: parseInt(b.css("padding-right"), 10) || 0
		    };
		},		
	    setWidth: function(d, c) {
		    d = kitui.byId(d);
		    c = parseInt(c);
		    if (isNaN(c) || !d) {
		        return;
		    }
		    if (jQuery.boxModel) {
		        var f = kitui.getPaddings(d);
		        var a = kitui.getBorders(d);
		        c = c - f.left - f.right - a.left - a.right;
		    }
		    if (c < 0) {
		        c = 0;
		    }
		    d.style.width = c + "px";
		},
	    setHeight: function(d, c) {
		    d = kitui.byId(d);
		    c = parseInt(c);
		    if (isNaN(c) || !d) {
		        return;
		    }
		    if (jQuery.boxModel) {
		        var f = kitui.getPaddings(d);
		        var a = kitui.getBorders(d);
		        c = c - f.top - f.bottom - a.top - a.bottom;
		    }
		    if (c < 0) {
		        c = 0;
		    }
		    d.style.height = c + "px";
		},		
   		getWidth: function(a, b) {
		    a = kitui.byId(a);
		    if (a.style.display == "none" || a.type == "text/javascript") {
		        return 0;
		    }
		    return b ? jQuery(a).width() : jQuery(a).outerWidth();
		},
    	getHeight: function(a, b) {
		    a = kitui.byId(a);
		    if (a.style.display == "none" || a.type == "text/javascript") {
		        return 0;
		    }
		    return b ? jQuery(a).height() : jQuery(a).outerHeight();
		},		
		getBox:function(a){
			var c = kitui.getXY(a);
		    var b = {
		        x: c[0],
		        y: c[1],
		        width: kitui.getWidth(a),
		        height: kitui.getHeight(a)
		    };
		    b.left = b.x;
		    b.top = b.y;
		    b.right = b.x + b.width;
		    b.bottom = b.y + b.height;
		    return b;
		},
	    setX: function(b, a) {
	        a = parseInt(a);
	        var c = jQuery(b).offset();
	        var d = parseInt(c.top);
	        if (d === undefined) {
	            d = c[1];
	        }
	        kitui.setXY(b, a, d);
	    },
	    setY: function(b, d) {
	        d = parseInt(d);
	        var c = jQuery(b).offset();
	        var a = parseInt(c.left);
	        if (a === undefined) {
	            a = c[0];
	        }
	        kitui.setXY(b, a, d);
	    },		
	    setXY: function(b, a, d) {
	        var c = {
	            left: parseInt(a),
	            top: parseInt(d)
	        };
	        jQuery(b).offset(c);
	        jQuery(b).offset(c);
	    },
	    getXY: function(a) {
	        var b = jQuery(a).offset();
	        return [ parseInt(b.left), parseInt(b.top) ];
	    },
	    getSize: function(e, t) {
	        return {
	            width: kitui.getWidth(e, t),
	            height: kitui.getHeight(e, t)
	        };
	    },
	    setSize: function(e, t, i) {
	        kitui.setWidth(e, t);
	        kitui.setHeight(e, i);
	    },	    
	    getViewportBox: function() {
	        var b = jQuery(window).width(), c = jQuery(window).height();
	        var a = jQuery(document).scrollLeft(), d = jQuery(document.body).scrollTop();
	        if (document.documentElement) {
	            d = document.documentElement.scrollTop;
	        }
	        return {
	            x: a,
	            y: d,
	            width: b,
	            height: c,
	            right: a + b,
	            bottom: d + c
	        };
	    },
	   showAt: function(e) {
	        jQuery;
	        e = jQuery.extend({
	            el: null,
	            x: "center",
	            y: "center",
	            offset: [ 0, 0 ],
	            fixed: false,
	            zindex: kitui.getMaxZIndex(),
	            timeout: 0,
	            timeoutHandler: null,
	            animation: false
	        }, e);
	        var t = jQuery(e.el)[0], i = e.x, n = e.y, s = e.offset[0], o = e.offset[1], r = e.zindex, l = e.fixed;
	        e.animation;
	        if (!t) {
	            return;
	        }
	        if (e.timeout) {
	            setTimeout(function() {
	                if (e.timeoutHandler) {
	                    e.timeoutHandler();
	                }
	            }, e.timeout);
	        }
	        var a = ";position:absolute;display:block;left:auto;top:auto;right:auto;bottom:auto;margin:0;z-index:" + r + ";";
	        kitui.setStyle(t, a);
	        a = "";
	        if (e && kitui.isNumber(e.x) && kitui.isNumber(e.y)) {
	            if (e.fixed && !kitui.isIE6) {
	                a += ";position:fixed;";
	            }
	            kitui.setStyle(t, a);
	            kitui.setXY(e.el, e.x, e.y);
	            return;
	        }
	        if ("left" == i) {
	            a += "left:" + s + "px;";
	        } else {
	            if ("right" == i) {
	                a += "right:" + s + "px;";
	            } else {
	                var h = kitui.getSize(t);
	                a += "left:50%;margin-left:" + .5 * -h.width + "px;";
	            }
	        }
	        if ("top" == n) {
	            a += "top:" + o + "px;";
	        } else {
	            if ("bottom" == n) {
	                a += "bottom:" + o + "px;";
	            } else {
	                h = kitui.getSize(t);
	                a += "top:50%;margin-top:" + .5 * -h.height + "px;";
	            }
	        }
	        if (l && !kitui.isIE6) {
	            a += "position:fixed";
	        }
	        kitui.setStyle(t, a);
	    },	    
	    getChildNodes: function(h, g) {
	        h = kitui.byId(h);
	        if (!h) {
	            return;
	        }
	        var b = h.childNodes;
	        var f = [];
	        for (var d = 0, a = b.length; d < a; d++) {
	            var j = b[d];
	            if (j.nodeType == 1 || g === true) {
	                f.push(j);
	            }
	        }
	        return f;
	    },
	    removeChilds: function(g, a) {
	        g = kitui.byId(g);
	        if (!g) {
	            return;
	        }
	        var f = kitui.getChildNodes(g, true);
	        for (var d = 0, b = f.length; d < b; d++) {
	            var h = f[d];
	            if (a && h == a) {} else {
	                g.removeChild(f[d]);
	            }
	        }
	    },
	    selectable: function(b, a) {
	        b = kitui.byId(b);
	        if (!!a) {
	            jQuery(b).removeClass("kitui-unselectable");
	            if (isIE) {
	                b.unselectable = "off";
	            } else {
	                b.style.MozUserSelect = "";
	                b.style.KhtmlUserSelect = "";
	                b.style.UserSelect = "";
	            }
	        } else {
	            jQuery(b).addClass("kitui-unselectable");
	            if (isIE) {
	                b.unselectable = "on";
	            } else {
	                b.style.MozUserSelect = "none";
	                b.style.UserSelect = "none";
	                b.style.KhtmlUserSelect = "none";
	            }
	        }
	    }
	});

	kitui.append = function(e, t) {
		e = kitui.byId(e);
		if (!t || !e) {
			return;
		}
		if ("string" == typeof t) {
			if ("#" == t.charAt(0)) {
				t = kitui.byId(t);
				if (!t) {
					return;
				}
				e.appendChild(t);
				return t;
			} else {
				if (0 == t.indexOf("<tr")) {
					return jQuery(e).append(t)[0].lastChild;
				}
				var i = document.createElement("div");
				i.innerHTML = t;
				t = i.firstChild;
				while (i.firstChild) {
					e.appendChild(i.firstChild);
				}
				return t;
			}
		} else {
			e.appendChild(t);
			return t;
		}
	};
	

	kitui._BindCallbacks = [];
	
	kitui._BindEvents = function(b, a) {
	    kitui._BindCallbacks.push([ b, a ]);
	    if (!kitui._EventTimer) {
	        kitui._EventTimer = setTimeout(function() {
	            kitui._FireBindEvents();
	        }, 50);
	    }
	};
	
	kitui._FireBindEvents = function() {
	    for (var b = 0, a = kitui._BindCallbacks.length; b < a; b++) {
	        var c = kitui._BindCallbacks[b];
	        c[0].call(c[1]);
	    }
	    kitui._BindCallbacks = [];
	    kitui._EventTimer = null;
	};
	
	kitui._getFunctoin = function(f) {
	    if (typeof f != "string") {
	        return null;
	    }
	    var e = f.split(".");
	    var d = null;
	    for (var c = 0, a = e.length; c < a; c++) {
	        var b = e[c];
	        if (!d) {
	            d = window[b];
	        } else {
	            d = d[b];
	        }
	        if (!d) {
	            break;
	        }
	    }
	    return d;
	};
	// 组件对象
	kitui.Component = function() {
		this._events = {};
		this.uid = kitui.newId(this._idPre);
		this._id = this.uid;
		if (!this.id) {
			this.id = this.uid;
		}
		kitui.reg(this);
	};

	kitui.Component.prototype = {
		isControl : true,
		id : null,
		_idPre : "kitui-",
		_idSet : false,
		_canFire : true,
		_maskCls: "kitui-mask-loading",
		destroy : function() {
			kitui.unreg(this);
			this.fire("destroy");
		},
		getId : function() {
			return this.id;
		},
		setId : function(e) {
			if (!e) {
				throw new Error("id not null");
			}
			if (this._idSet) {
				throw new Error("id just set only one");
			}
			kitui.unreg(this);
			this.id = e;
			if (this.el) {
				this.el.id = e;
			}
			this._idSet = true;
			kitui.reg(this);
		},
	    fire: function(fnname, opt) {
	        if (this._canFire == false) {
	            return;
	        }
	        fnname = fnname.toLowerCase();
	        var b = this._events[fnname];
	        if (b) {
	            if (!opt) {
	                opt = {};
	            }
	            if (opt && opt != this) {
	                opt.source = opt.sender = this;
	                if (!opt.type) {
	                    opt.type = fnname;
	                }
	            }
	            for (var c = 0, a = b.length; c < a; c++) {
	                var f = b[c];
	                if (f) {
	                    f[0].apply(f[1], [ opt ]);
	                }
	            }
	        }
	    },		
		findListener : function(fname, fn, i) {
			fname = fname.toLowerCase();
			i = i || this;
			var events = this._events[fname];
			if (events) {
				for (var s = 0, o = events.length; s < o; s++) {
					var evt = events[s];
					if (evt[0] === fn && evt[1] === i) {
						return evt;
					}
				}
			}
		},
		un : function(c, b, a) {
			if (typeof b != "function") {
	            return false;
	        }
	        c = c.toLowerCase();
	        var d = this._events[c];
	        if (d) {
	            a = a || this;
	            var e = this.findListener(c, b, a);
	            if (e) {
	                d.remove(e);
	            }
	        }
	        return this;
		},
		on : function(fnname, fn, scope) {
	        if (typeof fn == "string") {
	            var f = kitui._getFunctoin(fn);
	            if (!f) {
	                var id = kitui.newId("__str_");
	                window[id] = fn;
	                eval("fn = function(e){var s = " + id + ";var fn = kitui._getFunctoin(s); if(fn) {fn.call(this, e)}else{eval(s);}}");
	            } else {
	                fn = f;
	            }
	        }
	        if (typeof fn != "function" || !fnname) {
	            return false;
	        }
	        fnname = fnname.toLowerCase();
	        var event = this._events[fnname];
	        if (!event) {
	            event = this._events[fnname] = [];
	        }
	        scope = scope || this;
	        if (!this.findListener(fnname, fn, scope)) {
	            event.push([ fn, scope ]);
	        }
	        return this;
		},
		set : function(attrs) {
			if ("string" == typeof attrs) {
				return this;
			}
			var t = this._allowLayout;
			this._allowLayout = false;
			var i = attrs.renderTo || attrs.render;
			delete attrs.renderTo;
			delete attrs.render;
			for (var n in attrs) {
				if (0 == n.toLowerCase().indexOf("on")) {
					if (this["_$" + n]) {
						continue;
					}
					var s = attrs[n];
					this.on(n.substring(2, n.length).toLowerCase(), s);
					delete attrs[n];
				}
			}
			for (n in attrs) {
				var o = attrs[n], r = "set" + n.charAt(0).toUpperCase()
						+ n.substring(1, n.length), fn = this[r];
				if (fn) {
					fn.call(this, o);
				} else {
					this[n] = o;
				}
			}
			if (i && this.render) {
				this.render(i);
			}
			this._allowLayout = t;
			if (this.doLayout) {
				this.doLayout();
			}
			return this;
		}
	};

	kitui.applyTo = function(e) {
		e = kitui.byId(e);
		if (!e) {
			return this;
		}
		if (kitui.get(e)) {
			throw new Error("not applyTo a kitui control");
		}
		var attrs = this.getAttrs(e);
		delete attrs._applyTo;
		if (kitui.isNull(attrs.defaultValue) && !kitui.isNull(attrs.value)) {
			attrs.defaultValue = attrs.value;
		}
		if (kitui.isNull(attrs.defaultText) && !kitui.isNull(attrs.text)) {
			attrs.defaultText = attrs.text;
		}
		var pnode = e.parentNode;
		if (pnode && this.el != e) {
			pnode.replaceChild(this.el, e);
		}
		this.set(attrs);
		return this;
	};

	// 控件对象
	kitui.Control = function(e) {
		kitui.Control.superclass.constructor.apply(this, arguments);
		this._create();
		this.el.uid = this.uid;
		this._initEvents();
		if (this._clearBorder) {
			this.el.style.borderWidth = "0";
		}
		this.addCls(this.uiCls);
		this.setWidth(this.width);
		this.setHeight(this.height);
		this.el.style.display = this.visible ? this._displayStyle : "none";
		if (e) {
			kitui.applyTo.call(this, e);
		}
	};

	kitui.extend(kitui.Control, kitui.Component, {
		width : "",
		height : "",
		visible : true,
		readOnly : false,
		enabled : true,
		name : "",
		tabIndex : 0,
		_displayStyle: "",
		required:false,
	    _readOnlyCls: "kitui-readonly",
	    _disabledCls: "kitui-disabled",		
		_labelFieldCls : "kitui-labelfield",
		labelField : false,
		label : "",
		labelStyle : "",
		_doLabelLayout:true,		
		
		getLabel : function() {
			return this.label;
		},
		setLabel : function(value) {
			if (this.label != value) {
				this.label = value;
				if (this._labelWarp) {
					this._labelWarp.innerHTML = value;
				}
				this._labelLayout();
			}
		},
		setLabelStyle : function(style){
	        if (this.labelStyle != style) {
	            this.labelStyle = style;
	            if (this._labelWarp) {
	                kitui.setStyle(this._labelWarp, style);
	            }
	            this._labelLayout();
	        }
		},
		getLabelField : function() {
			return this.labelField;
		},
		setLabelField : function(labelfield) {
			if (this.labelField != labelfield) {
				this.labelField = labelfield;
				if (!this._borderEl) {
					return;
				}
				if (!this._labelWarp) {
					this._labelWarp = kitui.append(this.el,
							'<label class="kitui-labelfield-label"></label>');
					this._labelWarp.innerHTML = this.label;
					kitui.setStyle(this._labelWarp, this.labelStyle);
				}
				this._labelWarp.style.display = labelfield ? "block" : "none";
				if (labelfield) {
					kitui.addClass(this.el, this._labelFieldCls);
				} else {
					kitui.removeClass(this.el, this._labelFieldCls);
				}
				this._labelLayout();
			}
		},
		_labelLayout : function() {
			var e = this._borderEl;
			if (!e) {
				return;
			}
			this._labelLayouted = true;
			if (this.labelField) {
				var t = this._labelWarp.offsetWidth;
				e.style.marginLeft = t + "px";
				this._doLabelLayout = 0 === t;
			} else {
				e.style.marginLeft = 0;
			}
		},				
		getAttrs : function(el) {
			var attrs = {};
        	kitui._ParseString(el, attrs, [ "id", "name", "width", "height", "borderStyle", "value", "defaultValue", "contextMenu", "tooltip", "ondestroy", "data-options", "ajaxData", "ajaxType", "dataField" ]);
        	kitui._ParseBool(el, attrs, [ "visible", "enabled", "readOnly" ]);	
	        if (el.readOnly && el.readOnly != "false") {
	            attrs.readOnly = true;
	        }        			
	        var s = attrs["data-options"];
			if (s) {
				if (s.substring(0, 1) != '{') {
					s = '{' + s + '}';
				}
				options = (new Function('return ' + s))();
				if (options) {
	                kitui.copyTo(attrs, options);
	            }
			}
	        return attrs;
		},
	    isDisplay: function() {
	        var body = document.body;
	        var ele = this.el;
	        while (true) {
	            if (ele == null || !ele.style) {
	                return false;
	            }
	            if (ele && ele.style && ele.style.display == "none") {
	                return false;
	            }
	            if (ele == body) {
	                return true;
	            }
	            ele = ele.parentNode;
	        }
	        return true;
	    },
	    _allowUpdate: true,
	    beginUpdate: function() {
	        this._allowUpdate = false;
	    },
	    endUpdate: function() {
	        this._allowUpdate = true;
	        this.doUpdate();
	    },
	    doUpdate: function() {},	    
	    canLayout: function() {
	        if (this._allowLayout == false) {
	            return false;
	        }
	        return this.isDisplay();
	    },
		doLayout : function() {
		},
		getTabIndex : function() {
			return this.tabIndex;
		},
		setTabIndex : function(e) {
			var t = this._textEl || this.el;
			t.tabIndex = e;
			this.tabIndex = e;
		},
		getValue : function() {
			return this.value;
		},
		setValue : function(e) {
			this.value = e;
		},
		getDefaultValue : function() {
			return this.defaultValue;
		},
		setDefaultValue : function(e) {
			this.defaultValue = e;
		},
	    getContextMenu: function() {
	        return this.contextMenu;
	    },
	    setContextMenu: function(e) {
	        var t = this._getContextMenu(e);
	        if (!t) {
	            return;
	        }
	        if (this.contextMenu !== t) {
	            this.contextMenu = t;
	            this.contextMenu.owner = this;
	            kitui.on(this.el, "contextmenu", this.__OnHtmlContextMenu, this);
	        }
	    },	
	    __OnHtmlContextMenu: function(e) {
	        var t = {
	            popupEl: this.el,
	            htmlEvent: e,
	            cancel: false
	        };
	        this.contextMenu.fire("BeforeOpen", t);
	        if (true == t.cancel) {
	            return;
	        }
	        this.contextMenu.fire("opening", t);
	        if (true == t.cancel) {
	            return;
	        }
	        this.contextMenu.showAtPos(e.pageX, e.pageY);
	        this.contextMenu.fire("Open", t);
	        return false;
	    },
	    _getContextMenu: function(e) {
	        var t = e;
	        if ("string" == typeof e) {
	            t = kitui.get(e);
	            if (!t) {
	                kitui.parse(e);
	                t = kitui.get(e);
	            }
	        } else {
	            if (kitui.isArray(e)) {
	                t = {
	                    type: "menu",
	                    items: e
	                };
	            } else {
	                if (!kitui.isControl(e)) {
	                    t = kitui.create(e);
	                }
	            }
	        }
	        return t;
	    },	    	
		setRequired: function(tag) {
			this.required = tag;
			if(tag){
				if($(this._labelWarp).children("font").length==0)
            		kitui.append(this._labelWarp,'<font id=aaa color=red>*</font>');
            }
            else{
				if($(this._labelWarp).children("font").length>0)
            		$(this._labelWarp).children("font").remove();
            }				
			return;
//	        if (this.required != tag) {
//	            this.required = tag;
//	            if(this._labelWarp){
//	            	if(tag)
//	            		kitui.append(this._labelWarp,'<font id=aaa color=red>*</font>');
//	            	else{
//	            		alert()
//	            	}	            		
//	            }
//	        }
	    },		
	    ajaxData: null,
	    ajaxType: "",
	    setAjaxData: function(a) {
	        this.ajaxData = a;
	    },
	    getAjaxData: function() {
	        return this.ajaxData;
	    },
	    setUrl: function(a) {
	        this.url = a;
	        this._doLoad({});
	    },
	    getUrl: function() {
	        return this.url;
	    },	    
	    setAjaxType: function(a) {
	        this.ajaxType = a;
	    },
	    getAjaxType: function() {
	        return this.ajaxType;
	    },		
		blur : function() {
			try {
				var e = this;
				e.el.blur();
			} catch (t) {
			}
		},
		focus : function() {
			try {
				var e = this;
				e.el.focus();
			} catch (t) {
			}
		},
		destroy : function(e) {
			if (true !== this.destroyed) {
				this._destroyChildren(e);
			}
			if (this.el) {
				kitui.clearEvent(this.el);
				if (false !== e) {
					var t = this.el.parentNode;
					if (t) {
						t.removeChild(this.el);
					}
				}
			}
			this._borderEl = null;
			this.el = null;
			kitui.unreg(this);
			this.destroyed = true;
			this.fire("destroy");
		},
	    _destroyChildren: function(e) {
	        if (this.el) {
	            for (var t = kitui.getChildControls(this), i = 0, n = t.length; i < n; i++) {
	                var s = t[i];
	                if (true !== s.destroyed) {
	                    s.destroy(e);
	                }
	            }
	        }
	    },		
		hide : function() {
			this.setVisible(false);
		},
		show : function() {
			this.setVisible(true);
		},
		getVisible : function() {
			return this.visible;
		},
		setVisible : function(e) {
			this.visible = e;
			if (this.el) {
				this.el.style.display = e ? this._displayStyle : "none";
				this.doLayout();
			}
		},
		setVisibility : function(e) {
			if (this.el) {
				this.el.style.visibility = e ? "visible" : "hidden";
			}
		},		
		disable : function() {
			this.setEnabled(false);
		},
		enable : function() {
			this.setEnabled(true);
		},
		getEnabled : function() {
			return this.enabled;
		},
		setEnabled : function(e) {
			this.enabled = e;
			if (this.enabled) {
				this.removeCls(this._disabledCls);
			} else {
				this.addCls(this._disabledCls);
			}
			this._doReadOnly();
		},
	    getParent: function(d) {
	        var b = document;
	        var a = this.el.parentNode;
	        while (a != b && a != null) {
	            var c = kitui.get(a);
	            if (c) {
	                if (!kitui.isControl(c)) {
	                    return null;
	                }
	                if (!d || c.uiCls == d) {
	                    return c;
	                }
	            }
	            a = a.parentNode;
	        }
	        return null;
	    },		
		isReadOnly : function() {
			if (this.readOnly || !this.enabled) {
				return true;
			}
			var e = this.getParent();
			if (e) {
				return e.isReadOnly();
			}
			return false;
		},
		getReadOnly : function() {
			return this.readOnly;
		},
		setReadOnly : function(e) {
			this.readOnly = e;
			this._doReadOnly1()
		},
		_doReadOnly1:function(){
			if (this.readOnly) {
				if(this._textEl)
					this._textEl.style.backgroundColor="#CCCCCC"
				this.addCls(this._readOnlyCls);
			} else {
				if(this._textEl)
					this._textEl.style.backgroundColor="#FFFFFF"
				this.removeCls(this._readOnlyCls);
			}			
		},
		_doReadOnly : function() {
			if (this.readOnly) {
				this.addCls(this._readOnlyCls);
			} else {
				this.removeCls(this._readOnlyCls);
			}
		},
		removeCls : function(e) {
			kitui.removeClass(this.el, e);
		},
		addCls : function(e) {
			kitui.addClass(this.el, e);
		},
		getCls : function() {
			return this.cls;
		},
		setCls : function(e) {
			this.addCls(e);
		},
		getStyle : function() {
			return this.style;
		},
		setStyle : function(e) {
			this.style = e;
			kitui.setStyle(this.el, e);
			if (this._clearBorder) {
				this.el.style.borderWidth = "0";
				this.el.style.padding = "0px";
			}
			this.width = this.el.style.width;
			this.height = this.el.style.height;
			this._sizeChanged();
		},
	    getBox: function() {
	        return kitui.getBox(this.el);
	    },	
	    setBorderStyle: function(b) {
	        var a = this._borderEl || this.el;
	        kitui.setStyle(a, b);
	        this.doLayout();
	    },	    	
		getHeight : function(e) {
			var t = e ? jQuery(this.el).height() : jQuery(this.el)
					.outerHeight();
			if (e && this._borderEl) {
				var i = kitui.getBorders(this._borderEl);
				t = t - i.top - i.bottom;
			}
			return t;
		},
		setHeight : function(e) {
			if (parseInt(e) == e) {
				e += "px";
			}
			this.height = e;
			this.el.style.height = e;
			this._sizeChanged();
		},
		getWidth : function(e) {
			var t = this.el, i = e ? jQuery(t).width() : jQuery(t).outerWidth();
			if (e && this._borderEl) {
				var n = kitui.getBorders(this._borderEl);
				i = i - n.left - n.right;
			}
			return i;
		},
		setWidth : function(e) {
			if (parseInt(e) == e) {
				e += "px";
			}
			this.width = e;
			this.el.style.width = e;
			this._sizeChanged();
		},
		getEl : function() {
			return this.el;
		},
		setTooltip: function(a) {
	        this.tooltip = a;
	        this.el.title = a;
	    },
	    getTooltip: function() {
	        return this.tooltip;
	    },
		render : function(b, a) {

	        if (typeof b === "string") {
	            if (b == "#body") {
	                b = document.body;
	            } else {
	                b = kitui.byId(b);
	            }
	        }
	        if (!b) {
	            return;
	        }
	        if (!a) {
	            a = "append";
	        }
	        a = a.toLowerCase();
	        if (a == "before") {
	            jQuery(b).before(this.el);
	        } else {
	            if (a == "preend") {
	                jQuery(b).preend(this.el);
	            } else {
	                if (a == "after") {
	                    jQuery(b).after(this.el);
	                } else {
	                    b.appendChild(this.el);
	                }
	            }
	        }			
			this.el.id = this.id;
			this.doLayout();
			this.fire("render");
		},
		getName : function() {
			return this.name;
		},
		setName : function(e) {
			this.name = e;
		},
	    isAutoHeight: function() {
	        var a = this.el.style.height;
	        return a == "auto" || a == "";
	    },
	    isAutoWidth: function() {
	        var a = this.el.style.width;
	        return a == "auto" || a == "";
	    },
	    isFixedSize: function() {
	        var b = this.width;
	        var a = this.height;
	        if (parseInt(b) + "px" == b && parseInt(a) + "px" == a) {
	            return true;
	        }
	        return false;
	    },		
		_initEvents : function() {
		},
		_create : function() {
			this.el = document.createElement("div");
		},
		_sizeChanged : function() {
			this.doLayout();
		},
	    isRender: function(a) {
	        return !!(this.el && this.el.parentNode && this.el.parentNode.tagName);
	    },
		mask: function(a) {
	        if (typeof a == "string") {
	            a = {
	                html: a
	            };
	        }
	        a = a || {};
	        a.el = this._getMaskWrapEl();
	        if (!a.cls) {
	            a.cls = this._maskCls;
	        }
	        kitui.mask(a);
	    },
	    unmask: function() {
	        kitui.unmask(this._getMaskWrapEl());
	    },
	    _getMaskWrapEl: function() {
	        return this.el;
	    },
	    loadingMsg: "Loading...",
	    loading: function(a) {
	        this.mask(a || this.loadingMsg);
	    },
	    setLoadingMsg: function(a) {
	        this.loadingMsg = a;
	    },
	    getLoadingMsg: function() {
	        return this.loadingMsg;
	    }
	});

	String.format = function(e) {
		var t = Array.prototype.slice.call(arguments, 1);
		e = e || "";
		return e.replace(/\{(\d+)\}/g, function(e, i) {
					return t[i];
				});
	};

	String.prototype.trim = function() {
		var e = /^\s+|\s+$/g;
		return function() {
			return this.replace(e, "");
		};
	}();
})(jQuery);
if (typeof kitui_debugger == "undefined") {
    kitui_debugger = true;
}

(function() {
    var a = {
        tabindex: "tabIndex",
        readonly: "readOnly",
        "for": "htmlFor",
        "class": "className",
        maxlength: "maxLength",
        cellspacing: "cellSpacing",
        cellpadding: "cellPadding",
        rowspan: "rowSpan",
        colspan: "colSpan",
        usemap: "useMap",
        frameborder: "frameBorder",
        contenteditable: "contentEditable"
    };
    var c = document.createElement("div");
    c.setAttribute("class", "t");
    var b = c.className === "t";
    kitui.setAttr = function(f, d, g) {
        f.setAttribute(b ? d : a[d] || d, g);
    };
    kitui.getAttr = function(h, g) {
        if (g == "value" && (isIE6 || isIE7)) {
            var d = h.attributes[g];
            return d ? d.value : null;
        }
        var f = h.getAttribute(b ? g : a[g] || g);
        if (typeof f == "function") {
            f = h.attributes[g].value;
        }
        return f;
    };
})();
kitui_onOne = function(obj, mName, fn, scope) {
    var mName = "on" + mName.toLowerCase();
    obj[mName] = function(event) {
        event = event || window.event;
        event.target = event.target || event.srcElement;
        if (!event.preventDefault) {
            event.preventDefault = function() {
                if (window.event) {
                    window.event.returnValue = false;
                }
            };
        }
        if (!event.stopPropogation) {
            event.stopPropogation = function() {
                if (window.event) {
                    window.event.cancelBubble = true;
                }
            };
        }
        var g = fn.call(scope, event);
        if (g === false) {
            return false;
        }
    };
};
kitui._placeholder = function(b) {
    b = kitui.byId(b);
    function c() {
        var d = b._placeholder_label;
        if (!d) {
            return;
        }
        var f = b.getAttribute("placeholder");
        if (!f) {
            f = b.placeholder;
        }
        if (!b.value && !b.disabled) {
            d.innerHTML = f;
            d.style.display = "";
        } else {
            d.style.display = "none";
        }
    }
    if (b._placeholder) {
        c();
        return;
    }
    b._placeholder = true;
    var a = null;
    if(kitui.isIE6||kitui.isIE7||kitui.isIE8){
	    a = document.createElement("label");
	    a.className = "kitui-placeholder-label";
	    b.parentNode.appendChild(a);
	    b._placeholder_label = a;
	    a.onmousedown = function() {
	        b.focus();
	    };    	
    }

    b.onpropertychange = function(d) {
        d = d || window.event;
        if (d.propertyName == "value") {
            c();
        }
    };
    c();
    b.onfocus=function(d){
        if (!b.readOnly&&a) {
            a.style.display = "none";
            //a.style.visibility = "hidden";
        }
    }
    b.onblur = function(d) {
        c();
    };
};
kitui.__windowResizes = [];

kitui.onWindowResize = function(b, a) {
    kitui.__windowResizes.push([ b, a ]);
};

kitui.on(window, "resize", function(f) {
    var c = kitui.__windowResizes;
    for (var b = 0, a = c.length; b < a; b++) {
        var d = c[b];
        d[0].call(d[1], f);
    }
});
kitui.getStyle = function() {
    var e = document.defaultView;
    return new Function("el", "style", [ "style['indexOf']('-')>-1 && (style=style.replace(/-(\\w)/g,function(m,a){return a.toUpperCase()}));", "style=='float' && (style='", e ? "cssFloat" : "styleFloat", "');return el.style[style] || ", e ? "window.getComputedStyle(el,null)[style]" : "el.currentStyle[style]", " || null;" ].join(""));
}();
kitui.copyTo(Array.prototype, {
    add: Array.prototype.enqueue = function(a) {
        this[this.length] = a;
        return this;
    },
    getRange: function(f, b) {
        var a = [];
        for (var c = f; c <= b; c++) {
            var d = this[c];
            if (d) {
                a[a.length] = d;
            }
        }
        return a;
    },
    addRange: function(c) {
        for (var b = 0, a = c.length; b < a; b++) {
            this[this.length] = c[b];
        }
        return this;
    },
    clear: function() {
        this.length = 0;
        return this;
    },
    clone: function() {
        if (this.length === 1) {
            return [ this[0] ];
        } else {
            return Array.apply(null, this);
        }
    },
    contains: function(a) {
        return this.indexOf(a) >= 0;
    },
    indexOf: function(c, d) {
        var a = this.length;
        for (var b = d < 0 ? Math.max(0, a + d) : d || 0; b < a; b++) {
            if (this[b] === c) {
                return b;
            }
        }
        return -1;
    },
    dequeue: function() {
        return this.shift();
    },
    insert: function(a, b) {
        this.splice(a, 0, b);
        return this;
    },
    insertRange: function(b, a) {
        for (var c = a.length - 1; c >= 0; c--) {
            var d = a[c];
            this.splice(b, 0, d);
        }
        return this;
    },
    remove: function(b) {
        var a = this.indexOf(b);
        if (a >= 0) {
            this.splice(a, 1);
        }
        return a >= 0;
    },
    removeAt: function(a) {
        var b = this[a];
        this.splice(a, 1);
        return b;
    },
    removeRange: function(b) {
        b = b.clone();
        for (var c = 0, a = b.length; c < a; c++) {
            this.remove(b[c]);
        }
    }
});
__kitui_setControls = function(b, f, e) {
    f = f || this._contentEl;
    e = e || this;
    if (!b) {
        b = [];
    }
    if (!kitui.isArray(b)) {
        b = [ b ];
    }
    for (var d = 0, a = b.length; d < a; d++) {
        var g = b[d];
        if (typeof g == "string") {
            if (g.indexOf("#") == 0) {
                g = kitui.byId(g);
            }
        } else {
            if (kitui.isElement(g)) {} else {
                g = kitui.getAndCreate(g);
                g = g.el;
            }
        }
        if (!g) {
            continue;
        }
        kitui.append(f, g);
    }
    kitui.parse(f);
    e.doLayout();
    return e;
};

kitui.Container = function() {
    kitui.Container.superclass.constructor.call(this);
    if(!this._contentEl ){
        this._contentEl = this.el;
    }
};

kitui.extend(kitui.Container, kitui.Control, {
    setControls: __kitui_setControls,
    getContentEl: function() {
        return this._contentEl;
    },
    getBodyEl: function() {
        return this._contentEl;
    }
});
var ua = navigator.userAgent.toLowerCase(), check = function(e) {
    return e.test(ua);
}, DOC = document, isStrict = "CSS1Compat" == document.compatMode, version = function(e, t) {
    var i;
    return e && (i = t.exec(ua)) ? parseFloat(i[1]) : 0;
}, docMode = document.documentMode, isOpera = check(/opera/), isOpera10_5 = isOpera && check(/version\/10\.5/), isChrome = check(/\bchrome\b/), isWebKit = check(/webkit/), isSafari = !isChrome && check(/safari/), isSafari2 = isSafari && check(/applewebkit\/4/), isSafari3 = isSafari && check(/version\/3/), isSafari4 = isSafari && check(/version\/4/), isSafari5_0 = isSafari && check(/version\/5\.0/), isSafari5 = isSafari && check(/version\/5/), isIE = !isOpera && check(/msie/), isIE7 = isIE && (check(/msie 7/) && 8 != docMode && 9 != docMode && 10 != docMode || 7 == docMode), isIE8 = isIE && (check(/msie 8/) && 7 != docMode && 9 != docMode && 10 != docMode || 8 == docMode), isIE9 = isIE && (check(/msie 9/) && 7 != docMode && 8 != docMode && 10 != docMode || 9 == docMode), isIE10 = isIE && (check(/msie 10/) && 7 != docMode && 8 != docMode && 9 != docMode || 10 == docMode), isIE6 = isIE && !isIE7 && !isIE8 && !isIE9 && !isIE10, isIE11 = ua.indexOf("trident") > -1 && ua.indexOf("rv") > -1, isIE = isIE || isIE11, isFirefox = navigator.userAgent.indexOf("Firefox") > 0, isGecko = !isWebKit && check(/gecko/), isGecko3 = isGecko && check(/rv:1\.9/), isGecko4 = isGecko && check(/rv:2\.0/), isGecko5 = isGecko && check(/rv:5\./), isGecko10 = isGecko && check(/rv:10\./), isFF3_0 = isGecko3 && check(/rv:1\.9\.0/), isFF3_5 = isGecko3 && check(/rv:1\.9\.1/), isFF3_6 = isGecko3 && check(/rv:1\.9\.2/), isWindows = check(/windows|win32/), isMac = check(/macintosh|mac os x/), isAir = check(/adobeair/), isLinux = check(/linux/), scrollbarSize = null, chromeVersion = version(true, /\bchrome\/(\d+\.\d+)/), firefoxVersion = version(true, /\bfirefox\/(\d+\.\d+)/), ieVersion = version(isIE, /msie (\d+\.\d+)/), IE_V = isIE ? parseInt(ieVersion) : -1, operaVersion = version(isOpera, /version\/(\d+\.\d+)/), safariVersion = version(isSafari, /version\/(\d+\.\d+)/), webKitVersion = version(isWebKit, /webkit\/(\d+\.\d+)/), isSecure = /^https/i.test(window.location.protocol), isBorderBox = isIE && !isStrict;

if (isIE6) {
    try {
        DOC.execCommand("BackgroundImageCache", false, true);
    } catch (e) {}
}

kitui.boxModel = !isBorderBox;

kitui.isIE = isIE;

kitui.isIE6 = isIE6;

kitui.isIE7 = isIE7;

kitui.isIE8 = isIE8;

kitui.isIE9 = isIE9;

kitui.isIE10 = isIE10;

kitui.isIE11 = isIE11;

kitui.IE_V = IE_V;

kitui.isFirefox = isFirefox;

kitui.isOpera = isOpera;

kitui.isSafari = isSafari;

kitui.isChrome = isChrome;

if (jQuery) {
    jQuery.boxModel = kitui.boxModel;
}

kitui.noBorderBox = false;

if (jQuery.boxModel == false && isIE && isIE9 == false) {
    kitui.noBorderBox = true;
}

kitui.zIndex = 1000;

kitui.getMaxZIndex = function() {
    return kitui.zIndex++;
};
kitui.isWindowDisplay = function() {
    try {
        var c = window.parent;
        var m = c != window;
        if (m) {
            var g = c.document.getElementsByTagName("iframe");
            var a = c.document.getElementsByTagName("frame");
            var j = [];
            for (var h = 0, d = g.length; h < d; h++) {
                j.push(g[h]);
            }
            for (var h = 0, d = a.length; h < d; h++) {
                j.push(a[h]);
            }
            var f = null;
            for (var h = 0, d = j.length; h < d; h++) {
                var b = j[h];
                if (b.contentWindow == window) {
                    f = b;
                    break;
                }
            }
            if (!f) {
                return false;
            }
            return kitui.isDisplay(f, c.document.body);
        } else {
            return true;
        }
    } catch (k) {
        return true;
    }
};


kitui._MaskID = 1;

kitui._MaskObjects = {};

kitui.mask = function(e) {
    var t = kitui.byId(e);
    if (kitui.isElement(t)) {
        e = {
            el: t
        };
    } else {
        if ("string" == typeof e) {
            e = {
                html: e
            };
        }
    }
    e = kitui.copyTo({
        html: "",
        cls: "",
        style: "",
        backStyle: ""
    }, e);
    e.el = kitui.byId(e.el);
    if (!e.el) {
        e.el = document.body;
    }
    t = e.el;
    kitui.unmask(e.el);
    t._maskid = kitui._MaskID++;
    kitui._MaskObjects[t._maskid] = e;
    var i = kitui.append(t, '<div class="kitui-mask"><div class="kitui-mask-background" style="' + e.backStyle + '"></div><div class="kitui-mask-msg ' + e.cls + '" style="' + e.style + '">' + e.html + "</div></div>");
    //var i = kitui.append(t, '<div class="kitui-mask"><iframe frameborder="0" width="100%" height="100%" style="position:absolute; z-index:-1; width:0;height:0; top:0;left:0;scrolling:no;"></iframe><div class="kitui-mask-background" style="' + e.backStyle + '"></div><div class="kitui-mask-msg ' + e.cls + '" style="' + e.style + '">' + e.html + "</div></div>");
    var iframe_id = "maskiframe"
	if(kitui.isIE && kitui_useShims){
			var iframeel = null;
			if(!document.getElementById(iframe_id)){
				iframeel = "<iframe frameborder='0' id="+iframe_id+" style='position:absolute; z-index:-1; width:0; height:0; top:0;left:0;scrolling:no;'></iframe>";
			}else{
				iframeel = document.getElementById(iframe_id)
			}
			var _shimEl = kitui.append(document.body, iframeel);
			var te = kitui.getBox(i);
			_shimEl.style.width = te.width+"px";
		    _shimEl.style.height = te.height+"px";
		    _shimEl.style.left = te.x+"px";
		    _shimEl.style.top = te.y+"px";   
		     var z = kitui.getStyle(i, "zIndex");
	            if (!isNaN(z)) {
	                _shimEl.style.zIndex = z - 3;
	            }        	
	}
	
    if (t == document.body) {
        kitui.addClass(i, "kitui-fixed");
    }
    e.maskEl = i;
    if (!kitui.isNull(e.opacity)) {
        kitui.setOpacity(i.firstChild, e.opacity);
    }
    function n() {
        s.style.display = "block";
        var e = kitui.getSize(s);
        s.style.marginLeft = -e.width / 2 + "px";
        s.style.marginTop = -e.height / 2 + "px";
        s.style.zIndex = kitui.getMaxZIndex();
    }
    var s = i.lastChild;
    s.style.display = "none";
    setTimeout(function() {
        n();
    }, 0);
};

kitui.unmask = function(e) {
    e = kitui.byId(e);
    if (!e) {
        e = document.body;
    }
    $("#maskiframe").remove();
    var t = kitui._MaskObjects[e._maskid];
    if (!t) {
        return;
    }
    delete kitui._MaskObjects[e._maskid];
    var i = t.maskEl;
    t.maskEl = null;
    if (i && i.parentNode) {
        i.parentNode.removeChild(i);
    }
};
kitui.Cookie = {
    get: function(e) {
        for (var t = document.cookie.split("; "), i = null, n = 0; n < t.length; n++) {
            var s = t[n].split("=");
            if (e == s[0]) {
                i = s;
            }
        }
        if (i) {
            var o = i[1];
            if (void 0 === o) {
                return o;
            }
            return unescape(o);
        }
        return null;
    },
    set: function(e, t, i, n) {
        var s = new Date();
        if (null != i) {
            s = new Date(s.getTime() + 1e3 * i * 3600 * 24);
        }
        document.cookie = e + "=" + escape(t) + (null == i ? "" : "; expires=" + s.toGMTString()) + ";path=/" + (n ? "; domain=" + n : "");
    },
    del: function(e, t) {
        this.set(e, null, -100, t);
    }
};

kitui._Layouts = {};

kitui.layout = function(b, a) {
    if (!document.body) {
        return;
    }
    function c(h) {
        if (!h) {
            return;
        }
        var j = kitui.get(h);
        if (j) {
            if (j.doLayout) {
                if (!kitui._Layouts[j.uid]) {
                    kitui._Layouts[j.uid] = j;
                    if (a !== false || j.isFixedSize() == false) {
                        j.doLayout(false);
                    }
                    delete kitui._Layouts[j.uid];
                }
            }
        } else {
            var g = h.childNodes;
            if (g) {
                for (var e = 0, d = g.length; e < d; e++) {
                    var f = g[e];
                    c(f);
                }
            }
        }
    }
    if (!b) {
        b = document.body;
    }
    c(b);
    if (b == document.body) {
        kitui.layoutIFrames();
    }
};

kitui.ajax = function(a) {
    if (!a.dataType) {
        a.dataType = "text";
    }
	kitui.copyTo(a,{
		beforeSend:function(){
	    	
	    }
	}) 
    return window.jQuery.ajax(a);
};

kitui._evalAjaxData = function(ajaxData, scope) {
    var obj = ajaxData;
    var t = typeof ajaxData;
    if (t == "string") {
        obj = eval("(" + ajaxData + ")");
        if (typeof obj == "function") {
            obj = obj.call(scope);
        }
    }
    return obj;
};
kitui.WindowVisible = kitui.isWindowDisplay();

kitui.layoutIFrames = function(a) {
    if (!document.body) {
        return;
    }
    if (!a) {
        a = document.body;
    }
    var b = a.getElementsByTagName("iframe");
    setTimeout(function() {
        for (var f = 0, c = b.length; f < c; f++) {
            var g = b[f];
            try {
                if (kitui.isDisplay(g) && kitui.isAncestor(a, g)) {
                    if (g.contentWindow.kitui) {
                        if (g.contentWindow.kitui.WindowVisible == false) {
                            g.contentWindow.kitui.WindowVisible = g.contentWindow.kitui.isWindowDisplay();
                            g.contentWindow.kitui.layout();
                        } else {
                            g.contentWindow.kitui.layout(null, false);
                        }
                    }
                    g.contentWindow.kitui.layoutIFrames();
                }
            } catch (d) {}
        }
    }, 30);
};

kitui.JSON = new function() {
    var sb = [];
    var _dateFormat = null;
    var useHasOwn = !!{}.hasOwnProperty, replaceString = function(a, b) {
        var c = m[b];
        if (c) {
            return c;
        }
        c = b.charCodeAt();
        return "\\u00" + Math.floor(c / 16).toString(16) + (c % 16).toString(16);
    }, doEncode = function(o, field) {
        if (o === null) {
            sb[sb.length] = "null";
            return;
        }
        var t = typeof o;
        if (t == "undefined") {
            sb[sb.length] = "null";
            return;
        } else {
            if (o.push) {
                sb[sb.length] = "[";
                var b, i, l = o.length, v;
                for (i = 0; i < l; i += 1) {
                    v = o[i];
                    t = typeof v;
                    if (t == "undefined" || t == "function" || t == "unknown") {} else {
                        if (b) {
                            sb[sb.length] = ",";
                        }
                        doEncode(v);
                        b = true;
                    }
                }
                sb[sb.length] = "]";
                return;
            } else {
                if (o.getFullYear) {
                    if (_dateFormat) {
                        sb[sb.length] = _dateFormat(o, field);
                    } else {
                        var n;
                        sb[sb.length] = '"';
                        sb[sb.length] = o.getFullYear();
                        sb[sb.length] = "-";
                        n = o.getMonth() + 1;
                        sb[sb.length] = n < 10 ? "0" + n : n;
                        sb[sb.length] = "-";
                        n = o.getDate();
                        sb[sb.length] = n < 10 ? "0" + n : n;
                        sb[sb.length] = "T";
                        n = o.getHours();
                        sb[sb.length] = n < 10 ? "0" + n : n;
                        sb[sb.length] = ":";
                        n = o.getMinutes();
                        sb[sb.length] = n < 10 ? "0" + n : n;
                        sb[sb.length] = ":";
                        n = o.getSeconds();
                        sb[sb.length] = n < 10 ? "0" + n : n;
                        sb[sb.length] = '"';
                        return;
                    }
                } else {
                    if (t == "string") {
                        if (strReg1.test(o)) {
                            sb[sb.length] = '"';
                            sb[sb.length] = o.replace(strReg2, replaceString);
                            sb[sb.length] = '"';
                            return;
                        }
                        sb[sb.length] = '"' + o + '"';
                        return;
                    } else {
                        if (t == "number") {
                            sb[sb.length] = o;
                            return;
                        } else {
                            if (t == "boolean") {
                                sb[sb.length] = String(o);
                                return;
                            } else {
                                sb[sb.length] = "{";
                                var b, i, v;
                                for (i in o) {
                                    if (!useHasOwn || Object.prototype.hasOwnProperty.call(o, i)) {
                                        v = o[i];
                                        t = typeof v;
                                        if (t == "undefined" || t == "function" || t == "unknown") {} else {
                                            if (b) {
                                                sb[sb.length] = ",";
                                            }
                                            doEncode(i);
                                            sb[sb.length] = ":";
                                            doEncode(v, i);
                                            b = true;
                                        }
                                    }
                                }
                                sb[sb.length] = "}";
                                return;
                            }
                        }
                    }
                }
            }
        }
    }, m = {
        "\b": "\\b",
        "	": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    }, strReg1 = /["\\\x00-\x1f]/, strReg2 = /([\x00-\x1f\\"])/g;
    this.encode = function() {
        var ec;
        return function(o, dateFormat) {
            sb = [];
            _dateFormat = dateFormat;
            doEncode(o);
            _dateFormat = null;
            return sb.join("");
        };
    }();
    this.decode = function() {
        var dateRe1 = /^(\d{4})-(\d{2})-(\d{2})[T](\d{2}):(\d{2}):(\d{2}(?:\.*\d*)?)Z*$/, dateRe2 = new RegExp("^/+Date\\((-?[0-9]+).*\\)/+$", "g"), re = /[\"\'](\d{4})-(\d{1,2})-(\d{1,2})[T](\d{1,2}):(\d{1,2}):(\d{1,2})(\.*\d*)[\"\']/g;
        return function(json, parseDate) {
            if ("" === json || null === json || void 0 === json) {
                return json;
            }
            if ("object" == typeof json) {
                json = this.encode(json);
            }
            function evalParse(json) {
                if (false !== parseDate) {
                    json = json.replace(__js_dateRegEx, "$1new Date($2)");
                    json = json.replace(re, "new Date($1,$2-1,$3,$4,$5,$6)");
                    json = json.replace(__js_dateRegEx2, "new Date($1)");
                }
                return eval("(" + json + ")");
            }
            var data = null;
            if (window.JSON && window.JSON.parse) {
                var dateReviver = function(e, t) {
                    if ("string" === typeof t && false !== parseDate) {
                        dateRe1.lastIndex = 0;
                        var i = dateRe1.exec(t);
                        if (i) {
                            t = new Date(i[1], i[2] - 1, i[3], i[4], i[5], i[6]);
                            return t;
                        }
                        dateRe2.lastIndex = 0;
                        i = dateRe2.exec(t);
                        if (i) {
                            t = new Date(parseInt(i[1]));
                            return t;
                        }
                    }
                    return t;
                };
                try {
                    var json2 = json.replace(__js_dateRegEx, '$1"/Date($2)/"');
                    data = window.JSON.parse(json2, dateReviver);
                } catch (ex) {
                    data = evalParse(json);
                }
            } else {
                data = evalParse(json);
            }
            return data;
        };
    }();
}();
__js_dateRegEx = new RegExp('(^|[^\\\\])\\"\\\\/Date\\((-?[0-9]+)(?:[a-zA-Z]|(?:\\+|-)[0-9]{4})?\\)\\\\/\\"', "g");

__js_dateRegEx2 = new RegExp("[\"']/Date\\(([0-9]+)\\)/[\"']", "g");
kitui.encode = kitui.JSON.encode;

kitui.decode = kitui.JSON.decode;
kitui.clone = function(e, t) {
    if (null === e || void 0 === e) {
        return e;
    }
    var i = kitui.encode(e), n = kitui.decode(i);
    function s(e) {
        for (var t = 0, i = e.length; t < i; t++) {
            var n = e[t];
            delete n._state;
            delete n._id;
            delete n._pid;
            delete n._uid;
            for (var o in n) {
                var r = n[o];
                if (r instanceof Array) {
                    s(r);
                }
            }
        }
    }
    if (false !== t) {
        s(n instanceof Array ? n : [ n ]);
    }
    return n;
};
kitui._getMap = function(name, obj) {
    if (!name) {
        return null;
    }
    if (name.indexOf(".") == -1 && name.indexOf("[") == -1) {
        return obj[name];
    }
    var s = "obj." + name;
    try {
        var v = eval(s);
    } catch (e) {
        return null;
    }
    return v;
};

kitui._setMap = function(a, m, e) {
    if (!e) {
        return;
    }
    if (typeof a != "string") {
        return;
    }
    var k = a.split(".");
    function g(r, p, o, n) {
        var l = r[p];
        if (!l) {
            l = r[p] = [];
        }
        for (var q = 0; q <= o; q++) {
            var s = l[q];
            if (!s) {
                if (n === null || n === undefined) {
                    s = l[q] = {};
                } else {
                    s = l[q] = n;
                }
            }
        }
        return r[p][o];
    }
    var c = null;
    for (var f = 0, d = k.length; f <= d - 1; f++) {
        var a = k[f];
        if (f == d - 1) {
            if (a.indexOf("]") == -1) {
                e[a] = m;
            } else {
                var b = a.split("[");
                var j = b[0], h = parseInt(b[1]);
                g(e, j, h, "");
                e[j][h] = m;
            }
            break;
        }
        if (a.indexOf("]") == -1) {
            c = e[a];
            if (f <= d - 2 && c == null) {
                e[a] = c = {};
            }
            e = c;
        } else {
            var b = a.split("[");
            var j = b[0], h = parseInt(b[1]);
            e = g(e, j, h);
        }
    }
    return m;
};


kitui.__wrap = document.createElement("div");
kitui.createElements = function(b) {
    kitui.removeChilds(kitui.__wrap);
    var a = b.indexOf("<tr") == 0;
    if (a) {
        b = "<table>" + b + "</table>";
    }
    kitui.__wrap.innerHTML = b;
    return a ? kitui.__wrap.firstChild.rows : kitui.__wrap.childNodes;
};

kitui.create = function(a) {
    if (!a) {
        return null;
    }
    if (kitui.get(a.id) === a) {
        return a;
    }
    var b = this.getClass(a.type);
    if (!b) {
        return null;
    }
    var c = new b();
    c.set(a);
    return c;
};

kitui.MouseButton = {
	    Left: 0,
	    Middle: 1,
	    Right: 2
	};

kitui.after = function(c, a) {
    if (typeof a == "string") {
        if (a.charAt(0) == "#") {
            a = kitui.byId(a);
        } else {
            var b = document.createElement("div");
            b.innerHTML = a;
            a = b.firstChild;
        }
    }
    if (!a || !c) {
        return;
    }
    c.nextSibling ? c.parentNode.insertBefore(a, c.nextSibling) : c.parentNode.appendChild(a);
    return a;
};

kitui.before = function(c, a) {
    if (typeof a == "string") {
        if (a.charAt(0) == "#") {
            a = kitui.byId(a);
        } else {
            var b = document.createElement("div");
            b.innerHTML = a;
            a = b.firstChild;
        }
    }
    if (!a || !c) {
        return;
    }
    c.parentNode.insertBefore(a, c);
    return a;
};

kitui.sortTypes = {
	    string: function(a) {
	        return String(a).toUpperCase();
	    },
	    date: function(a) {
	        if (!a) {
	            return 0;
	        }
	        if (kitui.isDate(a)) {
	            return a.getTime();
	        }
	        return kitui.parseDate(String(a));
	    },
	    "float": function(a) {
	        var b = parseFloat(String(a).replace(/,/g, ""));
	        return isNaN(b) ? 0 : b;
	    },
	    "int": function(a) {
	        var b = parseInt(String(a).replace(/,/g, ""), 10);
	        return isNaN(b) ? 0 : b;
	    }
	};

kitui._Resizer = function(a) {
    this.owner = a;
    kitui.on(this.owner.el, "mousedown", this.__OnMouseDown, this);
};

kitui._Resizer.prototype = {
    __OnMouseDown: function(c) {
        var a = kitui.hasClass(c.target, "kitui-resizer-trigger");
        if (a && this.owner.allowResize) {
            var b = this._getResizeDrag();
            b.start(c);
        }
    },
    _getResizeDrag: function() {
        if (!this._resizeDragger) {
            this._resizeDragger = new kitui.Drag({
                capture: true,
                onStart: kitui.createDelegate(this._OnDragStart, this),
                onMove: kitui.createDelegate(this._OnDragMove, this),
                onStop: kitui.createDelegate(this._OnDragStop, this)
            });
        }
        return this._resizeDragger;
    },
    _OnDragStart: function(a) {
        this.proxy = kitui.append(document.body, '<div class="kitui-resizer-proxy"></div>');
        this.proxy.style.cursor = "se-resize";
        this.elBox = kitui.getBox(this.owner.el);
        kitui.setBox(this.proxy, this.elBox);
    },
    _OnDragMove: function(e) {
        var b = this.owner;
        var d = e.now[0] - e.init[0];
        var f = e.now[1] - e.init[1];
        var a = this.elBox.width + d;
        var c = this.elBox.height + f;
        if (a < b.minWidth) {
            a = b.minWidth;
        }
        if (c < b.minHeight) {
            c = b.minHeight;
        }
        if (a > b.maxWidth) {
            a = b.maxWidth;
        }
        if (c > b.maxHeight) {
            c = b.maxHeight;
        }
        kitui.setSize(this.proxy, a, c);
    },
    _OnDragStop: function(a, c) {
        if (!this.proxy) {
            return;
        }
        var b = kitui.getBox(this.proxy);
        jQuery(this.proxy).remove();
        this.proxy = null;
        this.elBox = null;
        if (c) {
            this.owner.setWidth(b.width);
            this.owner.setHeight(b.height);
            this.owner.fire("resize");
        }
    }
};


kitui.copyTo(kitui, {
    treeToArray: function(a, n, c, k, j) {
        if (!n) {
            n = "children";
        }
        var m = [];
        for (var g = 0, f = a.length; g < f; g++) {
            var d = a[g];
            m[m.length] = d;
            if (k) {
                d[k] = j;
            }
            var o = d[n];
            if (o && o.length > 0) {
                var b = d[c];
                var h = this.treeToArray(o, n, c, k, b);
                m.addRange(h);
            }
        }
        return m;
    },
    arrayToTree: function(j, n, d, m) {
        if (!n) {
            n = "children";
        }
        d = d || "_id";
        m = m || "_pid";
        var a = [];
        var g = {};
        for (var k = 0, h = j.length; k < h; k++) {
            var f = j[k];
            if (!f) {
                continue;
            }
            var c = f[d];
            if (c !== null && c !== undefined) {
                g[c] = f;
            }
            delete f[n];
        }
        for (var k = 0, h = j.length; k < h; k++) {
            var f = j[k];
            var b = g[f[m]];
            if (!b) {
                a.push(f);
                continue;
            }
            if (!b[n]) {
                b[n] = [];
            }
            b[n].push(f);
        }
        return a;
    }
});

kitui.treeToList = kitui.treeToArray;

kitui.listToTree = kitui.arrayToTree;

kitui._ParseString = function(e, c, b) {
    for (var d = 0, a = b.length; d < a; d++) {
        var g = b[d];
        var f = kitui.getAttr(e, g);
        if (f) {
            c[g] = f;
        }
    }
};

kitui._ParseBool = function(e, c, b) {
    for (var d = 0, a = b.length; d < a; d++) {
        var g = b[d];
        var f = kitui.getAttr(e, g);
        if (f) {
            c[g] = f == "true" ? true : false;
        }
    }
};

kitui._ParseInt = function(e, t, i) {
    for (var n = 0, s = i.length; n < s; n++) {
        var o = i[n], r = parseInt(kitui.getAttr(e, o));
        if (!isNaN(r)) {
            t[o] = r;
        }
    }
};
kitui._ParseColumns = function(el) {

    var columns = [];
    var cs = kitui.getChildNodes(el);
    for (var i = 0, l = cs.length; i < l; i++) {
        var node = cs[i];
        var jq = jQuery(node);
        var column = {};
        var editor = null, filter = null;
        var subCs = kitui.getChildNodes(node);
        if (subCs) {
            for (var ii = 0, li = subCs.length; ii < li; ii++) {
                var subNode = subCs[ii];
                var property = jQuery(subNode).attr("property");
                
                if (!property) {
                    continue;
                }
                property = property.toLowerCase();
                if (property == "columns") {
                    column.columns = kitui._ParseColumns(subNode);
                    jQuery(subNode).remove();
                }
                if (property == "editor" || property == "filter") {
                    var className = subNode.className;
                    var classes = className.split(" ");
                    for (var i3 = 0, l3 = classes.length; i3 < l3; i3++) {
                        var cls = classes[i3];
                        var clazz = kitui.getClassByUICls(cls);
                        if (clazz) {
                            var ui = new clazz();
                            if (property == "filter") {
                                filter = ui.getAttrs(subNode);
                                filter.type = ui.type;
                            } else {
                                editor = ui.getAttrs(subNode);
                                editor.type = ui.type;
                            }
                            break;
                        }
                    }
                    jQuery(subNode).remove();
                }
            }
        }
        column.header = node.innerHTML;
        
        var attrs = {};
		var s = jQuery(node).attr('data-options');
		if (s) {
			if (s.substring(0, 1) != '{') {
				s = '{' + s + '}';
			}
			attrs = (new Function('return ' + s))();
		}
		//alert(s)
		kitui.copyTo(column, attrs);
		kitui._ParseString(node, column, ["id"]);
        //kitui._ParseString(node, column, [ "name", "header", "field", "editor", "filter", "renderer", "width", "type", "renderer", "headerAlign", "align", "headerCls", "cellCls", "headerStyle", "cellStyle", "displayField", "dateFormat", "listFormat", "mapFormat", "trueValue", "falseValue", "dataType", "vtype", "currencyUnit", "summaryType", "summaryRenderer", "groupSummaryType", "groupSummaryRenderer", "defaultValue", "defaultText", "decimalPlaces", "data-options" ]);
        //kitui._ParseBool(node, column, [ "visible", "readOnly", "allowSort", "allowResize", "allowMove", "allowDrag", "autoShowPopup", "unique", "autoEscape" ]);
        if (editor) {
            column.editor = editor;
        }
        if (filter) {
            column.filter = filter;
        }
        if (column.dataType) {
            column.dataType = column.dataType.toLowerCase();
        }
        if (column.defaultValue === "true") {
            column.defaultValue = true;
        }
        if (column.defaultValue === "false") {
            column.defaultValue = false;
        }
        columns.push(column); 
//        var options = column["data-options"];
//
//        if (options) {
//            options = eval("(" + options + ")");
//            if (options) {
//                kitui.copyTo(column, options);
//            }
//        }
    }
    return columns;
};

kitui._Columns = {};

kitui._getColumn = function(b) {
    var a = kitui._Columns[b.toLowerCase()];
    if (!a) {
        return {};
    }
    return a();
};

kitui.IndexColumn = function(a) {
    return kitui.copyTo({
        width: 30,
        cellCls: "",
        align: "center",
        draggable: false,
        allowDrag: true,
        init: function(b) {
            b.on("addrow", this.__OnIndexChanged, this);
            b.on("removerow", this.__OnIndexChanged, this);
            b.on("moverow", this.__OnIndexChanged, this);
            if (b.isTree) {
                b.on("loadnode", this.__OnIndexChanged, this);
                this._gridUID = b.uid;
                this._rowIdField = "_id";
            }
        },
        getNumberId: function(b) {
            return this._gridUID + "$number$" + b[this._rowIdField];
        },
        createNumber: function(b, c) {
            if (kitui.isNull(b.pageIndex)) {
                return c + 1;
            } else {
                return b.pageIndex * b.pageSize + c + 1;
            }
        },
        renderer: function(d) {
            var b = d.sender;
            if (this.draggable) {
                if (!d.cellStyle) {
                    d.cellStyle = "";
                }
                d.cellStyle += ";cursor:move;";
            }
            var c = '<div id="' + this.getNumberId(d.record) + '">';
            if (kitui.isNull(b.pageIndex)) {
                c += d.rowIndex + 1;
            } else {
                c += b.pageIndex * b.pageSize + d.rowIndex + 1;
            }
            c += "</div>";
            return c;
        },
        __OnIndexChanged: function(j) {
            var h = j.sender;
            var f = h.toArray();
            for (var g = 0, c = f.length; g < c; g++) {
                var b = f[g];
                var k = this.getNumberId(b);
                var d = document.getElementById(k);
                if (d) {
                    d.innerHTML = this.createNumber(h, g);
                }
            }
        }
    }, a);
};

kitui._Columns.indexcolumn = kitui.IndexColumn;

kitui.CheckColumn = function(a) {
    return kitui.copyTo({
        width: 30,
        cellCls: "kitui-checkcolumn",
        headerCls: "kitui-checkcolumn",
        _multiRowSelect: true,
        header: function(c) {
            var d = this.uid + "checkall";
            var b = '<input type="checkbox" id="' + d + '" />';
            if (this.multiSelect == false) {
                b = "";
            }
            return b;
        },
        getCheckId: function(b) {
            return this._gridUID + "$checkcolumn$" + b[this._rowIdField];
        },
        init: function(b) {
            b.on("selectionchanged", this.__OnSelectionChanged, this);
            b.on("HeaderCellClick", this.__OnHeaderCellClick, this);
        },
        renderer: function(f) {
            var g = this.getCheckId(f.record);
            var d = f.sender.isSelected ? f.sender.isSelected(f.record) : false;
            var c = "checkbox";
            var b = f.sender;
            if (b.getMultiSelect() == false) {
                c = "radio";
            }
            return '<input type="' + c + '" id="' + g + '" ' + (d ? "checked" : "") + ' hidefocus style="outline:none;" onclick="return false"/>';
        },
        __OnHeaderCellClick: function(d) {
            var c = d.sender;
            if (d.column != this) {
                return;
            }
            var f = c.uid + "checkall";
            var b = document.getElementById(f);
            if (b) {
                if (c.getMultiSelect()) {
                    if (b.checked) {
                        c.selectAll();
                    } else {
                        c.deselectAll();
                    }
                } else {
                    c.deselectAll();
                    if (b.checked) {
                        c.select(0);
                    }
                }
                c.fire("checkall");
            }
        },
        __OnSelectionChanged: function(j) {
            var b = j.sender;
            var d = b.toArray();
            for (var g = 0, f = d.length; g < f; g++) {
                var h = d[g];
                var m = b.isSelected(h);
                var c = b.uid + "$checkcolumn$" + h[b._rowIdField];
                var n = document.getElementById(c);
                if (n) {
                    n.checked = m;
                }
            }
            var k = this;
            if (!this._timer) {
                this._timer = setTimeout(function() {
                    k._doCheckState(b);
                    k._timer = null;
                }, 10);
            }
        },
        _doCheckState: function(c) {
            var e = c.uid + "checkall";
            var b = document.getElementById(e);
            if (b && c._getSelectAllCheckState) {
                var d = c._getSelectAllCheckState();
                if (d == "has") {
                    b.indeterminate = true;
                    b.checked = true;
                } else {
                    b.indeterminate = false;
                    b.checked = d;
                }
            }
        }
    }, a);
};

kitui._Columns.checkcolumn = kitui.CheckColumn;

kitui.ExpandColumn = function(a) {
    return kitui.copyTo({
        width: 30,
        headerAlign: "center",
        align: "center",
        draggable: false,
        cellStyle: "padding:0",
        cellCls: "kitui-grid-expandCell",
        renderer: function(b) {
            return '<a class="kitui-grid-ecIcon" href="javascript:#" onclick="return false"></a>';
        },
        init: function(b) {
            b.on("cellclick", this.__OnCellClick, this);
        },
        __OnCellClick: function(d) {
            var c = d.sender;
            if (d.column == this && c.isShowRowDetail) {
                if (kitui.findParent(d.htmlEvent.target, "kitui-grid-ecIcon")) {
                    var b = c.isShowRowDetail(d.record);
                    if (c.autoHideRowDetail) {
                        c.hideAllRowDetail();
                    }
                    if (b) {
                        c.hideRowDetail(d.record);
                    } else {
                        c.showRowDetail(d.record);
                    }
                }
            }
        }
    }, a);
};

kitui._Columns.expandcolumn = kitui.ExpandColumn;

kitui.CheckBoxColumn = function(a) {
    return kitui.copyTo({
        _type: "checkboxcolumn",
        header: "#",
        headerAlign: "center",
        cellCls: "kitui-checkcolumn",
        trueValue: true,
        falseValue: false,
        readOnly: false,
        getCheckId: function(b) {
            return this._gridUID + "$checkbox$" + b[this._rowIdField];
        },
        getCheckBoxEl: function(b) {
            return document.getElementById(this.getCheckId(b));
        },
        renderer: function(f) {
            var g = this.getCheckId(f.record);
            var b = kitui._getMap(f.field, f.record);
            var d = b == this.trueValue ? true : false;
            var c = "checkbox";
            return '<input type="' + c + '" id="' + g + '" ' + (d ? "checked" : "") + ' hidefocus style="outline:none;" onclick="return false;"/>';
        },
        init: function(e) {
            this.grid = e;
            function b(i) {
                if (e.isReadOnly() || this.readOnly) {
                    return;
                }
                i.value = kitui._getMap(i.field, i.record);
                e.fire("cellbeginedit", i);
                if (i.cancel !== true) {
                    var g = kitui._getMap(i.column.field, i.record);
                    var h = g == this.trueValue ? this.falseValue : this.trueValue;
                    if (e._OnCellCommitEdit) {
                        e._OnCellCommitEdit(i.record, i.column, h);
                    }
                }
            }
            function d(h) {
                if (h.column == this) {
                    var i = this.getCheckId(h.record);
                    var g = h.htmlEvent.target;
                    if (g.id == i) {
                        if (e.allowCellEdit) {
                            h.cancel = false;
                            b.call(this, h);
                        } else {
                            if (e.isEditingRow && e.isEditingRow(h.record)) {
                                setTimeout(function() {
                                    g.checked = !g.checked;
                                }, 1);
                            }
                        }
                    }
                }
            }
            e.on("cellclick", d, this);
            kitui.on(this.grid.el, "keydown", function(h) {
                if (h.keyCode == 32 && e.allowCellEdit) {
                    var i = e.getCurrentCell();
                    if (!i) {
                        return;
                    }
                    var g = {
                        record: i[0],
                        column: i[1]
                    };
                    b.call(this, g);
                    h.preventDefault();
                }
            }, this);
            var c = parseInt(this.trueValue), f = parseInt(this.falseValue);
            if (!isNaN(c)) {
                this.trueValue = c;
            }
            if (!isNaN(f)) {
                this.falseValue = f;
            }
        }
    }, a);
};

kitui._Columns.checkboxcolumn = kitui.CheckBoxColumn;

kitui.ComboBoxColumn = function(e) {
    return kitui.copyTo({
        renderer: listColumnRenderer
    }, e);
};

kitui._Columns.comboboxcolumn = kitui.ComboBoxColumn;

kitui.TreeSelectColumn = function(e) {
    return kitui.copyTo({
        renderer: listColumnRenderer
    }, e);
};

kitui._Columns.treeselectcolumn = kitui.TreeSelectColumn;


function listColumnRenderer(e) {
    var t = e.column, i = !kitui.isNull(e.value) ? String(e.value) : "", n = i.split(","), s = "id", o = "text", r = {}, l = t.editor, a = t.__editor;
    if (l) {
        if (!a && ("combobox" == l.type || "treeselect" == l.type)) {
            if (kitui.isControl(l)) {
                a = l;
            } else {
                l = kitui.clone(l);
                a = kitui.create(l);
            }
            e.column.__editor = a;
        }
        s = a.getValueField();
        o = a.getTextField();
        var h = a.getData();
        r = t._valueMaps;
        if (!r || h !== t._data) {
            var u = a.getList ? a.getList() : h;
            r = {};
            for (var d = 0, c = u.length; d < c; d++) {
                var f = u[d];
                r[f[s]] = f;
            }
            t._valueMaps = r;
            t._data = h;
        }
    }
    var m = [];
    for (d = 0, c = n.length; d < c; d++) {
        var p = n[d], f = r[p];
        if (f) {
            var g = f[o];
            if (null === g || void 0 === g) {
                g = "";
            }
            m.push(g);
        }
    }
    if (0 == m.length && false === t.valueFromSelect) {
        return i;
    }
    return m.join(",");
}



kitui.Drag = function(a) {
    kitui.copyTo(this, a);
};

kitui.Drag.prototype = {
    onStart: kitui.emptyFn,
    onMove: kitui.emptyFn,
    onStop: kitui.emptyFn,
    capture: false,
    fps: 20,
    event: null,
    delay: 80,
    start: function(b) {
        b.preventDefault();
        if (b) {
            this.event = b;
        }
        this.now = this.init = [ this.event.pageX, this.event.pageY ];
        var a = document;
        kitui.on(a, "mousemove", this.move, this);
        kitui.on(a, "mouseup", this.stop, this);
        kitui.on(a, "contextmenu", this.contextmenu, this);
        if (this.context) {
            kitui.on(this.context, "contextmenu", this.contextmenu, this);
        }
        this.trigger = b.target;
        kitui.selectable(this.trigger, false);
        kitui.selectable(a.body, false);
        if (this.capture) {
            if (isIE) {
                this.trigger.setCapture(true);
            } else {
                if (document.captureEvents) {
                    document.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP | Event.MOUSEDOWN);
                }
            }
        }
        this.started = false;
        this.startTime = new Date();
    },
    contextmenu: function(a) {
        if (this.context) {
            kitui.un(this.context, "contextmenu", this.contextmenu, this);
        }
        kitui.un(document, "contextmenu", this.contextmenu, this);
        a.preventDefault();
        a.stopPropagation();
    },
    move: function(b) {
        if (this.delay) {
            if (new Date() - this.startTime < this.delay) {
                return;
            }
        }
        if (!this.started) {
            this.started = true;
            this.onStart(this);
        }
        var a = this;
        if (!this.timer) {
            this.timer = setTimeout(function() {
                a.now = [ b.pageX, b.pageY ];
                a.event = b;
                a.onMove(a);
                a.timer = null;
            }, 5);
        }
    },
    stop: function(c) {
        this.now = [ c.pageX, c.pageY ];
        this.event = c;
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        var b = document;
        kitui.selectable(this.trigger, true);
        kitui.selectable(b.body, true);
        if (isIE) {
            this.trigger.setCapture(false);
            this.trigger.releaseCapture();
        }
        var d = kitui.MouseButton.Right != c.button;
        if (d == false) {
            c.preventDefault();
        }
        kitui.un(b, "mousemove", this.move, this);
        kitui.un(b, "mouseup", this.stop, this);
        var a = this;
        setTimeout(function() {
            kitui.un(document, "contextmenu", a.contextmenu, a);
            if (a.context) {
                kitui.un(a.context, "contextmenu", a.contextmenu, a);
            }
        }, 1);
        if (this.started) {
            this.onStop(this, d);
        }
    }
};


kitui_onload = function(a) {
    kitui.layout(null, false);
    kitui.on(window, "resize", kitui_onresize);
};

kitui.on(window, "load", kitui_onload);

kitui.__LastWindowWidth = document.documentElement.clientWidth;

kitui.__LastWindowHeight = document.documentElement.clientHeight;

kitui.doWindowResizeTimer = null;

kitui.allowLayout = true;

kitui_onresize = function(c) {
    if (kitui.doWindowResizeTimer) {
        clearTimeout(kitui.doWindowResizeTimer);
    }
    kitui.WindowVisible = kitui.isWindowDisplay();
    if (kitui.WindowVisible == false || kitui.allowLayout == false) {
        return;
    }
    if (typeof Ext != "undefined") {
        kitui.doWindowResizeTimer = setTimeout(function() {
            var f = document.documentElement.clientWidth;
            var d = document.documentElement.clientHeight;
            if (kitui.__LastWindowWidth == f && kitui.__LastWindowHeight == d) {} else {
                kitui.__LastWindowWidth = f;
                kitui.__LastWindowHeight = d;
                kitui.layout(null, false);
            }
            kitui.doWindowResizeTimer = null;
        }, 300);
    } else {
        var a = 100;
        try {
            if (parent && parent != window && parent.kitui) {
                a = 0;
            }
        } catch (b) {}
        kitui.doWindowResizeTimer = setTimeout(function() {
            var f = document.documentElement.clientWidth;
            var d = document.documentElement.clientHeight;
            if (kitui.__LastWindowWidth == f && kitui.__LastWindowHeight == d) {} else {
                kitui.__LastWindowWidth = f;
                kitui.__LastWindowHeight = d;
                kitui.layout(null, false);
            }
            kitui.doWindowResizeTimer = null;
        }, a);
    }
};
kitui.Keyboard = {
    Left: 37,
    Top: 38,
    Right: 39,
    Bottom: 40,
    PageUp: 33,
    PageDown: 34,
    End: 35,
    Home: 36,
    Enter: 13,
    ESC: 27,
    Space: 32,
    Tab: 9,
    Del: 46,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123
};
kitui.formatNum = function(num,cent,isThousand) {
	isThousand = 1
    num = num.toString().replace(/\$|\,/g,'');

    // 检查传入数值为数值类型
     if(isNaN(num))
      num = "0";

    // 获取符号(正/负数)
    sign = (num == (num = Math.abs(num)));

    num = Math.floor(num*Math.pow(10,cent)+0.50000000001); // 把指定的小数位先转换成整数.多余的小数位四舍五入
    cents = num%Math.pow(10,cent);       // 求出小数位数值
    num = Math.floor(num/Math.pow(10,cent)).toString();  // 求出整数位数值
    cents = cents.toString();        // 把小数位转换成字符串,以便求小数位长度

    // 补足小数位到指定的位数
    while(cents.length<cent)
     cents = "0" + cents;

    if(isThousand) {
     // 对整数部分进行千分位格式化.
     for (var i = 0; i < Math.floor((num.length-(1+i))/3); i++)
      num = num.substring(0,num.length-(4*i+3))+','+ num.substring(num.length-(4*i+3));
    }

    if (cent > 0)
     return (((sign)?'':'-') + num + '.' + cents);
    else
     return (((sign)?'':'-') + num);
   };

kitui.replaceComma = function(totalfee) {
	totalfee = totalfee || "";
	totalfee = totalfee + "";
	if(totalfee=="")return 0;
	var tlong = totalfee.length;

	var i = 0;
	var j = 0;
	var k = 0;
	if (tlong > 0) {
		for (i = 0; i < totalfee.length; i++) {
			if (totalfee.charAt(i) == ",") {
				j++;
			}
		}
		for (k = 0; k < j; k++) {
			totalfee = totalfee.replace(",", "");
		}
	} else {
		totalfee = 0.00;
	}
	return totalfee;
};
kitui.operateMoney = function(n1,n2,symbol,fix){
   var l_n1 = (n1+"" == "")? "0.00":kitui.replaceComma(n1);
   var l_n2 = (n2+"" == "")? "0.00":kitui.replaceComma(n2);
   var l_n = "0.00";
   if(fix==0)
   		fix = 0;
   else{
		fix = fix || 2;   	
   }
   switch(symbol)
   {
	   case "+":
		   l_n=(parseFloat(l_n1)+parseFloat(l_n2)).toFixed(fix);
		   break;
	   case "-":
		   l_n=(parseFloat(l_n1)-parseFloat(l_n2)).toFixed(fix);
		   break;
	   case "*":
		   l_n=(parseFloat(l_n1)*parseFloat(l_n2)).toFixed(fix);
		   break;
	   case "/":
           l_n=(parseFloat(l_n1)/parseFloat(l_n2)).toFixed(fix);
	       break;
	   case "%":
           l_n=(parseFloat(l_n1)%parseFloat(l_n2)).toFixed(fix);
   }
   return kitui.formatNum(l_n);
}
kitui.prepend = function(c, a) {
    if (typeof a == "string") {
        if (a.charAt(0) == "#") {
            a = kitui.byId(a);
        } else {
            var b = document.createElement("div");
            b.innerHTML = a;
            a = b.firstChild;
        }
    }
    return jQuery(c).prepend(a)[0].firstChild;
};

kitui.after = function(e, t) {
    if ("string" == typeof t) {
        if ("#" == t.charAt(0)) {
            t = kitui.byId(t);
        } else {
            var i = document.createElement("div");
            i.innerHTML = t;
            t = i.firstChild;
        }
    }
    if (!t || !e) {
        return;
    }
    e.nextSibling ? e.parentNode.insertBefore(t, e.nextSibling) : e.parentNode.appendChild(t);
    return t;
};

kitui.before = function(e, t) {
    if ("string" == typeof t) {
        if ("#" == t.charAt(0)) {
            t = kitui.byId(t);
        } else {
            var i = document.createElement("div");
            i.innerHTML = t;
            t = i.firstChild;
        }
    }
    if (!t || !e) {
        return;
    }
    e.parentNode.insertBefore(t, e);
    return t;
};

kitui.getAndCreate = function(a) {
    if (!a) {
        return null;
    }
    if (typeof a == "string") {
        return kitui.components[a];
    }
    if (typeof a == "object") {
        if (kitui.isControl(a)) {
            return a;
        } else {
            if (kitui.isElement(a)) {
                return kitui.uids[a.uid];
            } else {
                return kitui.create(a);
            }
        }
    }
    return null;
};

kitui.create = function(e) {
	
    if (!e) {
        return null;
    }
    if (kitui.get(e.id) === e) {
        return e;
    }
    var t = this.getClass(e.type);
    
    if (!t) {
        return null;
    }
   
    var i = new t();
    i.set(e);
  
    return i;
};

!function(Q) {
    var P = Q.kitui;
    if (!P) {
        P = Q.kitui = {};
    }
    var R = P.cultures = {}, $ = "en";
    P.cultures[$] = {
        name: $,
        numberFormat: {
            number: {
                pattern: [ "n", "-n" ],
                decimals: 2,
                decimalsSeparator: ".",
                groupSeparator: ",",
                groupSize: [ 3 ]
            },
            percent: {
                pattern: [ "n %", "-n %" ],
                decimals: 2,
                decimalsSeparator: ".",
                groupSeparator: ",",
                groupSize: [ 3 ],
                symbol: "%"
            },
            currency: {
                pattern: [ "$n", "($n)" ],
                decimals: 2,
                decimalsSeparator: ".",
                groupSeparator: ",",
                groupSize: [ 3 ],
                symbol: "$"
            }
        }
    };
    function M(e) {
        return P.cultures[e];
    }
    function C(e) {
        if (e && e.name) {
            return e;
        }
        return M(e) || P.cultures.current;
    }
    P.getCulture = C;
    P.culture = function(e) {
        if (void 0 !== e) {
            P.cultures.current = M(e);
        } else {
            return R.current;
        }
    };
    P.culture($);
    var E = "number";
    function K(e, t, i) {
        e += "";
        t = typeof t == E ? t : 2;
        var n = t - e.length;
        if (n > 0) {
            var s = A(n, "0");
            return i ? e + s : s + e;
        }
        return e;
    }
    function A(e, t) {
        var i = "";
        while (e) {
            e -= 1;
            i += t;
        }
        return i;
    }
    var O = /^(n|c|p)(\d*)$/i, G = /^(e)(\d*)$/i, B = /[^0#]/g, I = /[eE][\-+]?[0-9]+/;
    function N(P, Q, J) {
        P = Math.abs(P);
        var C = -1 != Q.indexOf(","), G = Q.split("."), H = (G[0] || "").replace(B, ""), F = (G[1] || "").replace(B, ""), _ = "", D = (J.groupSize[0], 
        J.decimalsSeparator), I = J.groupSeparator, $ = H.indexOf("0");
        H = -1 == $ ? "0" : H.substr($) || "0";
        var A = F.length, M = F.substr(0, F.lastIndexOf("0") + 1).length;
        function O(number, fractionDigits) {
            with (Math) {
                return round(number * pow(10, fractionDigits)) / pow(10, fractionDigits);
            }
        }
        P = O(P, A);
        var E = String(P).split(".");
        value0 = E[0];
        value1 = E[1] || "";
        if (value0) {
            value0 = K(value0, H.length);
            if (C) {
                for (var L = 0; L < Math.floor((value0.length - (1 + L)) / 3); L++) {
                    value0 = value0.substring(0, value0.length - (4 * L + 3)) + I + value0.substring(value0.length - (4 * L + 3));
                }
            }
            _ += value0;
        }
        if (A > 0) {
            _ += D;
            _ += K(value1.substr(0, A), M, true);
        }
        return _;
    }
    function _(e, t, i, n) {
        var s = i.numberFormat.number, o = O.exec(e);
        if (null != o) {
            var r = o[1], l = o[2];
            if ("p" == r) {
                s = i.numberFormat.percent;
            } else {
                if ("c" == r) {
                    s = i.numberFormat.currency;
                }
            }
            var a = l ? parseInt(l) : s.decimals, h = s.pattern[t < 0 ? 1 : 0];
            h = h.replace("n", "#,#" + (a > 0 ? "." + A(a, "0") : ""));
            e = e.replace(r + l, h).replace("$", i.numberFormat.currency.symbol).replace("%", i.numberFormat.percent.symbol);
        } else {
            if (L(e)) {
                if (t < 0 && !n[1]) {
                    e = "-" + e;
                }
            }
        }
        return e;
    }
    function L(e) {
        return -1 != e.indexOf("0") || -1 != e.indexOf("#");
    }
    function D(e) {
        if (!e) {
            return null;
        }
        function t(e) {
            var t = e.indexOf("0"), i = e.indexOf("#");
            if (-1 == t || -1 != i && i < t) {
                t = i;
            }
            var n = e.lastIndexOf("0"), s = e.lastIndexOf("#");
            if (-1 == n || -1 != s && s > n) {
                n = s;
            }
            return [ t, n ];
        }
        var i = t(e), n = i[0], s = i[1];
        return n > -1 ? {
            begin: n,
            end: s,
            format: e.substring(n, s + 1)
        } : null;
    }
    function J(e, t, i) {
        if (typeof e != E) {
            return "";
        }
        if (!t) {
            return String(e);
        }
        var n = t.split(";");
        t = n[0];
        if (e < 0 && n.length >= 2) {
            t = n[1];
        }
        if (0 == e && n.length >= 3) {
            t = n[2];
        }
        var i = C(i), s = i.numberFormat.number, o = i.numberFormat.percent, r = i.numberFormat.currency, t = _(t, e, i, n), l = -1 != t.indexOf(r.symbol), a = -1 != t.indexOf(o.symbol), h = (-1 != t.indexOf("."), 
        L(t)), u = l ? r : a ? r : s, e = a ? 100 * e : e, d = G.exec(t);
        if (d) {
            var c = parseInt(d[2]);
            return isNaN(c) ? e.toExponential() : e.toExponential(c);
        }
        if (!h) {
            return t;
        }
        var f = "", m = D(t);
        if (null != m) {
            f = N(e, m.format, u);
            f = t.substr(0, m.begin) + f + t.substr(m.end + 1);
        } else {
            f = t;
        }
        return f;
    }
    P.parseInt = function(e, t, i) {
        var n = P.parseFloat(e, t, i);
        if (n) {
            n = 0 | n;
        }
        return n;
    };
    P.parseFloat = function(e, t, i) {
        if (!e && 0 !== e) {
            return null;
        }
        if (typeof e === E) {
            return e;
        }
        if (i && i.split(";")[2] == e) {
            return 0;
        }
        if (I.test(e)) {
            e = parseFloat(e);
            if (isNaN(e)) {
                e = null;
            }
            return e;
        }
        e = e.toString();
        t = P.getCulture(t);
        var n = t.numberFormat, s = n.number, o = n.percent, r = n.currency, l = -1 != e.indexOf(o.symbol), a = -1 != e.indexOf(r.symbol), s = a ? r : l ? o : s, h = s.pattern[1], u = s.decimals, d = s.decimalsSeparator, c = s.groupSeparator, f = e.indexOf("-") > -1;
        function m(e, t, i) {
            var n = D(t);
            if (n) {
                var s = t.substr(0, n.begin), o = t.substr(n.end + 1);
                if (0 == e.indexOf(s) && e.indexOf(o) > -1) {
                    e = e.replace(s, "").replace(o, "");
                    f = i;
                }
            }
            return e;
        }
        if (!i) {
            if (false == f) {
                i = h.replace("n", "#,#" + (u > 0 ? "." + A(u, "0") : "")).replace("$", r.symbol).replace("%", o.symbol);
                e = m(e, i, true);
            }
        } else {
            var p = i.split(";");
            if (p[1]) {
                i = p[1];
                e = m(e, i, true);
            } else {
                i = p[0];
                var g = e;
                e = m(g, i, false);
                if (g == e) {
                    e = m(g, "-" + i, true);
                }
            }
        }
        e = e.split(c).join("").replace(d, ".");
        var _ = e.match(/([0-9,.]+)/g);
        if (null == _) {
            return null;
        }
        e = _[0];
        e = parseFloat(e);
        if (isNaN(e)) {
            e = null;
        } else {
            if (f) {
                e *= -1;
            }
        }
        if (e && l) {
            e /= 100;
        }
        return e;
    };
    P.formatNumber = J;
}(this);
kitui.summaryTypes = {
    count: function(e) {
        if (!e) {
            e = [];
        }
        return e.length;
    },
    max: function(e, t) {
        if (!e) {
            e = [];
        }
        for (var i = null, n = 0, s = e.length; n < s; n++) {
            var o = e[n], r = parseFloat(kitui._getMap(t, o));
            if (null === r || void 0 === r || isNaN(r)) {
                continue;
            }
            if (null == i || i < r) {
                i = r;
            }
        }
        return i;
    },
    min: function(e, t) {
        if (!e) {
            e = [];
        }
        for (var i = null, n = 0, s = e.length; n < s; n++) {
            var o = e[n], r = parseFloat(kitui._getMap(t, o));
            if (null === r || void 0 === r || isNaN(r)) {
                continue;
            }
            if (null == i || i > r) {
                i = r;
            }
        }
        return i;
    },
    avg: function(e, t) {
        if (!e) {
            e = [];
        }
        if (0 == e.length) {
            return 0;
        }
        for (var i = 0, n = 0, s = e.length; n < s; n++) {
            var o = e[n], r = parseFloat(kitui._getMap(t, o));
            if (null === r || void 0 === r || isNaN(r)) {
                continue;
            }
            i += r;
        }
        var l = i / e.length;
        return l;
    },
    sum: function(e, t) {
        if (!e) {
            e = [];
        }
        for (var i = 0, n = 0, s = e.length; n < s; n++) {
            var o = e[n], r = parseFloat(kitui._getMap(t, o));
            if (null === r || void 0 === r || isNaN(r)) {
                continue;
            }
            i += r;
        }
        return i;
    }
};
kitui.formatCurrency = function(e, t) {
    if (null === e || void 0 === e) {}
    e = String(e).replace(/\$|\,/g, "");
    if (isNaN(e)) {
        e = "0";
    }
    sign = e == (e = Math.abs(e));
    e = Math.floor(100 * e + .50000000001);
    cents = e % 100;
    e = Math.floor(e / 100).toString();
    if (cents < 10) {
        cents = "0" + cents;
    }
    for (var i = 0; i < Math.floor((e.length - (1 + i)) / 3); i++) {
        e = e.substring(0, e.length - (4 * i + 3)) + "," + e.substring(e.length - (4 * i + 3));
    }
    t = t || "";
    return t + ((sign ? "" : "-") + e + "." + cents);
};
if ("undefined" == typeof kitui_doload) {
    kitui_doload = function() {};
}
kitui._getResult = function(e, t, i, n, s, o) {
    var r = null;
    var l = kitui.getText(e, t, function(e, t) {
        r = t;
        if (i) {
            if (i) {
                i(e, t);
            }
        }
    }, n, s);
    var a = {
        text: l,
        result: null,
        sender: {
            type: ""
        },
        options: {
            url: e,
            data: t,
            type: s
        },
        xhr: r
    };
    var h = null;
    try {
        kitui_doload(a);
        h = a.result;
        if (!h) {
            h = kitui.decode(l);
        }
    } catch (u) {
        if (true == kitui_debugger) {
            alert(e + "\njson is error");
        }
    }
    if (!kitui.isArray(h) && o) {
        h = kitui._getMap(o, h);
    }
    if (kitui.isArray(h)) {
        h = {
            data: h
        };
    }
    return h ? h.data : null;
};
kitui.getText = function(e, t, i, n, s) {
    var o = null;
    kitui.ajax({
        url: e,
        data: t,
        async: false,
        type: s ? s : "get",
        cache: false,
        dataType: "text",
        success: function(e, t, n) {
            o = e;
            if (i) {
                i(e, n);
            }
        },
        error: n
    });
    return o;
};
kitui.getDataUncase=function(obj,name){
	rtn = ""
	if(obj){
		rtn = obj[name];
		if(rtn==undefined){
			rtn = obj[name.toUpperCase()]
		}
		if(rtn==undefined){
			rtn = obj[name.toLowerCase()]
		}
	}
	return rtn
};
kitui.initPrintObj=function(){
	
	var printlicense = "";
	var ua = navigator.userAgent.toLowerCase();
	var isie = ua.indexOf('msie') > -1 ||(ua.indexOf("trident") > -1 && ua.indexOf("rv") > -1);
	var jatoolsPrinter =  isie ? document.getElementById('ojatoolsPrinter'): document.getElementById('ejatoolsPrinter');

	if(jatoolsPrinter == null){
		  $.ajax({
             type: "POST",
             url: "reportlic",
		     async:false,
             dataType: "json",
             success: function(data){
					printlicense = 	data.lic;
              }
         });

          var printstr = '<div><object id="ojatoolsPrinter" license="'+printlicense+'"  codebase="reportResource?op=emb&resource=print/finsPrinter.cab#version=8,7,5978"   classid="clsid:B43D3361-D075-4BE2-87FE-057188254255" width="0" height="0"><embed id="ejatoolsPrinter" type="application/x-vnd.jatoolsPrinter"  width="0" height="0"/></object></div>';

		  $(document.body).append(printstr);
		  jatoolsPrinter =  isie ? document.getElementById('ojatoolsPrinter'): document.getElementById('ejatoolsPrinter');
	}
	return jatoolsPrinter;
};
kitui.print = function(doc,printtype) {
	var jatoolsPrinter = kitui.initPrintObj();
    var myDoc ={ 
		documents: doc,    // 打印页面(div)们在本文档中 //["basic.htm"]
		copyrights  :    '杰创软件.富深协通定制版 www.finstone.com.cn'         // 版权声明必须
    };
	if(printtype == '1'){ 
    	jatoolsPrinter.printPreview(myDoc,true);   // 打印预览       
    }        
   	else if(printtype == '2')
   		jatoolsPrinter.print(myDoc ,true);   // 打印前弹出打印设置对话框  
   	else{
   		jatoolsPrinter.print(myDoc ,false);       // 不弹出对话框打印
   	} 
   	//jatoolsPrinter.printPreview(myDoc ,false);       // 不弹出对话框打印 
};


kitui.copyTo(kitui.Control.prototype, {
	_OnValueChanged: function() {
        this.fire("valuechanged", {
            value: this.getValue()
        });
    }
});


AppSubmit = function(){
	this.initialize();
};
var XAS = [];
AppSubmit.prototype = {
     initialize : function (action , formname ,subtarget){
        this.action = (action) ? action : null; 
        this.form = null;
        this.indexed = XAS.length;
        this.framename = "iframe_name_0"
	    this.subtarget = (subtarget) ? subtarget : null;
        this.param = [];
        this.createForm();
        this.createIframe();
        XAS[ this.indexed] = this;
    },
    createForm : function(){
    	this.form = document.createElement("form");
    	document.body.appendChild(this.form);
    	this.form.method = "POST";
    },
     createIframe : function(){
    	this.frame = document.createElement('iframe');
    	this.frame.name = this.framename;
    	this.frame.id = this.framename;
    	this.frame.style.display="none"
    	document.body.appendChild(this.frame);
    },
    setAction : function (bizAction){
       this.action = bizAction;
    },
	
	setTarget : function (target){
	   this.subtarget = target;
	},
	
    add : function (name,value){
       //this.param[this.param.length] = [name,(typeof value == "undefined") ? '' : value];
        var elm; 
        elm =  document.createElement("input");        
    	elm.type="hidden";
    	elm.name = name;
    	elm.id = name;
    	elm.value=value;
    	this.form.appendChild(elm);
    },
   
    clear : function(){
       //this.param = [];
       var inputs = this.form.getElementsByTagName("input");
       for(var i=inputs.length-1;i>=0;i--){
       		this.form.removeChild(inputs[i]);
       }
    },
	
    
  submitForm : function(){
    //this.form.action=this.action+"&"+AppAjaxUtils.toQueryString(this.param);
    $(this.form).attr('action',this.action);
    //this.form.action=this.action;
     if(this.framename)this.form.target = this.framename;
     //alert(document.all[frmName].target);
     this.form.submit();
     this.clear();
    }
};


__kitui_setControls = function(e, t, i) {
    t = t || this._contentEl;
    i = i || this;
    if (!e) {
        e = [];
    }
    if (!kitui.isArray(e)) {
        e = [ e ];
    }
    for (var n = 0, s = e.length; n < s; n++) {
        var o = e[n];
        if ("string" == typeof o) {
            if (0 == o.indexOf("#")) {
                o = kitui.byId(o);
            }
        } else {
            if (kitui.isElement(o)) {
                ;
            } else {
                o = kitui.getAndCreate(o);
                o = o.el;
            }
        }
        if (!o) {
            continue;
        }
        kitui.append(t, o);
    }
    kitui.parse(t);
    i.doLayout();
    return i;
};

kitui.htmlEncode = function(e) {
    if ("string" !== typeof e) {
        return e;
    }
    var t = "";
    if (0 == e.length) {
        return "";
    }
    t = e;
    t = t.replace(/&/g, "&amp;");
    t = t.replace(/</g, "&lt;");
    t = t.replace(/>/g, "&gt;");
    t = t.replace(/ /g, "&nbsp;");
    t = t.replace(/\'/g, "&#39;");
    t = t.replace(/\"/g, "&quot;");
    return t;
};

kitui.htmlDecode = function(e) {
    if ("string" !== typeof e) {
        return e;
    }
    var t = "";
    if (0 == e.length) {
        return "";
    }
    t = e.replace(/&gt;/g, "&");
    t = t.replace(/&lt;/g, "<");
    t = t.replace(/&gt;/g, ">");
    t = t.replace(/&nbsp;/g, " ");
    t = t.replace(/&#39;/g, "'");
    t = t.replace(/&quot;/g, '"');
    return t;
};
///<jscompress sourcefile="parser.js" />
(function($) {
	
	kitui._doParse = function(e) {
	    if (!e) {
	        return;
	    }
	    var t = e.nodeName.toLowerCase();
	    //alert(t+":"+e.outerHTML+":"+$(e)[0].tagName+"!!")
		if (!t) {
			if(e.outerHTML.toLowerCase().trim().indexOf("<input")!=0)
	        	return;
	    }
	    var i = String(e.className);
	    if (i) {
	        var n = kitui.get(e);
	        if (!n) {
	            for (var s = i.split(" "), o = 0, r = s.length; o < r; o++) {
	                var l = s[o], a = kitui.getClassByUICls(l);
	                if (a) {
	                	kitui.removeClass(e, l);
	                    var h = new a();
	                    kitui.applyTo.call(h, e);
	                    e = h.el;
	                    break;
	                }
	            }
	        }
	    }
	    if ("select" == t ||  kitui.hasClass(e, "kitui-textbox") || kitui.hasClass(e, "kitui-password")) {
	        return;
	    }
	    var u = kitui.getChildNodes(e, true);
	    for (o = 0, r = u.length; o < r; o++) {
	        var d = u[o];
	        if (1 == d.nodeType) {
	            if (d.parentNode == e) {
	            	kitui._doParse(d);
	            }
	        }
	    }
	};
	
	kitui._firstParse = true;
	
	kitui.parse = function(e, t) {
	    if (kitui._firstParse) {
	    	kitui._firstParse = false;
	    }
	    if ("string" == typeof e) {
	        var a = e;
	        e = kitui.byId(a);
	        if (!e) {
	            e = document.body;
	        }
	    }
	    if (e && !kitui.isElement(e)) {
	        e = e.el;
	    }
	    if (!e) {
	        e = document.body;
	    }
	    kitui._doParse(e);
	};
})(jQuery);

$(function(){
	if(typeof kitui_parseMode != "undefined"){
	   if(kitui_parseMode == "" || kitui_parseMode == "auto"){
	      kitui.parse();
	   }
	}else{
	   kitui.parse();
	}
}) 
///<jscompress sourcefile="DataStore.js" />
// 数据对象
	kitui.DataStore = function(opt,param) {
		this.data = null;
		this.controls = {};
		this.url  = "data";
		this.param = param;
		this._loadtControl = false;
		this.showMask = true;
		this.options ={
			pagepath    : "",
			dataset : "",
			action  : "",
			lazy        : true,  
		    async       : true,
			cache       : false
		}
			
		kitui.copyTo(this.options,opt);
	
		this.init();

	};

	kitui.DataStore.prototype = {

		init:function(){

			this.options.lazy = kitui.toBoolean(this.options.lazy);
			this.options.async = kitui.toBoolean(this.options.async);
			this.options.cache = kitui.toBoolean(this.options.cache);

			if(!this.options.lazy)
				this.load();
		},
		reload : function(){
			this.load();
		},
		setShowMask : function(e){
			this.showMask=e;
		},
		setControl : function(control){
			this.controls[control.id] = control;
		},
		load:function(param,callback,controls){
			this._loadtControl = true;
			this._load(param,callback,controls);
		},
		query:function(param,callback){
			this._loadtControl = false;
			this._load(param,callback);
		},	
		update:function(param,callback){
			this._loadtControl = false;
			this._load(param,callback);
		},		
		_load:function(param,callback,controls){

			if(param) this.param = param;
			
			var self = this;
			var json = "{}"
			if(this.param){
				json = kitui.encode(this.param);
			}
			var path = '';
			try{
				path = pagePath;
			}catch(e){}
			
			$.ajax({
                url: this.url +"?path="+this.options.pagepath+"&dataset="+this.options.dataset+"&action="+this.options.action + "&menuId=" + getMenuIdFromDocumentUrl() + "&userCode=" + getUserCodeFromDocumentUrl() + "&year="+getYearFromDocumentUrl(),
                data: {parameter:json,pagepath:path},
                type: "post",
				async:this.options.async,
				beforeSend:function(xhr){
					if(self.showMask){
				        var a = a || {};
				        a.html="加载中..."
				        a.el = document.body;
				        if (!a.cls) {
				            a.cls = "kitui-mask-loading";
				        }
				        kitui.mask(a);					
					}	    	
	  			},
                success: function (data) {
					if(data == "timeout"){  
           				 window.location = "login";  
           				 return;
       				}      	
					if(self._loadtControl){
						if(!controls){
							for(var p in self.controls){
								self.controls[p]._loadDataSetCallback(data);
							}
						}else{
							var len = controls.length;
							for(var i = 0; i < len ; i++ ){
								if(self.controls[controls[i].id]){
									self.controls[controls[i].id]._loadDataSetCallback(data);
								}
							}							
						}
					}
					self._loadtControl = false;
					try{
						if(callback){
							callback(data);
						}
						if(self.options.cache)
							this.data = data;
					}catch(e){
						alert("数据加载回调函数异常！"+kitui.encode(e));
					}
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert("服务端异常，请刷新页面！"+errorThrown);
                },
				complete:function(xhr){
                	var sessionstatus = xhr.getResponseHeader("sessionstatus"); 
        			if(sessionstatus == "timeout"){  
           				 window.location = "login";  
           				 return;
       				}  
       				if(self.showMask){
                		kitui.unmask(document.body);
                	}
                }                
            });
		}
	};

///<jscompress sourcefile="jquery.listcontrol.js" />
(function($) {
		kitui.ListControl = function() {
	    this.data = [];
	    this._selecteds = [];
	    kitui.ListControl.superclass.constructor.call(this);
		this.doUpdate();
	};
	
	kitui.extend(kitui.ListControl, kitui.Control, {
	    defaultValue: "",
	    value: "",
	    valueField: "id",
	    textField: "text",
	    dataField: "",
	    delimiter: ",",
	    loadDataset:null,
	    data: null,
	    loadParams: {},
	    staticParams: {},
	    autoLoad:true,
	    url: "",
	    _itemCls: "kitui-list-item",
	    _itemHoverCls: "kitui-list-item-hover",
	    _itemSelectedCls: "kitui-list-item-selected",
	    set: function(d) {
	        if (typeof d == "string") {
	            return this;
	        }
	        var c = d.value;
	        delete d.value;
	        var a = d.url;
	        delete d.url;
	        var b = d.data;
	        delete d.data;
	        var dictClass = d.dictClass;
	        delete d.dictClass;	        
	        kitui.ListControl.superclass.set.call(this, d);
	        if (!kitui.isNull(b)) {
	            this.setData(b);
	        }
	        if (!kitui.isNull(a)) {
	            this.setUrl(a);
	        }
	        if (!kitui.isNull(c)) {
	            this.setValue(c);
	        }
			if (!kitui.isNull(dictClass)) {
	            this.setDictClass(dictClass);
	        }	        
	        return this;
	    },	    
	    uiCls: "kitui-list",
	    _create: function() {},
	    _initEvents: function() {
	        kitui._BindEvents(function() {
	            kitui_onOne(this.el, "click", this.__OnClick, this);
	            kitui_onOne(this.el, "dblclick", this.__OnDblClick, this);
	            kitui_onOne(this.el, "mousedown", this.__OnMouseDown, this);
	            kitui_onOne(this.el, "mouseup", this.__OnMouseUp, this);
	            kitui_onOne(this.el, "mousemove", this.__OnMouseMove, this);
	            kitui_onOne(this.el, "mouseover", this.__OnMouseOver, this);
	            kitui_onOne(this.el, "mouseout", this.__OnMouseOut, this);
	            kitui_onOne(this.el, "keydown", this.__OnKeyDown, this);
	            kitui_onOne(this.el, "keyup", this.__OnKeyUp, this);
	            kitui_onOne(this.el, "contextmenu", this.__OnContextMenu, this);
	        }, this);
	    },
	    destroy: function(a) {
	        if (this.el) {
	            this.el.onclick = null;
	            this.el.ondblclick = null;
	            this.el.onmousedown = null;
	            this.el.onmouseup = null;
	            this.el.onmousemove = null;
	            this.el.onmouseover = null;
	            this.el.onmouseout = null;
	            this.el.onkeydown = null;
	            this.el.onkeyup = null;
	            this.el.oncontextmenu = null;
	        }
	        kitui.ListControl.superclass.destroy.call(this, a);
	    },
	    name: "",
	    setName: function(a) {
	        this.name = a;
	        if (this._valueEl) {
	            kitui.setAttr(this._valueEl, "name", this.name);
	        }
	    },
	    getItemByEvent: function(c) {
	        var b = kitui.findParent(c.target, this._itemCls);
	        if (b) {
	            var a = parseInt(kitui.getAttr(b, "index"));
	            return this.data[a];
	        }
	    },
	    addItemCls: function(c, a) {
	        var b = this.getItemEl(c);
	        if (b) {
	            kitui.addClass(b, a);
	        }
	    },
	    removeItemCls: function(c, a) {
	        var b = this.getItemEl(c);
	        if (b) {
	            kitui.removeClass(b, a);
	        }
	    },
	    getItemEl: function(b) {
	        b = this.getItem(b);
	        var a = this.data.indexOf(b);
	        var c = this._createItemId(a);
	        return document.getElementById(c);
	    },
	    _focusItem: function(b, a) {
	        b = this.getItem(b);
	        if (!b) {
	            return;
	        }
	        var c = this.getItemEl(b);
	        if (a && c) {
	            this.scrollIntoView(b);
	        }
	        if (this._focusedItem == b) {
	            if (c) {
	                kitui.addClass(c, this._itemHoverCls);
	            }
	            return;
	        }
	        this._blurItem();
	        this._focusedItem = b;
	        if (c) {
	            kitui.addClass(c, this._itemHoverCls);
	        }
	    },
	    _blurItem: function() {
	        if (!this._focusedItem) {
	            return;
	        }
	        var a = this.getItemEl(this._focusedItem);
	        if (a) {
	            kitui.removeClass(a, this._itemHoverCls);
	        }
	        this._focusedItem = null;
	    },
	    getFocusedItem: function() {
	        return this._focusedItem;
	    },
	    getFocusedIndex: function() {
	        return this.data.indexOf(this._focusedItem);
	    },
	    _scrollViewEl: null,
	    scrollIntoView: function(c) {
	        try {
	            var b = this.getItemEl(c);
	            var a = this._scrollViewEl || this.el;
	            kitui.scrollIntoView(b, a, false);
	        } catch (d) {}
	    },
	    getItem: function(a) {
	        if (typeof a == "object") {
	            return a;
	        }
	        if (typeof a == "number") {
	            return this.data[a];
	        }
	        return this.findItems(a)[0];
	    },
	    getCount: function() {
	        return this.data.length;
	    },
	    indexOf: function(a) {
	        return this.data.indexOf(a);
	    },
	    getAt: function(a) {
	        return this.data[a];
	    },
	    updateItem: function(b, a) {
	        b = this.getItem(b);
	        if (!b) {
	            return;
	        }
	        kitui.copyTo(b, a);
	        this.doUpdate();
	    },
	    load: function(a,fun) {
	        if (typeof a == "string") {
	            this.setUrl(a);
	        } else {
	            //this.setData(a);
		    	this.loadDataset.setControl(this);
		    	
		    	this.loadParams = kitui.copyIf(a||{},this.staticParams);

		    	//var params = a||{};
				var sf = this;
				this.loadDataset.options.async=false
				this.loadDataset._load(this.loadParams,function(data){
					  sf._loadDataSetCallback(data);
					  var ss = sf.scope || sf
					  //if(!sf.scope) return;
					  ss.data = data.data;
					  if(fun){
					  	try{
					  		fun.call(ss,data);
					  	}catch(e)
					  	{
					  		alert(e);
					  	}
					 }
				})	            
	        }
	    },
	    loadData: function(a) {
	        this.setData(a);
	    },
	    setData: function(data) {
	        if (typeof data == "string") {
	            data = eval(data);
	        }
	        if (!kitui.isArray(data)) {
	            data = [];
	        }
	        this.data = data;
	        this.doUpdate();
	        if (this.value != "") {
	            this.deselectAll();
	            var records = this.findItems(this.value);
	            this.selects(records);
	        }
	    },
	    getData: function() {
	        return this.data.clone();
	    },
	    setUrl: function(a) {
	        this.url = a;
	        this._doLoad({});
	    },
	    getUrl: function() {
	        return this.url;
	    },
		setDictClass : function(a){
			var o = kitui.decode(a);
			if(o.code=="0"){
				this.setData(kitui.decode(o.data));
	            this.fire("load");
				var sf = this;
	            setTimeout(function() {
	                sf.doLayout();
	            }, 100);
			}else{
				alert("错误："+o.msg);
			}
			
		},
	    setLoadParams:function(loadparams){
 			if(loadparams){
 				if(typeof loadparams=="string")
 					this.loadParams=kitui.decode(loadparams);
 				else
 					this.loadParams=loadparams
 					
 				this.staticParams = this.loadParams;
 			}
	    },
	    setAutoLoad:function(autoload){
	    	this.autoLoad=kitui.toBoolean(autoload);
	    },			
	    setLoadDataset : function(ds,opt){
	    	this.loadDataset = eval(ds);
	    	if(this.autoLoad){
	    		this.load(this.loadParams);
	    	}
	    },
		_loadDataSetCallback : function(data){
					this.fire("preload", data);
			        this.setData(data.data);
	                this.fire("load");
					var sf = this;
	                setTimeout(function() {
	                    sf.doLayout();
	                }, 100);
		},
	    ajaxData: null,
	    _doLoad: function(params) {
	        try {
	            var url = eval(this.url);
	            if (url != undefined) {
	                this.url = url;
	            }
	        } catch (e) {}
	        var url = this.url;
	        var ajaxMethod = "post";
	        if (url) {
	            if (url.indexOf(".txt") != -1 || url.indexOf(".json") != -1) {
	                ajaxMethod = "get";
	            }
	        }
	        var obj = kitui._evalAjaxData(this.ajaxData, this);
	        kitui.copyTo(params, obj);
	        var e = {
	            url: this.url,
	            async: false,
	            type: this.ajaxType ? this.ajaxType : ajaxMethod,
	            data: params,
	            params: params,
	            cache: false,
	            cancel: false
	        };
	        this.fire("beforeload", e);
	        if (e.data != e.params && e.params != params) {
	            e.data = e.params;
	        }
	        if (e.cancel == true) {
	            return;
	        }
	        var sf = this;
	        var url = e.url;
	        kitui.copyTo(e, {
	            success: function(text) {
	                var data = null;
	                try {
	                    data = kitui.decode(text);
	                } catch (ex) {
	                    data = [];
	                    if (kitui_debugger == true) {
	                        alert(url + "\njson is error.");
	                    }
	                }
	                if (sf.dataField) {
	                    data = kitui._getMap(sf.dataField, data);
	                }
	                if (!data) {
	                    data = [];
	                }
	                var ex = {
	                    data: data.data,
	                    cancel: false
	                };
	                sf.fire("preload", ex);
	                if (ex.cancel == true) {
	                    return;
	                }
	                sf.setData(ex.data);
	                sf.fire("load");
	                setTimeout(function() {
	                    sf.doLayout();
	                }, 100);
	            },
	            error: function(jqXHR, textStatus, errorThrown) {
	                var e = {
	                    xmlHttp: jqXHR,
	                    errorMsg: jqXHR.responseText,
	                    errorCode: jqXHR.status
	                };
	                if (kitui_debugger == true) {
	                    alert(url + "\n" + e.errorCode + "\n" + e.errorMsg);
	                }
	                sf.fire("loaderror", e);
	            }
	        });
	        this._ajaxer = kitui.ajax(e);
	    },
	    setValue: function(b) {
	        if (kitui.isNull(b)) {
	            b = "";
	        }
	        if (this.value !== b) {
	            this.deselectAll();
	            this.value = b;
	            if (this._valueEl) {
	                this._valueEl.value = b;
	            }
	            var a = this.findItems(this.value);
	            this.selects(a);
	        }
	    },
	    getValue: function() {
	        return this.value;
	    },
	    getFormValue: function() {
	        return this.value;
	    },
	    setValueField: function(a) {
	        this.valueField = a;
	    },
	    getValueField: function() {
	        return this.valueField;
	    },
	    setTextField: function(a) {
	        this.textField = a;
	    },
	    getTextField: function() {
	        return this.textField;
	    },
	    getItemValue: function(a) {
	        return String(kitui._getMap(this.valueField, a));
	    },
	    getItemText: function(b) {
	        var a = kitui._getMap(this.textField, b);
	        return kitui.isNull(a) ? "" : String(a);
	    },
	    getValueAndText: function(e) {
	        if (kitui.isNull(e)) {
	            e = [];
	        }
	        if (!kitui.isArray(e)) {
	            e = this.findItems(e);
	        }

            var t = this.getData();
            kitui.sort(e, function(e, i) {
                var n = t.indexOf(e), s = t.indexOf(i);
                if (n > s) {
                    return 1;
                }
                if (n < s) {
                    return -1;
                }
                return 0;
            });

	        for (var i = [], n = [], s = 0, o = e.length; s < o; s++) {
	            var r = e[s];
	            if (r) {
	                i.push(this.getItemValue(r));
	                n.push(this.getItemText(r));
	            }
	        }
	        return [ i.join(this.delimiter), n.join(this.delimiter) ];
	    },	    
	    findItems: function(m) {
	        if (kitui.isNull(m) || m === "") {
	            return [];
	        }
	        var n = String(m).split(this.delimiter);
	        var f = this.data;
	        var h = {};
	        for (var d = 0, c = f.length; d < c; d++) {
	            var g = f[d];
	            var o = g[this.valueField];
	            h[o] = g;
	        }
	        var a = [];
	        for (var e = 0, b = n.length; e < b; e++) {
	            var o = n[e];
	            var g = h[o];
	            if (g) {
	                a.push(g);
	            }
	        }
	        return a;
	    },
	    removeAll: function() {
	        var a = this.getData();
	        this.removeItems(a);
	    },
	    addItems: function(a, b) {
	        if (!kitui.isArray(a)) {
	            return;
	        }
	        if (kitui.isNull(b)) {
	            b = this.data.length;
	        }
	        this.data.insertRange(b, a);
	        this.doUpdate();
	    },
	    addItem: function(b, a) {
	        if (!b) {
	            return;
	        }
	        if (this.data.indexOf(b) != -1) {
	            return;
	        }
	        if (kitui.isNull(a)) {
	            a = this.data.length;
	        }
	        this.data.insert(a, b);
	        this.doUpdate();
	    },
	    removeItems: function(a) {
	        if (!kitui.isArray(a)) {
	            return;
	        }
	        this.data.removeRange(a);
	        this._checkSelecteds();
	        this.doUpdate();
	    },
	    removeItem: function(b) {
	        var a = this.data.indexOf(b);
	        if (a != -1) {
	            this.data.removeAt(a);
	            this._checkSelecteds();
	            this.doUpdate();
	        }
	    },
	    moveItem: function(b, a) {
	        if (!b || !kitui.isNumber(a)) {
	            return;
	        }
	        if (a < 0) {
	            a = 0;
	        }
	        if (a > this.data.length) {
	            a = this.data.length;
	        }
	        this.data.remove(b);
	        this.data.insert(a, b);
	        this.doUpdate();
	    },
	    _selected: null,
	    _selecteds: [],
	    multiSelect: false,
	    _checkSelecteds: function() {
	        for (var b = this._selecteds.length - 1; b >= 0; b--) {
	            var a = this._selecteds[b];
	            if (this.data.indexOf(a) == -1) {
	                this._selecteds.removeAt(b);
	            }
	        }
	        var c = this.getValueAndText(this._selecteds);
	        this.value = c[0];
	        if (this._valueEl) {
	            this._valueEl.value = this.value;
	        }
	    },
	    setMultiSelect: function(a) {
	        this.multiSelect = a;
	    },
	    getMultiSelect: function() {
	        return this.multiSelect;
	    },
	    isSelected: function(a) {
	        if (!a) {
	            return false;
	        }
	        return this._selecteds.indexOf(a) != -1;
	    },
	    getSelecteds: function() {
	        var a = this._selecteds.clone();
	        var b = this;
	        kitui.sort(a, function(d, c) {
	            var f = b.indexOf(d);
	            var e = b.indexOf(c);
	            if (f > e) {
	                return 1;
	            }
	            if (f < e) {
	                return -1;
	            }
	            return 0;
	        });
	        return a;
	    },
	    setSelected: function(a) {
	        if (a) {
	            this._selected = a;
	            this.select(a);
	        }
	    },
	    getSelected: function() {
	        return this._selected;
	    },
	    select: function(a) {
	        a = this.getItem(a);
	        if (!a) {
	            return;
	        }
	        if (this.isSelected(a)) {
	            return;
	        }
	        this.selects([ a ]);
	    },
	    deselect: function(a) {
	        a = this.getItem(a);
	        if (!a) {
	            return;
	        }
	        if (!this.isSelected(a)) {
	            return;
	        }
	        this.deselects([ a ]);
	    },
	    selectAll: function() {
	        var a = this.data.clone();
	        this.selects(a);
	    },
	    deselectAll: function() {
	        this.deselects(this._selecteds);
	    },
	    clearSelect: function() {
	        this.deselectAll();
	    },
	    selects: function(c) {
	        if (!c || c.length == 0) {
	            return;
	        }
	        c = c.clone();
	        for (var d = 0, b = c.length; d < b; d++) {
	            var a = c[d];
	            if (!this.isSelected(a)) {
	                this._selecteds.push(a);
	            }
	        }
	        var e = this;
	        setTimeout(function() {
	            e._doSelects();
	        }, 1);
	    },
	    deselects: function(b) {
	        if (!b || b.length == 0) {
	            return;
	        }
	        b = b.clone();
	        for (var c = b.length - 1; c >= 0; c--) {
	            var a = b[c];
	            if (this.isSelected(a)) {
	                this._selecteds.remove(a);
	            }
	        }
	        var d = this;
	        setTimeout(function() {
	            d._doSelects();
	        }, 1);
	    },
	    _doSelects: function() {
	        var g = this.getValueAndText(this._selecteds);
	        this.value = g[0];
	        if (this._valueEl) {
	            this._valueEl.value = this.value;
	        }
	        for (var e = 0, c = this.data.length; e < c; e++) {
	            var b = this.data[e];
	            var a = this.isSelected(b);
	            if (a) {
	                this.addItemCls(b, this._itemSelectedCls);
	            } else {
	                this.removeItemCls(b, this._itemSelectedCls);
	            }
	            var d = this.data.indexOf(b);
	            var h = this._createCheckId(d);
	            var f = document.getElementById(h);
	            if(!f){
		            if(kitui_useCrossFrame){
		            	f = kitui._getTopWindow().document.getElementById(h);
		            }
	            }
	            if (f) {
	                f.checked = !!a;
	            }
	        }
	    },
	    _OnSelectionChanged: function(b, a) {
	        var c = this.getValueAndText(this._selecteds);
	        this.value = c[0];
	        if (this._valueEl) {
	            this._valueEl.value = this.value;
	        }
	        var d = {
	            selecteds: this.getSelecteds(),
	            selected: this.getSelected(),
	            value: this.getValue()
	        };
	        this.fire("SelectionChanged", d);
	    },
	    _createCheckId: function(a) {
	        return this.uid + "$ck$" + a;
	    },
	    _createItemId: function(a) {
	        return this.uid + "$" + a;
	    },
	    __OnClick: function(a) {
	        this._fireEvent(a, "Click");
	    },
	    __OnDblClick: function(a) {
	        this._fireEvent(a, "Dblclick");
	    },
	    __OnMouseDown: function(a) {
	        this._fireEvent(a, "MouseDown");
	    },
	    __OnMouseUp: function(a) {
	        this._fireEvent(a, "MouseUp");
	    },
	    __OnMouseMove: function(a) {
	        this._fireEvent(a, "MouseMove");
	    },
	    __OnMouseOver: function(a) {
	        this._fireEvent(a, "MouseOver");
	    },
	    __OnMouseOut: function(a) {
	        this._fireEvent(a, "MouseOut");
	    },
	    __OnKeyDown: function(a) {
	        this._fireEvent(a, "KeyDown");
	    },
	    __OnKeyUp: function(a) {
	        this._fireEvent(a, "KeyUp");
	    },
	    __OnContextMenu: function(a) {
	        this._fireEvent(a, "ContextMenu");
	    },
	    _fireEvent: function(f, a) {
	        if (!this.enabled) {
	            return;
	        }
	        var d = this.getItemByEvent(f);
	        if (!d) {
	            return;
	        }
	        var c = this["_OnItem" + a];
	        if (c) {
	            c.call(this, d, f);
	        } else {
	            var b = {
	                item: d,
	                htmlEvent: f
	            };
	            this.fire("item" + a, b);
	        }
	    },
	    _OnItemClick: function(a, c) {
	        if (this.isReadOnly() || this.enabled == false || a.enabled === false) {
	            c.preventDefault();
	            return;
	        }
	        var b = this.getValue();
	        if (this.multiSelect) {
	            if (this.isSelected(a)) {
	                this.deselect(a);
	                if (this._selected == a) {
	                    this._selected = null;
	                }
	            } else {
	                this.select(a);
	                this._selected = a;
	            }
	            this._OnSelectionChanged();
	        } else {
	            if (!this.isSelected(a)) {
	                this.deselectAll();
	                this.select(a);
	                this._selected = a;
	                this._OnSelectionChanged();
	            }
	        }
	        if (b != this.getValue()) {
	            this._OnValueChanged();
	        }
	        var c = {
	            item: a,
	            htmlEvent: c
	        };
	        this.fire("itemclick", c);
	    },
	    _OnValueChanged: function() {
	        this.fire("valuechanged", {
	            value: this.getValue()
	        });
	    },	    
	    _blurOnOut: true,
	    _OnItemMouseOut: function(a, b) {
	        kitui.repaint(this.el);
	        if (!this.enabled) {
	            return;
	        }
	        if (this._blurOnOut) {
	            this._blurItem();
	        }
	        var b = {
	            item: a,
	            htmlEvent: b
	        };
	        this.fire("itemmouseout", b);
	    },
	    _OnItemMouseMove: function(a, b) {
	        kitui.repaint(this.el);
	        if (!this.enabled || a.enabled === false) {
	            return;
	        }
	        this._focusItem(a);
	        var b = {
	            item: a,
	            htmlEvent: b
	        };
	        this.fire("itemmousemove", b);
	    },
	    onItemClick: function(b, a) {
	        this.on("itemclick", b, a);
	    },
	    onItemMouseDown: function(b, a) {
	        this.on("itemmousedown", b, a);
	    },
	    onBeforeLoad: function(b, a) {
	        this.on("beforeload", b, a);
	    },
	    onLoad: function(b, a) {
	        this.on("load", b, a);
	    },
	    onLoadError: function(b, a) {
	        this.on("loaderror", b, a);
	    },
	    onPreLoad: function(b, a) {
	        this.on("preload", b, a);
	    },
	    getAttrs: function(b) {
	        var h = kitui.ListControl.superclass.getAttrs.call(this, b);
	        var j = h.valueField || this.valueField;
	        var c = h.textField || this.textField;
	        if (b.nodeName.toLowerCase() == "select") {
	            var e = [];
	            for (var f = 0, d = b.length; f < d; f++) {
	                var g = b.options[f];
	                var a = {};
	                a[c] = g.text;
	                a[j] = g.value;
	                e.push(a);
	            }
	            if (e.length > 0) {
	                h.data = e;
	            }
	        }
	        return h;
	    }
	});
	
})(jQuery);
///<jscompress sourcefile="jquery.textbox.js" />
(function($) {
	kitui.TextBox = function() {
		kitui.TextBox.superclass.constructor.apply(this, arguments);
	};

	kitui.extend(kitui.TextBox, kitui.Control, {
		formField: true,
		name : "",
		allowInput : true,
		minWidth : 10,
		selectOnFocus:false,
		minHeight : 15,
		maxLength: 5e3,
		emptyText : "",
		text : "",
		value : "",
		defaultValue : "",
		height : 21,
		uiCls : "kitui-textbox",
		_InputType : "text",
		_inputEventsInited : false,
		_labelFieldCls : "kitui-labelfield",
		labelField : false,
		label : "",
		labelStyle : "",
		_doLabelLayout:true,
		digital:2,
		itype:"",

	    setName: function(name) {
	        if (this.name != name) {
	            this.name = name;
	            if (this._valueEl) {
	                this._valueEl.setAttribute("name", this.name);
	            }
	        }
	    },		
		getAttrs : function(el) {
			var t = kitui.TextBox.superclass.getAttrs.call(this, el);
			return t;
		},
		getInputText : function() {
			return this._textEl.value;
		},
	    selectText: function() {
	    
	        var e = this;
	        function t() {
	            try {
	                e._textEl.select();
	            } catch (t) {}
	        }
	        setTimeout(function(){t()},1)
	        //t();
	    },		
		blur : function() {
			try {
				this._textEl.blur();
			} catch (e) {
			}
		},
		focus : function() {
			try {
				this._textEl.focus();
			} catch (e) {
			}
		},
		setEnabled : function(tag) {
	        if (this.enabled != tag) {
	            this.enabled = tag;
	            this.doUpdate();
	        }
		},
		setReadOnly : function(tag) {
	        if (this.readOnly != tag) {
	            this.readOnly = tag;
	            this.doUpdate();
	        }
		},
	    setAllowInput: function(tag) {
	        if (this.allowInput != tag) {
	            this.allowInput = tag;
	            this.doUpdate();
	        }
	    },    
	    getAllowInput: function() {
	        return this.allowInput;
	    },		
	    doUpdate: function() {
	        if (this.enabled) {
	            this.removeCls(this._disabledCls);
	        } else {
	            this.addCls(this._disabledCls);
	        }
	        if (this.isReadOnly() || this.allowInput == false) {
	            this._textEl.readOnly = true;
	            this._textEl.style.backgroundColor="#CCCCCC"
	            kitui.addClass(this.el, "kitui-textbox-readOnly");
	        } else {
	            this._textEl.readOnly = false;
	            this._textEl.style.backgroundColor="#FFFFFF"
	            kitui.removeClass(this.el, "kitui-textbox-readOnly");
	        }
//	        if (this.required) {
//	        	this.addCls(this._requiredCls);
//	        } else {
//	            this.removeCls(this._requiredCls);
//	        }
	        if (this.enabled) {
	            this._textEl.disabled = false;
	        } else {
	            this._textEl.disabled = true;
	        }
	    },		
		getValue : function() {
			if(this.itype=="currency"){
				if(this._textEl.value)
					return kitui.replaceComma(this._textEl.value);
				else
					return "";
			}else{
				return this._textEl.value;
			}
		},
		setValue : function(value) {
			if(this.itype){
				if(this.itype=="currency")
					this._textEl.value =(kitui.formatNum(value,this.digital))
				else if(this.itype=="number"){
					if(!isNaN(parseFloat(value)))
						this._textEl.value =(parseFloat(value));
					else
						this._textEl.value =(0);
				}else if(this.itype=="normal"){
					this._textEl.value = value;
				}
			}else{			
				this._textEl.value = value;
			}
		},
	    setHeight: function(h) {
	        if (parseInt(h) == h) {
	            h += "px";
	        }
	        this.height = h;
	        if (this._InputType == "textarea") {
	            this.el.style.height = h;
	            this.doLayout();
	        }
	    },
	    inputStyle: "",
	    setInputStyle: function(style) {
	        this.inputStyle = style;
	        kitui.setStyle(this._textEl, style);
	    },
	    setItype:function(itype){
	    	this.itype=itype;
	    	if(this.itype&&this.itype!="normal"){
	    		kitui.setStyle(this._textEl, "text-align:right;padding-right:2px;")
	    	}
	    },    
	    _placeholdered: false,
	    _doEmpty: function() {
	        this._textEl.placeholder = this.emptyText;
	        if (this.emptyText) {
	            kitui._placeholder(this._textEl);
	        }
	    },
	    setEmptyText: function(text) {
	        if (this.emptyText != text) {
	            this.emptyText = text;
	            this._doEmpty();
	        }
	    },		
		destroy : function(el) {
			if (this.el) {
				this.el.onmousedown = null;
			}
			kitui.TextBox.superclass.destroy.call(this, el);
		},
		doLayout : function() {
		},
		_initEvents : function() {
			kitui._BindEvents(function(){
				kitui_onOne(this._textEl, "click", this.__OnClick, this);
				kitui_onOne(this._textEl, "change", this.__OnInputTextChanged, this);
				kitui_onOne(this._textEl, "focus", this.__OnFocus, this);
			},this);
		},
		_initInputEvents: function() {
	        if (this._inputEventsInited) {
	            return;
	        }
	        this._inputEventsInited = true;
	        kitui.on(this._textEl, "blur", this.__OnBlur, this);
	        kitui.on(this._textEl, "keydown", this.__OnInputKeyDown, this);
	        kitui.on(this._textEl, "keyup", this.__OnInputKeyUp, this);
	        kitui.on(this._textEl, "keypress", this.__OnInputKeyPress, this);	        
		},
		__OnFocus : function(event){
			this._initInputEvents();
			if(this.itype=="currency"){
					if(this._textEl.value)
						this._textEl.value =(kitui.replaceComma(this._textEl.value));
			}
			if (this.selectOnFocus) {
				this._textEl.select()	
			}
			this.fire("focuse", {
           		 htmlEvent: event
        	});			
		},
		__OnBlur : function(event){
			if(this.itype){
				if(this.itype=="currency"){
					//this._textEl.value = kitui.formatNumber(parseFloat(this.getValue()),"#0.0");
					if(isNaN(parseFloat(this.getValue()))){
						this._textEl.value = "";
					}else{
						this._textEl.value =(kitui.formatNum(this.getValue(),this.digital));
					}
					
				}
				else if(this.itype=="number"){
					if(!isNaN(parseFloat(this.getValue())))
						this._textEl.value =(parseFloat(this.getValue()));
					else
						this._textEl.value ="";
				}
			}	
	        this.fire("blur", {
	            htmlEvent: event
	        });
		},
		__OnClick : function(event){
//			if(this.itype=="currency"){
//				this.setValue(kitui.replaceComma(this._textEl.value))
//			}		
			this.fire("click", {
           		 htmlEvent: event
        	});
		},	
	    __OnInputKeyDown: function(event) {
	        var opt = {
	            htmlEvent: event
	        };
	        this.fire("keydown", opt);
	        if (event.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
	            return false;
	        }
	        if (event.keyCode == 13 || event.keyCode == 9) {
	        	this.__OnInputTextChanged(null);
	            if (event.keyCode == 13) {
	                var b = this;
	                b.fire("enter", opt);
	            }
	        }
	        if (event.keyCode == 27) {
	            event.preventDefault();
	        }
	    },
	    __OnInputKeyUp: function(event) {
	        this.fire("keyup", {
	            htmlEvent: event
	        });
	    },
	    __OnInputKeyPress: function(event) {
	        this.fire("keypress", {
	            htmlEvent: event
	        });
	    },
	    __OnMaxLengthKeyUp: function(e) {
	        if (this._textEl.value.length >= this.maxLength) {
	            this.__OnPaste(e);
	            e.preventDefault();
	        }
	    },
	    __OnPaste: function() {
	        var e = this;
	        setTimeout(function() {
	            var t = e._textEl.value;
	            if (t.length > e.maxLength) {
	                e._textEl.value = t.substring(0, e.maxLength);
	            }
	            e.__OnInputTextChanged();
	        }, 0);
	    },
	    __OnInputTextChanged: function(e, t) {
	        var i = this.value;
	        this._textEl.value =(this._textEl.value);
	        if (i !== this.getValue() || true === t) {
	            this._OnValueChanged();
	        }
	    },	    
	    setMaxLength: function(e) {
	        this.maxLength = e;
	        kitui.setAttr(this._textEl, "maxLength", e);
	        if ("textarea" == this._InputType && kitui.isIE) {
	            kitui.on(this._textEl, "keyup", this.__OnMaxLengthKeyUp, this);
	            kitui.on(this._textEl, "keypress", this.__OnMaxLengthKeyUp, this);
	            kitui.on(this._textEl, "paste", this.__OnPaste, this);
	        }
	    },
		_create : function() {
			var s = '<input  type="' + this._InputType
					+ '" class="kitui-textbox-input" autocomplete="off"/>';
			if ("textarea" == this._InputType) {
				s = '<textarea  class="kitui-textbox-input" style="white-space:pre-wrap" autocomplete="off"/></textarea>';
			}
			s = '<span class="kitui-textbox-border">' + s + "</span>";
			s += '<input type="hidden"/>';
			this.el = document.createElement("span");
			this.el.className = "kitui-textbox";
			this.el.innerHTML = s;
			this._borderEl = this.el.firstChild;
			this._textEl = this._borderEl.firstChild;
			this._valueEl = this._borderEl.lastChild;
		}
	});

	kitui.regClass(kitui.TextBox, "textbox");

})(jQuery);

kitui.copyTo(kitui.TextBox.prototype, {
});
///<jscompress sourcefile="jquery.label.js" />
(function($) {
	kitui.Label = function() {
	    kitui.Label.superclass.constructor.call(this);
	};
	
	kitui.extend(kitui.Label, kitui.Control, {
	    text: "",
	    uiCls: "kitui-label",
	    _create: function() {
	        this.el = document.createElement("span");
	        this.el.className = this.uiCls;
			var s = "";
			s = '<span class="kitui-label-border">' + s + "</span>";
			s += '<input type="hidden"/>';
			this.el = document.createElement("span");
			this.el.className = "kitui-label";
			this.el.innerHTML = s;
			this._borderEl = this.el.firstChild;
			this._textEl = this._borderEl.firstChild;
			this._valueEl = this._borderEl.lastChild;
	    },
	    _initEvents: function() {
	        kitui._BindEvents(function() {
	            kitui_onOne(this.el, "click", this.__OnClick, this);
	        }, this);
	    },
	    setText:function(t){
	    	this.text = t;
	    	this._borderEl.innerHTML = this.text;
	    },
	    destroy: function(a) {
	        kitui.Button.superclass.destroy.call(this, a);
	    },
		__OnClick : function(event){
			
		}
	});
	
	kitui.regClass(kitui.Label, "label");

})(jQuery);
///<jscompress sourcefile="jquery.textarea.js" />
(function($) {

	kitui.TextArea = function() {
	    kitui.TextArea.superclass.constructor.call(this);
	};
	
	kitui.extend(kitui.TextArea, kitui.TextBox, {
	    maxLength: 1e7,
	    width: 180,
	    height: 50,
	    minHeight: 50,
	    _InputType: "textarea",
	    uiCls: "kitui-textarea",
		setItype:function(){
			this.itype = "";
		}, 
	    doLayout: function() {
	        kitui.TextArea.superclass.doLayout.call(this);
	        var a = kitui.getHeight(this.el);
	        if (kitui.isIE6) {
	            kitui.setHeight(this._borderEl, a);
	        }
	        a -= 2;
	        if (a < 0) {
	            a = 0;
	        }
	        this._textEl.style.height = a + "px";
	    },
	    __OnInputKeyDown: function(event) {
	        var opt = {
	            htmlEvent: event
	        };
	        this.fire("keydown", opt);
	        if (event.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
	            return false;
	        }
	        if (event.keyCode == 13 || event.keyCode == 9) {
	        	//this.__OnInputTextChanged(null);
	            if (event.keyCode == 13) {
	                var b = this;
	                b.fire("enter", opt);
	            }
	        }
	        if (event.keyCode == 27) {
	            event.preventDefault();
	        }
	    }	    
	});
	
	kitui.regClass(kitui.TextArea, "textarea");	
})(jQuery);
///<jscompress sourcefile="jquery.password.js" />
(function($) {
	kitui.Password = function() {
		kitui.Password.superclass.constructor.apply(this, arguments);
	};

	kitui.extend(kitui.Password, kitui.TextBox, {
		uiCls : "kitui-password",
		_InputType : "password"
	});

	kitui.copyTo(kitui.Password.prototype, {
		getValue : function() {
			return this._textEl.value;
		},
		setEmptyText : function() {
			this.emptyText = "";
		},
		setItype:function(){
			this.itype = "";
		}
	});

	kitui.regClass(kitui.Password, "password");
})(jQuery);
///<jscompress sourcefile="jquery.form.js" />
(function($) {
	kitui.Form = function(id) {
		this.el = kitui.byId(id);
		kitui.Form.superclass.constructor.apply(this);
		this.autoLoad=kitui.toBoolean(this.getAttrs(this.el).autoLoad)
		//this.autoLoad=false
		this.setLoadDataset(this.getAttrs(this.el).loadDataset);
		this.setAllLabelStyle(this.getAttrs(this.el).allLabelStyle);
	};

	kitui.extend(kitui.Form, kitui.Component, {
		el: null,
		loadDataset:null,
		autoLoad:false,
		extData:{},
		setAllLabelStyle:function(style){
			var m = this.getFieldsMap();
			for(var p in m){
				if(m[p].setLabelStyle){
					if(!m[p].labelStyle){
						m[p].setLabelStyle(style);
					}
				}
			}
		},
		checkForm: function(){
        	var fileds = this.getFields();
        	var rtn = {};
        	var msg = ""
        	rtn.code = 0;
        	for (var i = 0, len = fileds.length; i < len; i++) {
        		var control = fileds[i];
           	    var f = control["required"];
				if (!f) {
                	continue;
           		}else{
           			if(control.getValue()||control.getValue()=="0"){
           				
           			}else{
           				rtn.code = -1;
           				if(control.label)
           					msg += control.label+" 不能为空\r";
           				else
           					msg += control.name+" 不能为空\r";
           			}
           		}       		
        	}	
        	rtn.msg = msg;
        	return rtn;		
		},
	    getFields: function() {
	        if (!this.el) {
	            return [];
	        }
	        var self = this;
	        var fileds = kitui.findControls(function(control) {
	            if (!control.el || control.formField != true) {
	                return false;
	            }
	            if (kitui.isAncestor(this.el, control.el)) {
                	return true;
            	}
	            return false;
	        }, this);
	        return fileds;
	    },	getAttrs : function(el) {
			var attrs = {};
			var s = $(el).attr('data-options');
			if (s) {
				if (s.substring(0, 1) != '{') {
					s = '{' + s + '}';
				}
				attrs = (new Function('return ' + s))();
			}
			return attrs;
		},
	    getFieldsMap: function() {
	        var fileds = this.getFields();
	        var map = {};
	        for (var c = 0, len = fileds.length; c < len; c++) {
	            var control = fileds[c];
	            if (control.name) {
	                map[control.name] = control;
	            }
	        }
	        return map;
	    },	 
	    getField: function(cid) {
	        if (!this.el) {
	            return null;
	        }
	        var map = this.getFieldsMap();
	        return map[cid];
	    },	    
		getData : function(){
			var map = {};
			var methodName = "getValue";
        	var fileds = this.getFields();
        	for (var i = 0, len = fileds.length; i < len; i++) {
        		var control = fileds[i];
           	    var f = control[methodName];
				if (!f) {
                	continue;
           		}
           		map[control.name] = f.call(control);
        	}
			return map;

		},	
		load : function(param){
			//this.setLoadDataset(this.loadDataset,param)
			var p={};
	    	p.sender=this;
	    	p.type="preload";
	    	p.param=param||{};
	    	//alert(kitui.encode(param))	
	    	this.fire("preload",p);
			var sf = this;
		
			if(this.loadDataset){
				this.loadDataset._load(p.param,function(data){
					  sf._loadDataSetCallback(data);
				})				
			}
		},
	    setLoadDataset : function(ds){
	    	if(!ds) return;
	    	this.loadDataset = eval(ds);
	    	this.loadDataset.setControl(this);
	    	if(kitui.toBoolean(!this.autoLoad))
	    		return;
	    	var p={};
	    	p.sender=this;
	    	p.type="preload";
	    	p.param={}
	    	this.fire("preload",p);
			var sf = this;
			if(this.loadDataset){
				this.loadDataset._load(p.param,function(data){
					  sf._loadDataSetCallback(data);
				})				
			}
	    },
		_loadDataSetCallback : function(data){
			  this.setData(data.data[0]);    
		},
		setData : function(obj){
			if(obj){
				var map = this.getFieldsMap();
				for (var p in map) {
					var conrtol = map[p];

					if (!conrtol) {
                		continue;
       				}
		            if (conrtol.setValue) {
		                var b = obj[p];
						if(typeof b!="undefined"&&b!=null)
		                	conrtol.setValue(b);
		            }
		            if (conrtol.setText && conrtol.textName) {
		                var h = obj[conrtol.textName];
		                if(typeof h!="undefined"&&h!=null)
		                	conrtol.setText(h);
		            }		            
				}
			}
			var p={};
			p.sender=this;
			p.type="load";
			p.data=obj;
			this.fire("load",p);
		},
		clear : function(){
	        var fileds = this.getFields();
	        for (var c = 0, len = fileds.length; c < len; c++) {
	            var control = fileds[c];
	            if (!control.setValue) {
	                continue;
	            }
	            if (control.setText && control._clearText !== false) {
	                control.setText("");
	            }
	            control.setValue("");
	        }		
		},
	    setDataExt:function(obj){
	    	this.extData = obj;
	    	this.setData(obj);
	    },
	    getDataExt:function(){
	    	var formData = this.getData();
	    	retData = kitui.copyTo(this.extData,formData);
	    	return retData;
	    },
		validate : function(){
			
		},
		setAllEnabled : function(tag){
	        var fileds = this.getFields();
	        for (var c = 0, len = fileds.length; c < len; c++) {
	            var control = fileds[c];
				control.setEnabled(tag);
	        }

		},
		setAllReadOnly : function(tag){
	        var fileds = this.getFields();
	        for (var c = 0, len = fileds.length; c < len; c++) {
	            var control = fileds[c];
				control.setReadOnly(tag);
	        }	        
		}		
	});

	kitui.regClass(kitui.Form, "form");
})(jQuery);
///<jscompress sourcefile="jquery.buttonedit.js" />
(function($) {

	kitui.ButtonEdit = function() {
	    kitui.ButtonEdit.superclass.constructor.call(this);
	    var a = this.isReadOnly();
	    if (a || this.allowInput == false) {
	        this._textEl.readOnly = true;
	    }
	    if (this.enabled == false) {
	        this.addCls(this._disabledCls);
	    }
	    if (a) {
	        this.addCls(this._readOnlyCls);
	    }
	    if (this.required) {
	        this.addCls(this._requiredCls);
	    }
	};
	
	kitui.extend(kitui.ButtonEdit, kitui.Control, {
	    name: "",
	    formField: true,
	    selectOnFocus: false,
	    showClose: false,
	    emptyText: "",
	    defaultValue: "",
	    value: "",
	    text: "",
	    maxLength: 1e3,
	    minLength: 0,
	    imagePath:'',
	    //width: 220,
	    height: 21,
	    inputAsValue: false,
	    allowInput: true,
	    labelField:false,
	    label:"",
	    _labelFieldCls : "kitui-labelfield",
	    _noInputCls: "kitui-buttonedit-noInput",
	    _readOnlyCls: "kitui-buttonedit-readOnly",
	    _disabledCls: "kitui-buttonedit-disabled",
	    _emptyCls: "kitui-buttonedit-empty",
	    _focusCls: "kitui-buttonedit-focus",
	    _buttonCls: "kitui-buttonedit-button",
	    _buttonHoverCls: "kitui-buttonedit-button-hover",
	    _buttonPressedCls: "kitui-buttonedit-button-pressed",
	    _closeCls: "kitui-buttonedit-close",
	    required:false,
	    set: function(b) {
	        if (typeof b == "string") {
	            return this;
	        }
	        var a = b.value;
	        delete b.value;
	        var c = b.text;
	        delete b.text;
	        this._allowUpdate = !(b.enabled == false || b.allowInput == false || b.readOnly);
	        kitui.ButtonEdit.superclass.set.call(this, b);
	        if (this._allowUpdate === false) {
	            this._allowUpdate = true;
	            this.doUpdate();
	        }
	        if (!kitui.isNull(c)) {
	            this.setText(c);
	        }
	        if (!kitui.isNull(a)) {
	            this.setValue(a);
	        }
	        return this;
	    },
	    uiCls: "kitui-buttonedit",
	    _getButtonsHTML: function() {
	        var a = '<span class="kitui-buttonedit-close"></span>' + this._getButtonHtml();
	        return '<span class="kitui-buttonedit-buttons">' + a + "</span>";
	    },
	    setImagePath:function(src){
	    	this._buttonEl.lastChild.style.cssText = "background:url("+src+") no-repeat 50% 0px";
	    },
	    _getButtonHtml: function() {
	        var a = "onmouseover=\"kitui.addClass(this, '" + this._buttonHoverCls + "');\" onmouseout=\"kitui.removeClass(this, '" + this._buttonHoverCls + "');\"";
	        return '<span class="kitui-buttonedit-button" ' + a + '><span class="kitui-buttonedit-icon"></span></span>';
	    },
	    _create: function() {
	        this.el = document.createElement("span");
	        this.el.className = "kitui-buttonedit";
	        var a = this._getButtonsHTML();
	        this.el.innerHTML = '<span class="kitui-buttonedit-border"><input type="input" class="kitui-buttonedit-input" autocomplete="off"/>' + a + '</span><input name="' + this.name + '" type="hidden"/>';
	        this._borderEl = this.el.firstChild;
	        this._textEl = this._borderEl.firstChild;
	        this._valueEl = this.el.lastChild;
	        this._buttonsEl = this._borderEl.lastChild;
	        this._buttonEl = this._buttonsEl.lastChild;
	        this._closeEl = this._buttonEl.previousSibling;
	        this._doEmpty();
	    },
	    destroy: function(a) {
	        if (this.el) {
	            this.el.onmousedown = null;
	            this.el.onmousewheel = null;
	            this.el.onmouseover = null;
	            this.el.onmouseout = null;
	        }
	        if (this._textEl) {
	            this._textEl.onchange = null;
	            this._textEl.onfocus = null;
	            kitui.clearEvent(this._textEl);
	            this._textEl = null;
	        }
	        kitui.ButtonEdit.superclass.destroy.call(this, a);
	    },
	    _initEvents: function() {
	        kitui._BindEvents(function() {
	            kitui_onOne(this.el, "mousedown", this.__OnMouseDown, this);
	            kitui_onOne(this._textEl, "focus", this.__OnFocus, this);
	            kitui_onOne(this._textEl, "change", this.__OnInputTextChanged, this);
	            var a = this.text;
	            this.text = null;
	            this.setText(a);
	        }, this);
	    },
	    _inputEventsInited: false,
	    _initInputEvents: function() {
	        if (this._inputEventsInited) {
	            return;
	        }
	        this._inputEventsInited = true;
	        kitui.on(this.el, "click", this.__OnClick, this);
	        kitui.on(this._textEl, "blur", this.__OnBlur, this);
	        kitui.on(this._textEl, "keydown", this.__OnInputKeyDown, this);
	        kitui.on(this._textEl, "keyup", this.__OnInputKeyUp, this);
	        kitui.on(this._textEl, "keypress", this.__OnInputKeyPress, this);
	    },
	    _buttonWidth: 20,
	    _closeWidth: 20,
	    _doInputLayout: function() {
	        if (this._closeEl) {
	            this._closeEl.style.display = this.showClose ? "inline-block" : "none";
	        }
	        var a = this._buttonsEl.offsetWidth + 2;
	        this._borderEl.style.paddingRight = a + "px";
	        this.doLayout();
	    },
	    doLayout: function() {},
	    setHeight: function(a) {
	        if (parseInt(a) == a) {
	            a += "px";
	        }
	        this.height = a;
	    },
	    focus: function() {
	        try {
	            this._textEl.focus();
	            var a = this;
	            setTimeout(function() {
	                if (a._focused) {
	                    a._textEl.focus();
	                }
	            }, 10);
	        } catch (b) {}
	    },
	    blur: function() {
	        try {
	            this._textEl.blur();
	        } catch (a) {}
	    },
	    selectText: function() {
	        this._textEl.select();
	    },
	    getTextEl: function() {
	        return this._textEl;
	    },
	    setName: function(a) {
	        this.name = a;
	        if (this._valueEl) {
	            kitui.setAttr(this._valueEl, "name", this.name);
	        }
	    },
	    setText: function(b) {
	        if (b === null || b === undefined) {
	            b = "";
	        }
	        var a = this.text !== b;
	        this.text = b;
	        this._textEl.value = b;
	        this._doEmpty();
	    },
	    getText: function() {
	        var a = this._textEl.value;
	        return a;
	    },
	    setValue: function(b) {
	        if (b === null || b === undefined) {
	            b = "";
	        }
	        var a = this.value !== b;
	        this.value = b;
	        this._valueEl.value = this.getFormValue();
	    },
	    getValue: function() {
	        return this.value;
	    },
	    getFormValue: function() {
	        value = this.value;
	        if (value === null || value === undefined) {
	            value = "";
	        }
	        return String(value);
	    },
	    _doEmpty: function() {
	        this._textEl.placeholder = this.emptyText;
	        if (this.emptyText) {
	            kitui._placeholder(this._textEl);
	        }
	    },
	    setEmptyText: function(a) {
	        if (this.emptyText != a) {
	            this.emptyText = a;
	            this._doEmpty();
	        }
	    },
	    getEmptyText: function() {
	        return this.emptyText;
	    },
	    setMaxLength: function(a) {
	        a = parseInt(a);
	        if (isNaN(a)) {
	            return;
	        }
	        this.maxLength = a;
	        this._textEl.maxLength = a;
	    },
	    getMaxLength: function() {
	        return this.maxLength;
	    },
	    setMinLength: function(a) {
	        a = parseInt(a);
	        if (isNaN(a)) {
	            return;
	        }
	        this.minLength = a;
	    },
	    getMinLength: function() {
	        return this.minLength;
	    },
	    setEnabled: function(a) {
	        kitui.ButtonEdit.superclass.setEnabled.call(this, a);
	        //this._tryValidate();
	    },
	    _doReadOnly: function() {
	        var a = this.isReadOnly();
	        if (a || this.allowInput == false) {
	            this._textEl.readOnly = true;
	        } else {
	            this._textEl.readOnly = false;
	        }
	        if (a) {
	            this.addCls(this._readOnlyCls);
	        } else {
	            this.removeCls(this._readOnlyCls);
	        }
	        if (this.allowInput) {
	            this.removeCls(this._noInputCls);
	        } else {
	            this.addCls(this._noInputCls);
	        }
	        if (this.enabled) {
	            this._textEl.disabled = false;
	        } else {
	            this._textEl.disabled = true;
	        }
	    },
	    setAllowInput: function(a) {
	        this.allowInput = a;
	        this._doReadOnly();
	    },
	    getAllowInput: function() {
	        return this.allowInput;
	    },
	    setInputAsValue: function(a) {
	        this.inputAsValue = a;
	    },
	    getInputAsValue: function() {
	        return this.inputAsValue;
	    },
	    _errorIconEl: null,
	    getErrorIconEl: function() {
	        if (!this._errorIconEl) {
	            this._errorIconEl = kitui.append(this.el, '<span class="kitui-errorIcon"></span>');
	        }
	        return this._errorIconEl;
	    },
	    _RemoveErrorIcon: function() {
	        if (this._errorIconEl) {
	            var a = this._errorIconEl;
	            jQuery(a).remove();
	        }
	        this._errorIconEl = null;
	    },
	    __OnClick: function(b) {
	        if (this.isReadOnly() || this.enabled == false) {
	            return;
	        }
	        if (!kitui.isAncestor(this._borderEl, b.target)) {
	            return;
	        }
	        var a = new Date();
	        if (kitui.isAncestor(this._buttonEl, b.target)) {
	            this._OnButtonClick(b);
	        }
	        if (kitui.findParent(b.target, this._closeCls)) {
	            this.fire("closeclick", {
	                htmlEvent: b
	            });
	        }
	    },
	    __OnMouseDown: function(c) {
	        if (this.isReadOnly() || this.enabled == false) {
	            return;
	        }
	        if (!kitui.isAncestor(this._borderEl, c.target)) {
	            return;
	        }
	        if (!kitui.isAncestor(this._textEl, c.target)) {
	            this._clickTarget = c.target;
	            var b = this;
	            setTimeout(function() {
	                b.focus();
	                kitui.selectRange(b._textEl, 1e3, 1e3);
	            }, 1);
	            if (kitui.isAncestor(this._buttonEl, c.target)) {
	                var a = kitui.findParent(c.target, "kitui-buttonedit-up");
	                var d = kitui.findParent(c.target, "kitui-buttonedit-down");
	                if (a) {
	                    kitui.addClass(a, this._buttonPressedCls);
	                    this._OnButtonMouseDown(c, "up");
	                } else {
	                    if (d) {
	                        kitui.addClass(d, this._buttonPressedCls);
	                        this._OnButtonMouseDown(c, "down");
	                    } else {
	                        kitui.addClass(this._buttonEl, this._buttonPressedCls);
	                        this._OnButtonMouseDown(c);
	                    }
	                }
	                kitui.on(document, "mouseup", this.__OnDocMouseUp, this);
	            }
	        }
	    },
	    __OnDocMouseUp: function(b) {
	        this._clickTarget = null;
	        var a = this;
	        setTimeout(function() {
	            var e = a._buttonEl.getElementsByTagName("*");
	            for (var d = 0, c = e.length; d < c; d++) {
	                kitui.removeClass(e[d], a._buttonPressedCls);
	            }
	            kitui.removeClass(a._buttonEl, a._buttonPressedCls);
	            //kitui.removeClass(a.el, a._pressedCls);
	        }, 80);
	        kitui.un(document, "mouseup", this.__OnDocMouseUp, this);
	    },
	    __OnFocus: function(a) {
	        this.doUpdate();
	        this._initInputEvents();
	        if (this.isReadOnly()) {
	            return;
	        }
	        this._focused = true;
	        this.addCls(this._focusCls);
	        if (this.selectOnFocus) {
	            this.selectText();
	        }
	        this.fire("focus", {
	            htmlEvent: a
	        });
	    },
	    __fireBlur: function(c) {
	        this._focused = false;
	        var a = this;
	        function b() {
	            if (a._focused == false) {
	                a.removeCls(a._focusCls);
	            }
	        }
	        setTimeout(function() {
	            b.call(a);
	        }, 2);
	        this.fire("blur", {
	            htmlEvent: c
	        });
	    },
	    __OnBlur: function(b) {
	        var a = this;
	        setTimeout(function() {
	            a.__fireBlur(b);
	        }, 10);
	    },
	    __OnInputKeyDown: function(d) {
	        var a = {
	            htmlEvent: d
	        };
	        this.fire("keydown", a);
	        if (d.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
	            return false;
	        }
	        if (d.keyCode == 13 || d.keyCode == 9) {
	            var c = this;
	            c.__OnInputTextChanged(null);
	            if (d.keyCode == 13) {
	                var b = this;
	                b.fire("enter", a);
	            }
	        }
	        if (d.keyCode == 27) {
	            d.preventDefault();
	        }
	    },
	    __OnInputTextChanged: function() {
	        var a = this._textEl.value;
	        var b = this.getValue();
	        this.setValue(a);
	        if (b !== this.getFormValue()) {
	            this._OnValueChanged();
	        }
	    },
	    __OnInputKeyUp: function(a) {
	        this.fire("keyup", {
	            htmlEvent: a
	        });
	    },
	    __OnInputKeyPress: function(a) {
	        this.fire("keypress", {
	            htmlEvent: a
	        });
	    },
	    _OnButtonClick: function(a) {
	        var b = {
	            htmlEvent: a,
	            cancel: false
	        };
	        this.fire("beforebuttonclick", b);
	        if (b.cancel == true) {
	            return;
	        }
	        this.fire("buttonclick", b);
	    },
	    _OnButtonMouseDown: function(a, b) {
	        this.focus();
	        this.addCls(this._focusCls);
	        this.fire("buttonmousedown", {
	            htmlEvent: a,
	            spinType: b
	        });
	    },
	    onButtonClick: function(b, a) {
	        this.on("buttonclick", b, a);
	    },
	    onButtonMouseDown: function(b, a) {
	        this.on("buttonmousedown", b, a);
	    },
	    onTextChanged: function(b, a) {
	        this.on("textchanged", b, a);
	    },
	    textName: "",
	    setTextName: function(a) {
	        this.textName = a;
	        if (this._textEl) {
	            kitui.setAttr(this._textEl, "name", this.textName);
	        }
	    },
	    getTextName: function() {
	        return this.textName;
	    },
	    setSelectOnFocus: function(a) {
	        this.selectOnFocus = a;
	    },
	    getSelectOnFocus: function(a) {
	        return this.selectOnFocus;
	    },
	    setShowClose: function(a) {
	        this.showClose = a;
	        this._doInputLayout();
	    },
	    getShowClose: function(a) {
	        return this.showClose;
	    },
	    inputStyle: "",
	    setInputStyle: function(a) {
	        this.inputStyle = a;
	        kitui.setStyle(this._textEl, a);
	    },
	    getAttrs: function(b) {
	        var a = kitui.ButtonEdit.superclass.getAttrs.call(this, b);
	        //var c = jQuery(b);
	        //kitui._ParseString(b, a, [ "value", "text", "textName", "emptyText", "inputStyle", "onenter", "onkeydown", "onkeyup", "onkeypress", "onbuttonclick", "onbuttonmousedown", "ontextchanged", "onfocus", "onblur", "oncloseclick" ]);
	        //kitui._ParseBool(b, a, [ "allowInput", "inputAsValue", "selectOnFocus", "showClose" ]);
	        //kitui._ParseInt(b, a, [ "maxLength", "minLength" ]);
	        return a;
	    }
	})
	
	kitui.regClass(kitui.ButtonEdit, "buttonedit");	
})(jQuery);

kitui.copyTo(kitui.ButtonEdit.prototype, {

});
///<jscompress sourcefile="jquery.button.js" />
(function($) {
	kitui.Button = function() {
	    kitui.Button.superclass.constructor.call(this);
	};
	
	kitui.extend(kitui.Button, kitui.Control, {
	    text: "",
	    iconCls: "",
	    iconStyle: "",
	    plain: false,
	    checkOnClick: false,
	    checked: false,
	    groupName: "",
	    _plainCls: "kitui-button-plain",
	    _hoverCls: "kitui-button-hover",
	    _pressedCls: "kitui-button-pressed",
	    _checkedCls: "kitui-button-checked",
	    _disabledCls: "kitui-button-disabled",
	    enabled:true,
	    allowCls: "",
	    imagePath:"",
	    _clearBorder: false,
	    set: function(a) {
	        if (typeof a == "string") {
	            return this;
	        }
	        this._allowUpdate = a.text || a.iconStyle || a.iconCls || a.iconPosition;
	        kitui.Button.superclass.set.call(this, a);
	        if (this._allowUpdate === false) {
	            this._allowUpdate = true;
	            this.doUpdate();
	        }
	        return this;
	    },
	    uiCls: "kitui-button",
	    _create: function() {
	        this.el = document.createElement("button");
	        try{
	        	this.el.type="button";
	        }catch(e){}
	        this.el.className = "kitui-button";
	        this.el.hideFocus = false;
	        this.el.href = "javascript:void(0)";
	        this.doUpdate();
	    },
	    _initEvents: function() {
	        kitui._BindEvents(function() {
	            kitui_onOne(this.el, "mousedown", this.__OnMouseDown, this);
	            kitui_onOne(this.el, "click", this.__OnClick, this);
	        }, this);
	    },
	    destroy: function(a) {
	        if (this.el) {
	            this.el.onclick = null;
	            this.el.onmousedown = null;
	        }
	        if (this.menu) {
	            this.menu.owner = null;
	        }
	        this.menu = null;
	        kitui.Button.superclass.destroy.call(this, a);
	    },
	    doUpdate: function() {
	        if (this._allowUpdate === false) {
	            return;
	        }
	        var a = "", c = this.text;
	        if (this.iconCls && c) {
	            a = " kitui-button-icon " + this.iconCls;
	        } else {
	            if (this.iconCls && c === "") {
	                a = " kitui-button-iconOnly " + this.iconCls;
	                c = "&nbsp;";
	            } else {
	                if (c == ""||c=="null") {
	                    c = "&nbsp;";
	                }
	            }
	        }
	        var b = '<span class="kitui-button-text ' + a + '">' + c + "</span>";
	        if (this.allowCls) {
	            b = b + '<span class="kitui-button-allow ' + this.allowCls + '"></span>';
	        }
	        this.el.innerHTML = b;
	    },
	    href: "",
	    setHref: function(b) {
	        this.href = b;
	        this.el.href = b;
	        var a = this.el;
	        setTimeout(function() {
	            a.onclick = null;
	        }, 100);
	    },
	    getHref: function() {
	        return this.href;
	    },
	    target: "",
	    setTarget: function(a) {
	        this.target = a;
	        this.el.target = a;
	    },
	    getTarget: function() {
	        return this.target;
	    },
	    setText: function(a) {
	        if (this.text != a) {
	            this.text = a;
	            this.doUpdate();
	        }
	    },
	    getText: function() {
	        return this.text;
	    },
	    setIconCls: function(a) {
	    	if(this.imagePath)return;
	        this.iconCls = a;
	        this.doUpdate();
	    },
	    getIconCls: function() {
	        return this.iconCls;
	    },
	    setIconStyle: function(a) {
	        this.iconStyle = a;
	        this.doUpdate();
	    },
	    getIconStyle: function() {
	        return this.iconStyle;
	    },
	    setIconPosition: function(a) {
	        this.iconPosition = "left";
	        this.doUpdate();
	    },
	    getIconPosition: function() {
	        return this.iconPosition;
	    },
	    setPlain: function(a) {
	        this.plain = a;
	        if (a) {
	            this.addCls(this._plainCls);
	        } else {
	            this.removeCls(this._plainCls);
	        }
	    },
	    getPlain: function() {
	        return this.plain;
	    },
	    setGroupName: function(a) {
	        this.groupName = a;
	    },
	    getGroupName: function() {
	        return this.groupName;
	    },
	    setCheckOnClick: function(a) {
	        this.checkOnClick = a;
	    },
	    getCheckOnClick: function() {
	        return this.checkOnClick;
	    },
	    setChecked: function(b) {
	        var a = this.checked != b;
	        this.checked = b;
	        if (b) {
	            this.addCls(this._checkedCls);
	        } else {
	            this.removeCls(this._checkedCls);
	        }
	        if (a) {
	            this.fire("CheckedChanged");
	        }
	    },
	    getChecked: function() {
	        return this.checked;
	    },
	    doClick: function() {
	        this.__OnClick(null);
	    },
	    __OnClick: function(f) {
	        if (this.readOnly || this.enabled == false) {
	            return;
	        }
	        this.focus();
	        if (this.checkOnClick) {
	            if (this.groupName) {
	                var g = this.groupName;
	                var d = kitui.findControls(function(e) {
	                    if (e.type == "button" && e.groupName == g) {
	                        return true;
	                    }
	                });
	                if (d.length > 0) {
	                    for (var c = 0, a = d.length; c < a; c++) {
	                        var b = d[c];
	                        if (b != this) {
	                            b.setChecked(false);
	                        }
	                    }
	                    this.setChecked(true);
	                } else {
	                    this.setChecked(!this.checked);
	                }
	            } else {
	                this.setChecked(!this.checked);
	            }
	        }
	        this.fire("click", {
	            htmlEvent: f
	        });
	        return false;
	    },
	    __OnMouseDown: function(a) {
	        if (this.isReadOnly()) {
	            return;
	        }
	        this.addCls(this._pressedCls);
	        kitui.on(document, "mouseup", this.__OnDocMouseUp, this);
	    },
	    __OnDocMouseUp: function(a) {
	        this.removeCls(this._pressedCls);
	        kitui.un(document, "mouseup", this.__OnDocMouseUp, this);
	    },
	    onClick: function(b, a) {
	        this.on("click", b, a);
	    },
	    setImagePath:function(src){
	    	//this.el.childNodes[0].style.cssText="background:url("+src+") no-repeat 6px;";
	    	this.imagePath = src;
	    	var img = document.createElement("img");
	    	img.src = src;
	    	//img.style.cssText="margin-left:4px;margin-top:4px"
	    	img.className="kitui-button-image";
	    	this.el.insertBefore(img,this.el.childNodes[0])
	    },
	    setEnabled:function(a){
	    	this.enabled=a;
	    	if (a) {
	    		this.el.disabled=false;
	            this.removeCls(this._disabledCls);
	        } else {
	        	this.el.disabled=true;
	            this.addCls(this._disabledCls);
	        }
	    },    
	    getAttrs: function(b) {
	        var a = kitui.Button.superclass.getAttrs.call(this, b);
	        a.text = b.innerHTML;
	        //kitui._ParseString(b, a, [ "text", "href", "iconCls", "iconStyle", "iconPosition", "groupName", "menu", "onclick", "oncheckedchanged", "target" ]);
	        //kitui._ParseBool(b, a, [ "plain", "checkOnClick", "checked" ]);
	        return a;
	    }
	});
	
	kitui.regClass(kitui.Button, "button");

})(jQuery);
///<jscompress sourcefile="jquery.menubutton.js" />
(function($) {
kitui.MenuButton = function() {
    kitui.MenuButton.superclass.constructor.apply(this, arguments);
};

kitui.extend(kitui.MenuButton, kitui.Button, {
    uiCls: "kitui-menubutton",
    allowCls: "kitui-button-menu"
});

kitui.copyTo(kitui.MenuButton.prototype, {
    setEnabled: function(e) {
        this.enabled = e;
        if (e) {
            this.removeCls(this._disabledCls);
        } else {
            this.addCls(this._disabledCls);
        }
        jQuery(this.el).attr("allowPopup", !!e);
    },
    setMenu: function(e) {
        if (kitui.isArray(e)) {
            e = {
                type: "menu",
                items: e
            };
        }
        if ("string" == typeof e) {
            var t = kitui.byId(e);
            if (!t) {
                return;
            }
            kitui.parse(e);
            e = kitui.get(e);
        }
        if (this.menu !== e) {
            this.menu = kitui.getAndCreate(e);
            this.menu.setPopupEl(this.el);
            this.menu.setPopupCls("kitui-button-popup");
            this.menu.setShowAction("leftclick");
            this.menu.setHideAction("outerclick");
            this.menu.setXAlign("left");
            this.menu.setYAlign("below");
            this.menu.hide();
            this.menu.owner = this;
            this.menu.addCls("kitui-menu-open");
        }
    }
});

kitui.regClass(kitui.MenuButton, "menubutton");
})(jQuery);
///<jscompress sourcefile="jquery.toolbar.js" />
(function($) {
	kitui.ToolBar = function() {
	    kitui.ToolBar.superclass.constructor.call(this);
	};
	
	kitui.extend(kitui.ToolBar, kitui.Container, {
	    _clearBorder: false,
	    style: "",
	    uiCls: "kitui-toolbar",
	    _create: function() {
	        this.el = document.createElement("span");
	        this.el.className = "kitui-toolbar";
	    },
	    _initEvents: function() {},
	    doLayout: function() {
	        if (!this.canLayout()) {
	            return;
	        }
	        var b = kitui.getChildNodes(this.el, true);
	        for (var c = 0, a = b.length; c < a; c++) {
	            kitui.layout(b[c]);
	        }
	    },
	    set_bodyParent: function(a) {
	        if (!a) {
	            return;
	        }
	        this.el = a;
	        this.doLayout();
	    },
	    getAttrs: function(b) {
	        var a = {};
	        //kitui._ParseString(b, a, [ "id", "borderStyle" ]);
	        this.el = b;
	        this.el.uid = this.uid;
	        this.addCls(this.uiCls);
	        return a;
	    }
	    
	});
	
	kitui.regClass(kitui.ToolBar, "toolbar");	
})(jQuery);
///<jscompress sourcefile="jquery.checkbox.js" />
(function($) {
	kitui.CheckBox = function() {
	    kitui.CheckBox.superclass.constructor.call(this);
	};

	kitui.extend(kitui.CheckBox, kitui.Control, {
	    formField: true,
	    _clearText: false,
	    text: "",
	    checked: false,
	    defaultValue: false,
	    trueValue: true,
	    falseValue: false,
	    _disabledCls: "kitui-disabled",
	    uiCls: "kitui-checkbox",
	    _checkType: "checkbox",
	    _labelFieldCls : "kitui-labelfield",
		labelField : false,
		label : "",
		labelStyle : "",
		_doLabelLayout:true,
	    _create: function() {
	        var a = this.uid + "$check";
	        var e = '<input  type="'+this._checkType+'" class="kitui-checkbox-check"><label  onclick="return false;">' + this.text + "</label>";
	        e = '<span class="">' + e + "</span>";
	        
	       
	        this.el = document.createElement("span");
	        this.el.className = "kitui-checkbox";
	        this.el.innerHTML = e;
	        this._borderEl = this.el.firstChild;
	        this._checkEl = this._borderEl.firstChild;
	        this._labelEl = this._borderEl.lastChild;
	       
	    },
	    destroy: function(a) {
	        if (this._checkEl) {
	            this._checkEl.onmouseup = null;
	            this._checkEl.onclick = null;
	            this._checkEl = null;
	        }
	        kitui.CheckBox.superclass.destroy.call(this, a);
	    },
	    _initEvents: function() {
	        kitui._BindEvents(function() {
	            kitui.on(this.el, "click", this.__onClick, this);
	            this._checkEl.onmouseup = function() {
	                return false;
	            };
	            var a = this;
	            this._checkEl.onclick = function() {
	                if (a.isReadOnly()) {
	                    return false;
	                }
	            };
	        }, this);
	    },
	    setName: function(a) {
	        if (this.name != a) {
	            this.name = a;
	            if (this._checkEl) {
	            	
	                this._checkEl.setAttribute("name", this.name);
	            }
	        }
	    },
	    setText: function(a) {
	        if (this.text !== a) {
	            this.text = a;
	            this._labelEl.innerHTML = a;
	        }
	    },
	    getText: function() {
	        return this.text;
	    },	
	    setChecked: function(a) {
	        if (a === true) {
	            a = true;
	        } else {
	            if (a == this.trueValue) {
	                a = true;
	            } else {
	                if (a == "true") {
	                    a = true;
	                } else {
	                    if (a === 1) {
	                        a = true;
	                    } else {
	                        if (a == "Y") {
	                            a = true;
	                        } else {
	                            a = false;
	                        }
	                    }
	                }
	            }
	        }
	        if (this.checked !== a) {
	            this.checked = !!a;
	            this._checkEl.checked = this.checked;
	            this.value = this.getValue();
	        }
	    },
	    getChecked: function() {
	        return this.checked;
	    },
	    setValue: function(a) {
	        if (this.checked != a) {
	            this.setChecked(a);
	            this.value = this.getValue();
	        }
	    },
	    getValue: function() {
	        return String(this.checked == true ? this.trueValue : this.falseValue);
	    },
	    getFormValue: function() {
	        return this.getValue();
	    },
	    setTrueValue: function(a) {
	        this._checkEl.value = a;
	        this.trueValue = a;
	    },
	    getTrueValue: function() {
	        return this.trueValue;
	    },
	    setFalseValue: function(a) {
	        this.falseValue = a;
	    },
	    getFalseValue: function() {
	        return this.falseValue;
	    },
	    __onClick: function(a) {
	        if (this.isReadOnly()) {
	            return;
	        }
	        this.setChecked(!this.checked);
	        this.fire("checkedchanged", {
	            checked: this.checked
	        });
	        this.fire("valuechanged", {
	            value: this.getValue()
	        });
	        this.fire("click", a, this);
	    },
	    getAttrs : function(e) {
			var t = kitui.CheckBox.superclass.getAttrs.call(this, e);
			
			return t;
		}
	});

	kitui.regClass(kitui.CheckBox, "checkbox");

})(jQuery);
///<jscompress sourcefile="jquery.checkboxlist.js" />
(function($) {
	kitui.CheckBoxList = function() {
	    kitui.CheckBoxList.superclass.constructor.call(this);
	};

	kitui.extend(kitui.CheckBoxList, kitui.ListControl, {
	    formField: true,
	    multiSelect: true,
	    repeatItems: 0,
	    repeatLayout: "table",
	    repeatDirection: "horizontal",
	    _itemCls: "kitui-checkboxlist-item",
	    _itemHoverCls: "kitui-checkboxlist-item-hover",
	    _itemSelectedCls: "kitui-checkboxlist-item-selected",
	    _tableCls: "kitui-checkboxlist-table",
	    _tdCls: "kitui-checkboxlist-td",
	    _disabledCls: "kitui-disabled",
	    _checkType: "checkbox",
	    uiCls: "kitui-checkboxlist",
	    _labelFieldCls : "kitui-labelfield",
		labelField : false,
		label : "",
		labelStyle : "",
		_doLabelLayout:true,
	    _create: function() {
	        var e = this.el = document.createElement("div");
	        this.el.className = this.uiCls;
	        this.el.innerHTML = '<table class="cklist" cellpadding="0" border="0" cellspacing="0" style="display:table;"><tr><td><div class="kitui-list-inner"></div><div class="kitui-errorIcon"></div><input type="hidden" /></td></tr></table>';
	        this.cellEl = e.getElementsByTagName("td")[0];
	        this._innerEl = this.cellEl.firstChild;
	        this._valueEl = this.cellEl.lastChild;
	        this._errorIconEl = this.cellEl.childNodes[1];
	        this._borderEl = this.el.firstChild;
	    },
	    _getRepeatTable: function() {
	        var f = [];
	        if (this.repeatItems > 0) {
	            if (this.repeatDirection == "horizontal") {
	                var g = [];
	                for (var d = 0, b = this.data.length; d < b; d++) {
	                    var e = this.data[d];
	                    if (g.length == this.repeatItems) {
	                        f.push(g);
	                        g = [];
	                    }
	                    g.push(e);
	                }
	                f.push(g);
	            } else {
	                var a = this.repeatItems > this.data.length ? this.data.length : this.repeatItems;
	                for (var d = 0, b = a; d < b; d++) {
	                    f.push([]);
	                }
	                for (var d = 0, b = this.data.length; d < b; d++) {
	                    var e = this.data[d];
	                    var c = d % this.repeatItems;
	                    f[c].push(e);
	                }
	            }
	        } else {
	            f = [ this.data.clone() ];
	        }
	        return f;
	    },
	    doUpdate: function() {
	        var d = this.data;
	        var m = "";
	        for (var e = 0, a = d.length; e < a; e++) {
	            var f = d[e];
	            f._i = e;
	        }
	        if (this.repeatLayout == "flow") {
	            var g = this._getRepeatTable();
	            for (var e = 0, a = g.length; e < a; e++) {
	                var h = g[e];
	                for (var c = 0, b = h.length; c < b; c++) {
	                    var f = h[c];
	                    m += this._createItemHtml(f, f._i);
	                }
	                if (e != a - 1) {
	                    m += "<br/>";
	                }
	            }
	        } else {
	            if (this.repeatLayout == "table") {
	                var g = this._getRepeatTable();
	                m += '<table class="' + this._tableCls + '" cellpadding="0" cellspacing="1">';
	                for (var e = 0, a = g.length; e < a; e++) {
	                    var h = g[e];
	                    m += "<tr>";
	                    for (var c = 0, b = h.length; c < b; c++) {
	                        var f = h[c];
	                        m += '<td class="' + this._tdCls + '">';
	                        m += this._createItemHtml(f, f._i);
	                        m += "</td>";
	                    }
	                    m += "</tr>";
	                }
	                m += "</table>";
	            } else {
	                for (var e = 0, a = d.length; e < a; e++) {
	                    var f = d[e];
	                    m += this._createItemHtml(f, e);
	                }
	            }
	        }
	        this._innerEl.innerHTML = m;
	        for (var e = 0, a = d.length; e < a; e++) {
	            var f = d[e];
	            delete f._i;
	        }
	    },
		setLabelField : function(labelfield) {
			if (this.labelField != labelfield) {
				this.labelField = labelfield;
				if (!this._borderEl) {
					return;
				}
				if (!this._labelWarp) {
					this._labelWarp = kitui.append(this.el,
							'<label class="kitui-labelfield-label"></label>');
					this._labelWarp.innerHTML = this.label;
					kitui.setStyle(this._labelWarp, this.labelStyle);
				}
				this._labelWarp.style.display = labelfield ? "block" : "none";
				this._labelWarp.style.top = "3px"
				if (labelfield) {
					kitui.addClass(this.el, this._labelFieldCls);
				} else {
					kitui.removeClass(this.el, this._labelFieldCls);
				}
				this._labelLayout();
			}
		},	    
	    _createItemHtml: function(i, d) {
	        var f = this._OnDrawItem(i, d);
	        var a = this._createItemId(d);
	        var g = this._createCheckId(d);
	        var b = this.getItemValue(i);
	        var c = "";
	        var j = '<div id="' + a + '" index="' + d + '" class="' + this._itemCls + " ";
	        if (i.enabled === false) {
	            j += " kitui-disabled ";
	            c = "disabled";
	        }
	        var h = 'onclick="return false"';
	        if (isChrome) {
	            h = 'onmousedown="this._checked = this.checked;" onclick="this.checked = this._checked"';
	        }
	        j += f.itemCls + '" style="' + f.itemStyle + '"><input ' + h + " " + c + ' value="' + b + '" id="' + g + '" type="' + this._checkType + '" /><label for="' + g + '" onclick="return false;">';
	        j += f.itemHtml + "</label></div>";
	        return j;
	    },
	    _OnDrawItem: function(b, a) {
	        var c = this.getItemText(b);
	        var d = {
	            index: a,
	            item: b,
	            itemHtml: c,
	            itemCls: "",
	            itemStyle: ""
	        };
	        this.fire("drawitem", d);
	        if (d.itemHtml === null || d.itemHtml === undefined) {
	            d.itemHtml = "";
	        }
	        return d;
	    },
	    setRepeatItems: function(a) {
	        a = parseInt(a);
	        if (isNaN(a)) {
	            a = 0;
	        }
	        if (this.repeatItems != a) {
	            this.repeatItems = a;
	            this.doUpdate();
	        }
	    },
	    getRepeatItems: function() {
	        return this.repeatItems;
	    },
	    setRepeatLayout: function(a) {
	        if (a != "flow" && a != "table") {
	            a = "none";
	        }
	        if (this.repeatLayout != a) {
	            this.repeatLayout = a;
	            this.doUpdate();
	        }
	    },
	    getRepeatLayout: function() {
	        return this.repeatLayout;
	    },
	    setRepeatDirection: function(a) {
	        if (a != "vertical") {
	            a = "horizontal";
	        }
	        if (this.repeatDirection != a) {
	            this.repeatDirection = a;
	            this.doUpdate();
	        }
	    },
	    getRepeatDirection: function() {
	        return this.repeatDirection;
	    },
	    getAttrs: function(d) {
	        var b = kitui.CheckBoxList.superclass.getAttrs.call(this, d);
	        
	        return b;
	    }
	});

	kitui.regClass(kitui.CheckBoxList, "checkboxlist");

})(jQuery);
///<jscompress sourcefile="jquery.popup.js" />
(function($) {
kitui.Popup = function() {
    kitui.Popup.superclass.constructor.call(this);
    this.setVisible(false);
    this.setAllowDrag(this.allowDrag);
    this.setAllowResize(this.allowResize);
 };

kitui.extend(kitui.Popup, kitui.Container, {
    _clearBorder: false,
    uiCls: "kitui-popup",  
    _create: function() {
        var a = this.el = document.createElement("div");
        this.el.className = "kitui-popup";
        this._contentEl = this.el;
    },
    _initEvents: function() {
        kitui._BindEvents(function() {
            kitui_onOne(this.el, "mouseover", this.__OnMouseOver, this);
        }, this);
    },
    doLayout: function() {
        if (!this.canLayout()) {
            return;
        }
        kitui.Popup.superclass.doLayout.call(this);
        this._doShadow();
        var nodes = this.el.childNodes;
        if (nodes) {
            for (var i = 0, len = nodes.length; i < len; i++) {
                var node = nodes[i];
                kitui.layout(node);
            }
        }
    },
    destroy: function(a) {
        if (this.el) {
            this.el.onmouseover = null;
        }
        kitui.removeChilds(this._contentEl);
        kitui.un(document, "mousedown", this.__OnBodyMouseDown, this);
        kitui.un(window, "resize", this.__OnWindowResize, this);
        if (this._modalEl) {
            jQuery(this._modalEl).remove();
            this._modalEl = null;
        }
        if (this.shadowEl) {
            jQuery(this.shadowEl).remove();
            this.shadowEl = null;
        }
        kitui.Popup.superclass.destroy.call(this, a);
    },
    setWidth: function(w) {
        if (parseInt(w) == w) {
            w += "px";
        }
        this.width = w;
        if (w.indexOf("px") != -1) {
            kitui.setWidth(this.el, w);
        } else {
            this.el.style.width = w;
        }
        this._sizeChanged();
    },
    setHeight: function(h) {
        if (parseInt(h) == h) {
            h += "px";
        }
        this.height = h;
        if (h.indexOf("px") != -1) {
            kitui.setHeight(this.el, h);
        } else {
            this.el.style.height = h;
        }
        this._sizeChanged();
    },
    setBody: function(c) {
        if (!c) {
            return;
        }
        if (!kitui.isArray(c)) {
            c = [ c ];
        }
        for (var b = 0, a = c.length; b < a; b++) {
            kitui.append(this._contentEl, c[b]);
        }
    },
    getAttrs: function(el) {
        var attrs = kitui.Popup.superclass.getAttrs.call(this, el);
        var body = kitui.getChildNodes(el, true);
        attrs.body = body;
        return attrs;
    }    
});

kitui.regClass(kitui.Popup, "popup");

kitui.Popup_prototype = {
    isPopup: false,
    popupEl: null,
    popupCls: "",
    showAction: "mouseover",
    hideAction: "outerclick",
    showDelay: 300,
    hideDelay: 500,
    xAlign: "left",
    yAlign: "below",
    xOffset: 0,
    yOffset: 0,
    minWidth: 50,
    minHeight: 25,
    maxWidth: 2e3,
    maxHeight: 2e3,
    showModal: false,
    showShadow: true,
    modalStyle: "opacity:0.2",
    _dragCls: "kitui-popup-drag",
    _resizeCls: "kitui-popup-resize",
    allowDrag: false,
    allowResize: false,
    _unbindPopupEl: function() {
        if (!this.popupEl) {
            return;
        }
        kitui.un(this.popupEl, "click", this.__OnLeftClick, this);
        kitui.un(this.popupEl, "contextmenu", this.__OnRightClick, this);
        kitui.un(this.popupEl, "mouseover", this.__OnMouseOver, this);
    },
    _bindPopupEl: function() {
        if (!this.popupEl) {
            return;
        }
        kitui.on(this.popupEl, "click", this.__OnLeftClick, this);
        kitui.on(this.popupEl, "contextmenu", this.__OnRightClick, this);
        kitui.on(this.popupEl, "mouseover", this.__OnMouseOver, this);
    },
    doShow: function(event) {
        var opt = {
            popupEl: this.popupEl,
            htmlEvent: event,
            cancel: false
        };
        this.fire("BeforeOpen", opt);
        if (opt.cancel == true) {
            return;
        }
        this.fire("opening", opt);
        if (opt.cancel == true) {
            return;
        }
        if (!this.popupEl) {
            this.show();
        } else {
            var a = {};
            if (event) {
                a.xy = [ event.pageX, event.pageY ];
            }
            this.showAtEl(this.popupEl, a);
        }
    },
    doHide: function(b) {
        var a = {
            popupEl: this.popupEl,
            htmlEvent: b,
            cancel: false
        };
        this.fire("BeforeClose", a);
        if (a.cancel == true) {
            return;
        }
        this.close();
    },
    show: function(b, a) {
        this.showAtPos(b, a);
    },
    showAtPos: function(a, d) {
        this.render(document.body);
        if (!a) {
            a = "center";
        }
        if (!d) {
            d = "middle";
        }
        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";
        this._measureSize();
        var b = kitui.getViewportBox();
        var c = kitui.getBox(this.el);
        if (a == "left") {
            a = 0;
        }
        if (a == "center") {
            a = b.width / 2 - c.width / 2;
        }
        if (a == "right") {
            a = b.width - c.width;
        }
        if (d == "top") {
            d = 0;
        }
        if (d == "middle") {
            d = b.y + b.height / 2 - c.height / 2;
        }
        if (d == "bottom") {
            d = b.height - c.height;
        }
        if (a + c.width > b.right) {
            a = b.right - c.width;
        }
        if (d + c.height > b.bottom) {
            d = b.bottom - c.height - 20;
        }
        this._Show(a, d);
    },
    _doModal: function() {
        jQuery(this._modalEl).remove();
        if (!this.showModal) {
            return;
        }
        if (this.visible == false) {
            return;
        }
        var b = document.documentElement;
        var c = parseInt(Math.max(document.body.scrollWidth, b ? b.scrollWidth : 0));
        var f = parseInt(Math.max(document.body.scrollHeight, b ? b.scrollHeight : 0));
        var d = kitui.getViewportBox();
        var a = d.height;
        if (a < f) {
            a = f;
        }
        var e = d.width;
        if (e < c) {
            e = c;
        }
        this._modalEl = kitui.append(document.body, '<div class="kitui-modal"></div>');
        this._modalEl.style.height = a + "px";
        this._modalEl.style.width = e + "px";
        this._modalEl.style.zIndex = kitui.getStyle(this.el, "zIndex") - 1;
        kitui.setStyle(this._modalEl, this.modalStyle);
    },
    _doShim: function() {
        if (!kitui.isIE || !kitui_useShims) {
            return;
        }
        if (!this._shimEl) {
            var e = "<iframe frameborder='0' style='position:absolute; z-index:-1; width:0; height:0; top:0;left:0;scrolling:no;'></iframe>";
            this._shimEl = kitui.append(document.body, e);
        }
        function t() {
            this._shimEl.style.display = "";
            var e = kitui.getBox(this.el), t = this._shimEl.style;
            t.width = e.width + "px";
            t.height = e.height + "px";
            t.left = e.x + "px";
            t.top = e.y + "px";
            var i = kitui.getStyle(this.el, "zIndex");
            if (!isNaN(i)) {
                this._shimEl.style.zIndex = i - 3;
            }
        }
        this._shimEl.style.display = "none";
        if (this._doShimTimer) {
            clearTimeout(this._doShimTimer);
            this._doShimTimer = null;
        }
        var i = this;
        this._doShimTimer = setTimeout(function() {
            i._doShimTimer = null;
            t.call(i);
        }, 20);
    },    
    _doShadow: function() {
        if (!this.shadowEl) {
            this.shadowEl = kitui.append(document.body, '<div class="kitui-shadow"></div>');
        }
        this.shadowEl.style.display = this.showShadow ? "" : "none";
        if (this.showShadow) {
            function b() {
                this.shadowEl.style.display = "";
                var e = kitui.getBox(this.el);
                var d = this.shadowEl.style;
                d.width = e.width + "px";
                d.height = e.height + "px";
                d.left = e.x + "px";
                d.top = e.y + "px";
                var c = kitui.getStyle(this.el, "zIndex");
                if (!isNaN(c)) {
                    this.shadowEl.style.zIndex = c - 2;
                }
            }
            this.shadowEl.style.display = "none";
            if (this._doShadowTimer) {
                clearTimeout(this._doShadowTimer);
                this._doShadowTimer = null;
            }
            var a = this;
            this._doShadowTimer = setTimeout(function() {
                a._doShadowTimer = null;
                b.call(a);
            }, 20);
        }
    },
    _measureSize: function() {
        this.el.style.display = "";
        var a = kitui.getBox(this.el);
        if (a.width > this.maxWidth) {
            kitui.setWidth(this.el, this.maxWidth);
            a = kitui.getBox(this.el);
        }
        if (a.height > this.maxHeight) {
            kitui.setHeight(this.el, this.maxHeight);
            a = kitui.getBox(this.el);
        }
        if (a.width < this.minWidth) {
            kitui.setWidth(this.el, this.minWidth);
            a = kitui.getBox(this.el);
        }
        if (a.height < this.minHeight) {
            kitui.setHeight(this.el, this.minHeight);
            a = kitui.getBox(this.el);
        }
    },
    _getWindowOffset: function(a) {
        return [ 0, 0 ];
    },
    showAtEl: function(b, r) {
    	var sss = b;
        b = kitui.byId(b);
        if(kitui.get(sss)&&kitui.get(sss).getLabelField()){
        	b = kitui.byId(b).childNodes[0];
        }
        if (!b) {
            return;
        }
        if (!this.isRender() || this.el.parentNode != document.body) {
            this.render(document.body);
        }
        var i = {
            atEl: b,
            popupEl: this.el,
            xAlign: this.xAlign,
            yAlign: this.yAlign,
            xOffset: this.xOffset,
            yOffset: this.yOffset,
            popupCls: this.popupCls
        };
        kitui.copyTo(i, r);
        kitui.addClass(b, i.popupCls);
        b.popupCls = i.popupCls;
        this._popupEl = b;
        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";
        this.doLayout();
        this._measureSize();
        var j = kitui.getViewportBox();
        var f = kitui.getBox(this.el);
        var e = kitui.getBox(b);
        var q = i.xy;
        var g = i.xAlign, p = i.yAlign;
        var m = j.width / 2 - f.width / 2, l = 0;
        if (q) {
            m = q[0];
            l = q[1];
        }
        switch (i.xAlign) {
          case "outleft":
            m = e.x - f.width;
            break;

          case "left":
            m = e.x;
            break;

          case "center":
            m = e.x + e.width / 2 - f.width / 2;
            break;

          case "right":
            m = e.right - f.width;
            break;

          case "outright":
            m = e.right;
            break;

          default:
            break;
        }
        switch (i.yAlign) {
          case "above":
            l = e.y - f.height;
            break;

          case "top":
            l = e.y;
            break;

          case "middle":
            l = e.y + e.height / 2 - f.height / 2;
            break;

          case "bottom":
            l = e.bottom - f.height;
            break;

          case "below":
            l = e.bottom;
            break;

          default:
            break;
        }
        m = parseInt(m);
        l = parseInt(l);
        var n = this._getWindowOffset(r);
        if (i.outYAlign || i.outXAlign) {
            if (i.outYAlign == "above") {
                if (l + f.height > j.bottom) {
                    var k = e.y - j.y;
                    var a = j.bottom - e.bottom;
                    if (k > a) {
                        l = e.y - f.height;
                    }
                }
            }
            if (i.outXAlign == "outleft") {
                if (m + f.width > j.right) {
                    var d = e.x - j.x;
                    var o = j.right - e.right;
                    if (d > o) {
                        m = e.x - f.width;
                    }
                }
            }
            if (i.outXAlign == "right") {
                if (m + f.width > j.right) {
                    m = e.right - f.width;
                }
            }
            this._Show(m + n[0], l + n[1]);
        } else {
            this.showAtPos(m + i.xOffset + n[0], l + i.yOffset + n[1]);
        }
    },
    _Show: function(a, c) {
        this.el.style.display = "";
        this.el.style.zIndex = kitui.getMaxZIndex();
        kitui.setX(this.el, a);
        kitui.setY(this.el, c);
        this.setVisible(true);
        if (this.hideAction == "mouseout") {
            kitui.on(document, "mousemove", this.__OnBodyMouseMove, this);
        }
        var b = this;
        this._doShadow();
        this._doModal();
        this._doShim();
        kitui.layoutIFrames(this.el);
        this.isPopup = true;
        kitui.on(document, "mousedown", this.__OnBodyMouseDown, this);
        kitui.on(window, "resize", this.__OnWindowResize, this);
        this.fire("Open");
    },
    open: function() {
        this.show();
    },
    close: function() {
        this.hide();
    },
    hide: function() {
        if (!this.el) {
            return;
        }
        if (this.popupEl) {
            kitui.removeClass(this.popupEl, this.popupEl.popupCls);
        }
        if (this._popupEl) {
            kitui.removeClass(this._popupEl, this._popupEl.popupCls);
        }
        this._popupEl = null;
        jQuery(this._modalEl).remove();
        if (this.shadowEl) {
            this.shadowEl.style.display = "none";
        }
        if (this._shimEl) {
            this._shimEl.style.display = "none";
        }
        kitui.un(document, "mousemove", this.__OnBodyMouseMove, this);
        kitui.un(document, "mousedown", this.__OnBodyMouseDown, this);
        kitui.un(window, "resize", this.__OnWindowResize, this);
        this.setVisible(false);
        this.isPopup = false;
        this.fire("Close");
    },
    setPopupEl: function(a) {
        a = kitui.byId(a);
        if (!a) {
            return;
        }
        this._unbindPopupEl();
        this.popupEl = a;
        this._bindPopupEl();
    },
    setPopupCls: function(a) {
        this.popupCls = a;
    },
    setShowAction: function(a) {
        this.showAction = a;
    },
    setHideAction: function(a) {
        this.hideAction = a;
    },
    setShowDelay: function(a) {
        this.showDelay = a;
    },
    setHideDelay: function(a) {
        this.hideDelay = a;
    },
    setXAlign: function(a) {
        this.xAlign = a;
    },
    setYAlign: function(a) {
        this.yAlign = a;
    },
    setxOffset: function(a) {
        a = parseInt(a);
        if (isNaN(a)) {
            a = 0;
        }
        this.xOffset = a;
    },
    setyOffset: function(a) {
        a = parseInt(a);
        if (isNaN(a)) {
            a = 0;
        }
        this.yOffset = a;
    },
    setShowModal: function(a) {
        this.showModal = a;
    },
    setShowShadow: function(a) {
        this.showShadow = a;
    },
    setMinWidth: function(a) {
        if (isNaN(a)) {
            return;
        }
        this.minWidth = a;
    },
    setMinHeight: function(a) {
        if (isNaN(a)) {
            return;
        }
        this.minHeight = a;
    },
    setMaxWidth: function(a) {
        if (isNaN(a)) {
            return;
        }
        this.maxWidth = a;
    },
    setMaxHeight: function(a) {
        if (isNaN(a)) {
            return;
        }
        this.maxHeight = a;
    },
    setAllowDrag: function(a) {
        this.allowDrag = a;
        kitui.removeClass(this.el, this._dragCls);
        if (a) {
            kitui.addClass(this.el, this._dragCls);
        }
    },
    setAllowResize: function(a) {
        this.allowResize = a;
        kitui.removeClass(this.el, this._resizeCls);
        if (a) {
            kitui.addClass(this.el, this._resizeCls);
        }
    },
    __OnLeftClick: function(b) {
        if (this._inAniming) {
            return;
        }
        if (this.showAction != "leftclick") {
            return;
        }
        var a = jQuery(this.popupEl).attr("allowPopup");
        if (String(a) == "false") {
            return;
        }
        this.doShow(b);
    },
    __OnRightClick: function(b) {
        if (this._inAniming) {
            return;
        }
        if (this.showAction != "rightclick") {
            return;
        }
        var a = jQuery(this.popupEl).attr("allowPopup");
        if (String(a) == "false") {
            return;
        }
        b.preventDefault();
        this.doShow(b);
    },
    __OnMouseOver: function(c) {
        if (this._inAniming) {
            return;
        }
        if (this.showAction != "mouseover") {
            return;
        }
        var a = jQuery(this.popupEl).attr("allowPopup");
        if (String(a) == "false") {
            return;
        }
        clearTimeout(this._hideTimer);
        this._hideTimer = null;
        if (this.isPopup) {
            return;
        }
        var b = this;
        this._showTimer = setTimeout(function() {
            b.doShow(c);
        }, this.showDelay);
    },
    __OnBodyMouseMove: function(a) {
        if (this.hideAction != "mouseout") {
            return;
        }
        this._tryHide(a);
    },
    __OnBodyMouseDown: function(a) {
        if (this.hideAction != "outerclick") {
            return;
        }
        if (!this.isPopup) {
            return;
        }
        if (this.within(a) || this.popupEl && kitui.isAncestor(this.popupEl, a.target)) {} else {
            this.doHide(a);
        }
    },
    _tryHide: function(b) {
        if (kitui.isAncestor(this.el, b.target) || this.popupEl && kitui.isAncestor(this.popupEl, b.target)) {} else {
            clearTimeout(this._showTimer);
            this._showTimer = null;
            if (this._hideTimer) {
                return;
            }
            var a = this;
            this._hideTimer = setTimeout(function() {
                a.doHide(b);
            }, this.hideDelay);
        }
    },
    __OnWindowResize: function(a) {
        if (this.isDisplay() && !kitui.isIE6) {
            this._doModal();
        }
    },
    within: function(f) {
        if (kitui.isAncestor(this.el, f.target)) {
            return true;
        }
        var b = kitui.getChildControls(this);
        for (var d = 0, a = b.length; d < a; d++) {
            var g = b[d];
            if (g.within(f)) {
                return true;
            }
        }
        return false;
    }
};

kitui.copyTo(kitui.Popup.prototype, kitui.Popup_prototype);	
	
})(jQuery);
///<jscompress sourcefile="jquery.popupedit.js" />
(function($) {
kitui.PopupEdit = function() {
    kitui.PopupEdit.superclass.constructor.call(this);
    this._createPopup();
    this.el.className += " kitui-popupedit";
};

kitui.extend(kitui.PopupEdit, kitui.ButtonEdit, {
    uiCls: "kitui-popupedit",
    popup: null,
    popupCls: "kitui-buttonedit-popup",
    _hoverCls: "kitui-buttonedit-hover",
    _pressedCls: "kitui-buttonedit-pressed",
    destroy: function(a) {
        if (this.isShowPopup()) {
            this.hidePopup();
        }
        if (this.popup) {
            this.popup.destroy();
            this.popup = null;
        }
        if (this._popupInner) {
            this._popupInner.owner = null;
            this._popupInner = null;
        }
        kitui.PopupEdit.superclass.destroy.call(this, a);
    },
    _initEvents: function() {
        kitui.PopupEdit.superclass._initEvents.call(this);
        kitui._BindEvents(function() {
            kitui_onOne(this.el, "mouseover", this.__OnMouseOver, this);
            kitui_onOne(this.el, "mouseout", this.__OnMouseOut, this);
        }, this);
    },
    _initButtons: function() {
        this.buttons = [];
        var a = this.createButton({
            cls: "kitui-buttonedit-popup",
            iconCls: "kitui-buttonedit-icons-popup",
            name: "popup"
        });
        this.buttons.push(a);
    },
    __OnBlur: function(a) {
        if (this._clickTarget && kitui.isAncestor(this.el, this._clickTarget)) {
            return;
        }
        if (this.isShowPopup()) {
            return;
        }
        //kitui.PopupEdit.superclass.__OnBlur.call(this, a);
    },
    __OnMouseOver: function(a) {
        if (this.isReadOnly() || this.allowInput) {
            return;
        }
        if (kitui.findParent(a.target, "kitui-buttonedit-border")) {
            this.addCls(this._hoverCls);
        }
    },
    __OnMouseOut: function(a) {
        if (this.isReadOnly() || this.allowInput) {
            return;
        }
        this.removeCls(this._hoverCls);
    },
    __OnMouseDown: function(a) {
        if (this.isReadOnly()) {
            return;
        }
        kitui.PopupEdit.superclass.__OnMouseDown.call(this, a);
        if (this.allowInput == false && kitui.findParent(a.target, "kitui-buttonedit-border")) {
            kitui.addClass(this.el, this._pressedCls);
            kitui.on(document, "mouseup", this.__OnDocMouseUp, this);
        }
    },
    __OnInputKeyDown: function(a) {
        this.fire("keydown", {
            htmlEvent: a
        });
        if (a.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
            return false;
        }
        if (a.keyCode == 9) {
            this.hidePopup();
            return;
        }
        if (a.keyCode == 27) {
            this.hidePopup();
            return;
        }
        if (a.keyCode == 13) {
            this.fire("enter");
        }
        if (this.isShowPopup()) {
            if (a.keyCode == 13 || a.keyCode == 27) {
                a.stopPropagation();
            }
        }
    },
    within: function(a) {
        if (kitui.isAncestor(this.el, a.target)) {
            return true;
        }
        if (this.popup.within(a)) {
            return true;
        }
        return false;
    },
    popupWidth: "100%",
    popupMinWidth: 50,
    popupMaxWidth: 2e3,
    popupHeight: "",
    popupMinHeight: 30,
    popupMaxHeight: 2e3,
    setPopup: function(a) {
        if (typeof a == "string") {
            kitui.parse(a);
            a = kitui.get(a);
        }
        var b = kitui.getAndCreate(a);
        if (!b) {
            return;
        }
        b.setVisible(false);
        this._popupInner = b;
        b.owner = this;
        b.on("beforebuttonclick", this.__OnPopupButtonClick, this);
    },
    getPopup: function() {
        if (!this.popup) {
            this._createPopup();
        }
        return this.popup;
    },
    _createPopup: function() {
        this.popup = new kitui.Popup();
        this.popup.setShowAction("none");
        this.popup.setHideAction("outerclick");
        this.popup.setPopupEl(this.el);
        this.popup.on("BeforeClose", this.__OnPopupBeforeClose, this);
        kitui.on(this.popup.el, "keydown", this.__OnPopupKeyDown, this);
    },
    __OnPopupBeforeClose: function(a) {
        if (this.within(a.htmlEvent)) {
            a.cancel = true;
        }
    },
    __OnPopupKeyDown: function(a) {},
    showPopup: function() {
        var b = {
            cancel: false
        };
        this.fire("beforeshowpopup", b);
        if (b.cancel == true) {
            return;
        }
        var a = this.getPopup();
        this._syncShowPopup();
        a.on("Close", this.__OnPopupHide, this);
        this.fire("showpopup");
    },
    doLayout: function() {
        kitui.PopupEdit.superclass.doLayout.call(this);
        if (this.isShowPopup()) {}
    },
    _syncShowPopup: function() {
        var b = this.getPopup();
        if (this._popupInner && this._popupInner.el.parentNode != this.popup._contentEl) {
            this.popup._contentEl.appendChild(this._popupInner.el);
            this._popupInner.setVisible(true);
        }
        var box = null;
        if(this.getLabelField()){
        	box = kitui.getBox(this.el.childNodes[0]);
        }else{
        	box = this.getBox();
        }   
        var a = this.popupWidth;
        if (this.popupWidth == "100%") {
            a = box.width;
        }
        b.setWidth(a);
        var d = parseInt(this.popupHeight);
        if (!isNaN(d)) {
            b.setHeight(d);
        } else {
            b.setHeight("auto");
        }
        b.setMinWidth(this.popupMinWidth);
        b.setMinHeight(this.popupMinHeight);
        b.setMaxWidth(this.popupMaxWidth);
        b.setMaxHeight(this.popupMaxHeight);
        var c = {
            xAlign: "left",
            yAlign: "below",
            outYAlign: "above",
            outXAlign: "right",
            popupCls: this.popupCls
        };
        this._doShowAtEl(this.el, c);
    },
    _doShowAtEl: function(c, b) {
        var a = this.getPopup();
        a.showAtEl(c, b);
    },
    __OnPopupHide: function(a) {
        this.__OnBlur();
        this.fire("hidepopup");
    },
    hidePopup: function() {
        if (this.isShowPopup()) {
            var a = this.getPopup();
            a.close();
            this.blur();
        }
    },
    isShowPopup: function() {
        if (this.popup && this.popup.isDisplay()) {
            return true;
        } else {
            return false;
        }
    },
    setPopupWidth: function(a) {
        this.popupWidth = a;
    },
    setPopupMaxWidth: function(a) {
        this.popupMaxWidth = a;
    },
    setPopupMinWidth: function(a) {
        this.popupMinWidth = a;
    },
    getPopupWidth: function(a) {
        return this.popupWidth;
    },
    getPopupMaxWidth: function(a) {
        return this.popupMaxWidth;
    },
    getPopupMinWidth: function(a) {
        return this.popupMinWidth;
    },
    setPopupHeight: function(a) {
        this.popupHeight = a;
    },
    setPopupMaxHeight: function(a) {
        this.popupMaxHeight = a;
    },
    setPopupMinHeight: function(a) {
        this.popupMinHeight = a;
    },
    getPopupHeight: function(a) {
        return this.popupHeight;
    },
    getPopupMaxHeight: function(a) {
        return this.popupMaxHeight;
    },
    getPopupMinHeight: function(a) {
        return this.popupMinHeight;
    },
    __OnClick: function(b) {
        if (this.isReadOnly()) {
            return;
        }
        if (kitui.isAncestor(this._buttonEl, b.target)) {
            this._OnButtonClick(b);
        }
        if (kitui.findParent(b.target, this._closeCls)) {
            if (this.isShowPopup()) {
                this.hidePopup();
            }
            this.fire("closeclick", {
                htmlEvent: b
            });
            return;
        }
        if (this.allowInput == false || kitui.isAncestor(this._buttonEl, b.target)) {
            if (this.isShowPopup()) {
                this.hidePopup();
            } else {
                var a = this;
                setTimeout(function() {
                    a.showPopup();
                }, 1);
            }
        }
    },
    __OnPopupButtonClick: function(a) {
        if (a.name == "close") {
            this.hidePopup();
        }
        a.cancel = true;
    }
});

kitui.regClass(kitui.PopupEdit, "popupedit");
})(jQuery);
///<jscompress sourcefile="jquery.listbox.js" />
(function($) {
	kitui.ListBox = function() {
	    kitui.ListBox.superclass.constructor.call(this);
	};
	
	kitui.extend(kitui.ListBox, kitui.ListControl, {
	    formField: true,
	    width: 200,
	    columns: null,
	    columnWidth: 80,
	    showNullItem: false,
	    nullItemText: "",
	    showEmpty: false,
	    emptyText: "",
	    showCheckBox: false,
	    showAllCheckBox: true,
	    multiSelect: false,
	    _itemCls: "kitui-listbox-item",
	    _itemHoverCls: "kitui-listbox-item-hover",
	    _itemSelectedCls: "kitui-listbox-item-selected",
	    uiCls: "kitui-listbox",
	    _create: function() {
	        var a = this.el = document.createElement("div");
	        this.el.className = "kitui-listbox";
	        this.el.innerHTML = '<div class="kitui-listbox-border"><div class="kitui-listbox-header"></div><div class="kitui-listbox-view"></div><input type="hidden"/></div><div class="kitui-errorIcon"></div>';
	        this._borderEl = this.el.firstChild;
	        this._headerEl = this._borderEl.firstChild;
	        this._viewEl = this._borderEl.childNodes[1];
	        this._valueEl = this._borderEl.childNodes[2];
	        this._errorIconEl = this.el.lastChild;
	        this._scrollViewEl = this._viewEl;
	    },
	    destroy: function(a) {
	        if (this._viewEl) {
	            kitui.clearEvent(this._viewEl);
	            this._viewEl = null;
	        }
	        this._borderEl = null;
	        this._headerEl = null;
	        this._viewEl = null;
	        this._valueEl = null;
	        kitui.ListBox.superclass.destroy.call(this, a);
	    },
	    _initEvents: function() {
	        kitui.ListBox.superclass._initEvents.call(this);
	        kitui._BindEvents(function() {
	            kitui_onOne(this._viewEl, "scroll", this.__OnScroll, this);
	        }, this);
	    },
	    destroy: function(a) {
	        if (this._viewEl) {
	            this._viewEl.onscroll = null;
	        }
	        kitui.ListBox.superclass.destroy.call(this, a);
	    },
	    setColumns: function(f) {
	        if (!kitui.isArray(f)) {
	            f = [];
	        }
	        this.columns = f;
	        for (var c = 0, a = this.columns.length; c < a; c++) {
	            var e = this.columns[c];
	            if (e.type) {
	                if (!kitui.isNull(e.header) && typeof e.header !== "function") {
	                    if (e.header.trim() == "") {
	                        delete e.header;
	                    }
	                }
	                var b = kitui._getColumn(e.type);
	                if (b) {
	                    var g = kitui.copyTo({}, e);
	                    kitui.copyTo(e, b);
	                    kitui.copyTo(e, g);
	                }
	            }
	            var d = parseInt(e.width);
	            if (kitui.isNumber(d) && String(d) == e.width) {
	                e.width = d + "px";
	            }
	            if (kitui.isNull(e.width)) {
	                e.width = this.columnWidth + "px";
	            }
	        }
	        this.doUpdate();
	    },
	    getColumns: function() {
	        return this.columns;
	    },
	    doUpdate: function() {
	        if (this._allowUpdate === false) {
	            return;
	        }
	        var m = this.columns && this.columns.length > 0;
	        if (m) {
	            kitui.addClass(this.el, "kitui-listbox-showColumns");
	        } else {
	            kitui.removeClass(this.el, "kitui-listbox-showColumns");
	        }
	        this._headerEl.style.display = m ? "" : "none";
	        var a = [];
	        if (m) {
	            a[a.length] = '<table class="kitui-listbox-headerInner" cellspacing="0" cellpadding="0"><tr>';
	            var A = this.uid + "$ck$all";
	            a[a.length] = '<td class="kitui-listbox-checkbox"><input type="checkbox" id="' + A + '"></td>';
	            for (var u = 0, t = this.columns.length; u < t; u++) {
	                var d = this.columns[u];
	                var v = d.header;
	                if (kitui.isNull(v)) {
	                    v = "&nbsp;";
	                }
	                var p = d.width;
	                if (kitui.isNumber(p)) {
	                    p = p + "px";
	                }
	                a[a.length] = '<td class="';
	                if (d.headerCls) {
	                    a[a.length] = d.headerCls;
	                }
	                a[a.length] = '" style="';
	                if (d.headerStyle) {
	                    a[a.length] = d.headerStyle + ";";
	                }
	                if (p) {
	                    a[a.length] = "width:" + p + ";";
	                }
	                if (d.headerAlign) {
	                    a[a.length] = "text-align:" + d.headerAlign + ";";
	                }
	                a[a.length] = '">';
	                a[a.length] = v;
	                a[a.length] = "</td>";
	            }
	            a[a.length] = "</tr></table>";
	        }
	        this._headerEl.innerHTML = a.join("");
	        var a = [];
	        var C = this.data;
	        a[a.length] = '<table class="kitui-listbox-items" cellspacing="0" cellpadding="0">';
	        if (this.showEmpty && C.length == 0) {
	            a[a.length] = '<tr><td colspan="20">' + this.emptyText + "</td></tr>";
	        } else {
	            this._doNullItem();
	            for (var x = 0, s = C.length; x < s; x++) {
	                var z = C[x];
	                var g = -1;
	                var r = " ";
	                var f = -1;
	                var B = " ";
	                a[a.length] = '<tr id="';
	                a[a.length] = this._createItemId(x);
	                a[a.length] = '" index="';
	                a[a.length] = x;
	                a[a.length] = '" class="kitui-listbox-item ';
	                if (z.enabled === false) {
	                    a[a.length] = " kitui-disabled ";
	                }
	                g = a.length;
	                a[a.length] = r;
	                a[a.length] = '" style="';
	                f = a.length;
	                a[a.length] = B;
	                a[a.length] = '">';
	                var q = this._createCheckId(x);
	                var o = this.name;
	                var c = this.getItemValue(z);
	                var b = "";
	                if (z.enabled === false) {
	                    b = "disabled";
	                }
	                a[a.length] = '<td class="kitui-listbox-checkbox"><input ' + b + ' id="' + q + '" type="checkbox" ></td>';
	                if (m) {
	                    for (var u = 0, t = this.columns.length; u < t; u++) {
	                        var d = this.columns[u];
	                        var y = this._OnDrawCell(z, x, d);
	                        var p = d.width;
	                        if (typeof p == "number") {
	                            p = p + "px";
	                        }
	                        a[a.length] = '<td class="';
	                        if (y.cellCls) {
	                            a[a.length] = y.cellCls;
	                        }
	                        a[a.length] = '" style="';
	                        if (y.cellStyle) {
	                            a[a.length] = y.cellStyle + ";";
	                        }
	                        if (p) {
	                            a[a.length] = "width:" + p + ";";
	                        }
	                        if (d.align) {
	                            a[a.length] = "text-align:" + d.align + ";";
	                        }
	                        a[a.length] = '">';
	                        a[a.length] = y.cellHtml;
	                        a[a.length] = "</td>";
	                        if (y.rowCls) {
	                            r = y.rowCls;
	                        }
	                        if (y.rowStyle) {
	                            B = y.rowStyle;
	                        }
	                    }
	                } else {
	                    var y = this._OnDrawCell(z, x, null);
	                    a[a.length] = '<td class="';
	                    if (y.cellCls) {
	                        a[a.length] = y.cellCls;
	                    }
	                    a[a.length] = '" style="';
	                    if (y.cellStyle) {
	                        a[a.length] = y.cellStyle;
	                    }
	                    a[a.length] = '">';
	                    a[a.length] = y.cellHtml;
	                    a[a.length] = "</td>";
	                    if (y.rowCls) {
	                        r = y.rowCls;
	                    }
	                    if (y.rowStyle) {
	                        B = y.rowStyle;
	                    }
	                }
	                a[g] = r;
	                a[f] = B;
	                a[a.length] = "</tr>";
	            }
	        }
	        a[a.length] = "</table>";
	        var n = a.join("");
	        this._viewEl.innerHTML = n;
	        this._doSelects();
	        this.doLayout();
	    },
	    doLayout: function() {
	        if (!this.canLayout()) {
	            return;
	        }
	        if (this.columns && this.columns.length > 0) {
	            kitui.addClass(this.el, "kitui-listbox-showcolumns");
	        } else {
	            kitui.removeClass(this.el, "kitui-listbox-showcolumns");
	        }
	        if (this.showCheckBox) {
	            kitui.removeClass(this.el, "kitui-listbox-hideCheckBox");
	        } else {
	            kitui.addClass(this.el, "kitui-listbox-hideCheckBox");
	        }
	        var a = this.uid + "$ck$all";
	        var j = document.getElementById(a);
	        if (j) {
	            j.style.display = this.showAllCheckBox ? "" : "none";
	        }
	        var g = this.isAutoHeight();
	        h = this.getHeight(true);
	        e = this.getWidth(true);
	        var i = e;
	        var f = this._viewEl;
	        f.style.width = e + "px";
	        if (!g) {
	            var b = kitui.getHeight(this._headerEl);
	            h = h - b;
	            f.style.height = h + "px";
	        } else {
	            f.style.height = "auto";
	        }
	        if (isIE) {
	            var d = this._headerEl.firstChild, c = this._viewEl.firstChild;
	            if (this._viewEl.offsetHeight >= this._viewEl.scrollHeight) {
	                c.style.width = "100%";
	                if (d) {
	                    d.style.width = "100%";
	                }
	            } else {
	                var e = parseInt(c.parentNode.offsetWidth - 17) + "px";
	                c.style.width = e;
	                if (d) {
	                    d.style.width = e;
	                }
	            }
	        }
	        if (this._viewEl.offsetHeight < this._viewEl.scrollHeight) {
	            this._headerEl.style.width = i - 17 + "px";
	        } else {
	            this._headerEl.style.width = "100%";
	        }
	    },
	    setShowCheckBox: function(a) {
	        this.showCheckBox = a;
	        this.doLayout();
	    },
	    getShowCheckBox: function() {
	        return this.showCheckBox;
	    },
	    setShowAllCheckBox: function(a) {
	        this.showAllCheckBox = a;
	        this.doLayout();
	    },
	    getShowAllCheckBox: function() {
	        return this.showAllCheckBox;
	    },
	    setShowNullItem: function(a) {
	        if (this.showNullItem != a) {
	            this.showNullItem = a;
	            this._doNullItem();
	            this.doUpdate();
	        }
	    },
	    getShowNullItem: function() {
	        return this.showNullItem;
	    },
	    setNullItemText: function(a) {
	        if (this.nullItemText != a) {
	            this.nullItemText = a;
	            this._doNullItem();
	            this.doUpdate();
	        }
	    },
	    getNullItemText: function() {
	        return this.nullItemText;
	    },
	    _doNullItem: function() {
	        for (var b = 0, a = this.data.length; b < a; b++) {
	            var c = this.data[b];
	            if (c.__NullItem) {
	                this.data.removeAt(b);
	                break;
	            }
	        }
	        if (this.showNullItem) {
	            var c = {
	                __NullItem: true
	            };
	            c[this.textField] = "";
	            c[this.valueField] = "";
	            this.data.insert(0, c);
	        }
	    },
	    _OnDrawCell: function(a, b, c) {
	        var f = c ? kitui._getMap(c.field, a) : this.getItemText(a);
	        var g = {
	            sender: this,
	            index: b,
	            rowIndex: b,
	            record: a,
	            item: a,
	            column: c,
	            field: c ? c.field : null,
	            value: f,
	            cellHtml: f,
	            rowCls: null,
	            cellCls: c ? c.cellCls || "" : "",
	            rowStyle: null,
	            cellStyle: c ? c.cellStyle || "" : ""
	        };
	        var i = this.columns && this.columns.length > 0;
	        if (!i) {
	            if (b == 0 && this.showNullItem) {
	                g.cellHtml = this.nullItemText;
	            }
	        }
	        if (g.autoEscape == true) {
	            g.cellHtml = kitui.htmlEncode(g.cellHtml);
	        }
	        if (c) {
	            if (c.dateFormat) {
	                if (kitui.isDate(g.value)) {
	                    g.cellHtml = kitui.formatDate(f, c.dateFormat);
	                } else {
	                    g.cellHtml = f;
	                }
	            }
	            var d = c.renderer;
	            if (d) {
	                fn = typeof d == "function" ? d : window[d];
	                if (fn) {
	                    g.cellHtml = fn.call(c, g);
	                }
	            }
	        }
	        this.fire("drawcell", g);
	        if (g.cellHtml === null || g.cellHtml === undefined || g.cellHtml === "") {
	            g.cellHtml = "&nbsp;";
	        }
	        return g;
	    },
	    __OnScroll: function(a) {
	        this._headerEl.scrollLeft = this._viewEl.scrollLeft;
	    },
	    __OnClick: function(f) {
	        var d = this.uid + "$ck$all";
	        if (f.target.id == d) {
	            var a = document.getElementById(d);
	            if (a) {
	                var b = a.checked;
	                var c = this.getValue();
	                if (b) {
	                    this.selectAll();
	                } else {
	                    this.deselectAll();
	                }
	                this._OnSelectionChanged();
	                if (c != this.getValue()) {
	                    this._OnValueChanged();
	                    this.fire("itemclick", {
	                        htmlEvent: f
	                    });
	                }
	            }
	            return;
	        }
	        this._fireEvent(f, "Click");
	    },
	    getAttrs: function(e) {
	        var b = kitui.ListBox.superclass.getAttrs.call(this, e);
	        //kitui._ParseString(e, b, [ "nullItemText", "ondrawcell" ]);
	        //kitui._ParseBool(e, b, [ "showCheckBox", "showAllCheckBox", "showNullItem" ]);
	        if (e.nodeName.toLowerCase() != "select") {
	            var d = kitui.getChildNodes(e);
	            for (var c = 0, a = d.length; c < a; c++) {
	                var f = d[c];
	                var g = jQuery(f).attr("property");
	                if (!g) {
	                    continue;
	                }
	                g = g.toLowerCase();
	                if (g == "columns") {
	                    b.columns = kitui._ParseColumns(f);
	                } else {
	                    if (g == "data") {
	                        b.data = f.innerHTML;
	                    }
	                }
	            }
	        }
	        return b;
	    }
	});
	
	kitui.regClass(kitui.ListBox, "listbox");		
})(jQuery);
///<jscompress sourcefile="jquery.combobox.js" />
(function($) {
	kitui.ComboBox = function() {
	    this.data = [];
	    this.columns = [];
	    kitui.ComboBox.superclass.constructor.call(this);
	    var a = this;
	};
	
	kitui.extend(kitui.ComboBox, kitui.PopupEdit, {
	    text: "",
	    value: "",
	    valueField: "id",
	    textField: "text",
	    dataField: "",
	    delimiter: ",",
	    multiSelect: false,
	    data: [], 
		loadDataset:null,
	    url: "",
	    columns: [],
	    allowInput: false,
	    valueFromSelect: false,
	    popupMaxHeight: 200,
	    itemHasClick:false,
	    filterMode:"all",
	    ajaxQuery:false,
	    searchField:"skey",
	    p:null,
	    autoLoad:true,
	    loadParams:{},
	    set: function(attrs) {
	        if (typeof attrs == "string") {
	            return this;
	        }
	        var c = attrs.value;
	        delete attrs.value;
	        var a = attrs.url;
	        delete attrs.url;
	        var b = attrs.data;
	        delete attrs.data;
	        var dictClass = attrs.dictClass;
	        delete attrs.dictClass;	 	        
	        kitui.ComboBox.superclass.set.call(this, attrs);
	        if (!kitui.isNull(b)) {
	            this.setData(b);
	            attrs.data = b;
	        }
	        if (!kitui.isNull(a)) {
	            this.setUrl(a);
	            attrs.url = a;
	        }
	        if (!kitui.isNull(c)) {
	            this.setValue(c);
	            attrs.value = c;
	        }
			if (!kitui.isNull(dictClass)) {
	            this.setDictClass(dictClass);
	            attrs.dictClass = dictClass;
	        }	  	        
	        return this;
	    },
		setLoadDataset : function(ds){
			this.loadDataset = ds;
			this._listbox.scope=this;
			this._listbox.setLoadDataset(this.loadDataset);
		},
		setDictClass : function(dict){
			this._listbox.setDictClass(dict);
			this.data = this._listbox.data;
		},
	    uiCls: "kitui-combobox",
	    _createPopup: function() {
	        kitui.ComboBox.superclass._createPopup.call(this);
	        this._listbox = new kitui.ListBox();
	        this._listbox.setBorderStyle("border:0;");
	        this._listbox.setStyle("width:100%;height:auto;");
	
	        this._listbox.render(this.popup._contentEl);
	        this._listbox.on("itemclick", this.__OnItemClick, this);
	        this._listbox.on("drawcell", this.__OnItemDrawCell, this);
	        var a = this;
	        this._listbox.on("beforeload", function(b) {
	            a.fire("beforeload", b);
	        }, this);
	        this._listbox.on("load", function(b) {
	            a.fire("load", b);
	        }, this);
	        this._listbox.on("loaderror", function(b) {
	            a.fire("loaderror", b);
	        }, this);
	    },
	    showPopup: function() {
	        var a = {
	            cancel: false
	        };
	        this.fire("beforeshowpopup", a);
	        if (a.cancel == true) {
	            return;
	        }
	        this._listbox.setHeight("auto");
	        kitui.ComboBox.superclass.showPopup.call(this);
	        var b = this.popup.el.style.height;
	        if (b == "" || b == "auto") {
	            this._listbox.setHeight("auto");
	        } else {
	            this._listbox.setHeight("100%");
	        }
	        this._listbox.setValue(this.value);
	    },
	    select: function(a) {
	        this._listbox.deselectAll();
	        a = this.getItem(a);
	        if (a) {
	            this._listbox.select(a);
	            this.__OnItemClick();
	        }
	    },
	    getItem: function(a) {
	        return typeof a == "object" ? a : this.data[a];
	    },
	    indexOf: function(a) {
	        return this.data.indexOf(a);
	    },
	    getAt: function(a) {
	        return this.data[a];
	    },
	    load: function(a,fun) {
	    	var ds = null;
	    	a=a||{}
			if(this.loadDataset){
				this._listbox.scope = this;
				
				var p = {}
				
				if(a.params){
					 p = a.params||{};
					 delete a.params;
				}
				if(a.callback){
					fun = a.callback;
					delete a.callback;
				}
				kitui.copyTo(p,a);
		
				if(!this._listbox.loadDataset)
					this._listbox.loadDataset = eval(this.loadDataset);
					
				this._listbox.load(p,fun);
				return;
			}
	        if (typeof a == "string") {
	            this.setUrl(a);
	        } else {
	            this.setData(a);
	        }
	    },
	    setData: function(data) {
	        if (typeof data == "string") {
	            data = eval("(" + data + ")");
	        }
	        if (!kitui.isArray(data)) {
	            data = [];
	        }
	        this._listbox.setData(data);
	        this.data = this._listbox.data;
	        var vts = this._listbox.getValueAndText(this.value);
	        this.text = this._textEl.value = vts[1];
	    },
	    getData: function() {
	        return this.data;
	    },
	    setUrl: function(a) {
	        this.getPopup();
	        this._listbox.setUrl(a);
	        this.url = this._listbox.url;
	        this.data = this._listbox.data;
	        var b = this._listbox.getValueAndText(this.value);
	        this.text = this._textEl.value = b[1];
	    },
	    setLoadParams:function(loadparams){
	    	this._listbox.setLoadParams(loadparams);
	    },
	    getLoadParams:function(loadparams){
	    	return this._listbox.loadparams;
	    },
	    setAutoLoad:function(autoload){
	    	this._listbox.setAutoLoad(autoload)
	    },	    
	    getUrl: function() {
	        return this.url;
	    },
	    setValueField: function(a) {
	        this.valueField = a;
	        if (this._listbox) {
	            this._listbox.setValueField(a);
	        }
	    },
	    getValueField: function() {
	        return this.valueField;
	    },
	    setTextField: function(a) {
	        if (this._listbox) {
	            this._listbox.setTextField(a);
	        }
	        this.textField = a;
	    },
	    getTextField: function() {
	        return this.textField;
	    },
	    setDisplayField: function(a) {
	        this.setTextField(a);
	    },
	    setDataField: function(a) {
	        if (this._listbox) {
	            this._listbox.setDataField(a);
	        }
	        this.dataField = a;
	    },
	    getDataField: function() {
	        return this.dataField;
	    },
		setValue: function(b,noFire) {
	        if (this.value !== b) {
	            var a = this._listbox.getValueAndText(b);
				if(!a[0]&&!a[1]){
					this.value = a[0];
					this.text=this._textEl.value=a[0];
					this._valueEl.value = a[0];
					this.on("load",function(){
						var _v = this._listbox.getValueAndText(b);
						this.value = b;
			            this.text = this._textEl.value = _v[1];
			            this._valueEl.value = this.value;
			            this._doEmpty();			
					});
				}else{
		            this.value = b;
		            this.text = this._textEl.value = a[1];
		            this._valueEl.value = this.value;		            
		            this._doEmpty();					
				}
				if(!this.itemHasClick&&!noFire){
					//this._OnValueChanged();   //2015年6月13日 去掉值变化事件
				}
	        } else {
	            var a = this._listbox.getValueAndText(b);
	            this.text = this._textEl.value = a[1];
	        }
	    },
	    setMultiSelect: function(a) {
	        if (this.multiSelect != a) {
	            this.multiSelect = a;
	            if (this._listbox) {
	                this._listbox.setMultiSelect(a);
	                this._listbox.setShowCheckBox(a);
	            }
	        }
	    },
	    getMultiSelect: function() {
	        return this.multiSelect;
	    },
	    setColumns: function(a) {
	        if (!kitui.isArray(a)) {
	            a = [];
	        }
	        this.columns = a;
	        this._listbox.setColumns(a);
	    },
	    getColumns: function() {
	        return this.columns;
	    },
	    showNullItem: false,
	    setShowNullItem: function(a) {
	        if (this.showNullItem != a) {
	            this.showNullItem = a;
	            this._listbox.setShowNullItem(a);
	        }
	    },
	    getShowNullItem: function() {
	        return this.showNullItem;
	    },
	    setNullItemText: function(a) {
	        if (this.nullItemText != a) {
	            this.nullItemText = a;
	            this._listbox.setNullItemText(a);
	        }
	    },
	    getNullItemText: function() {
	        return this.nullItemText;
	    },
	    setValueFromSelect: function(a) {
	        this.valueFromSelect = a;
	    },
	    getValueFromSelect: function() {
	        return this.valueFromSelect;
	    },
	    _OnValueChanged: function(_v) {
	        if (this.validateOnChanged) {
	            this.validate();
	        }
	        var d = this.getValue();
	        if(_v||_v=="0")
	        	d = _v;
	        var b = this.getSelecteds();
	        var a = b[0];
	        var c = this;
	        c.fire("valuechanged", {
	            value: d,
	            selecteds: b,
	            selected: a
	        });
	    },
	    getSelecteds: function() {
	        return this._listbox.findItems(this.value);
	    },
	    getSelected: function() {
	        return this.getSelecteds()[0];
	    },
	    __OnItemDrawCell: function(a) {
	        this.fire("drawcell", a);
	    },
	    __OnItemClick: function(f) {
	        var a = this._listbox.getSelecteds();
	        var d = this._listbox.getValueAndText(a);
	        var c = this.getValue();
	        if (f) {
	            if (c != d[0]) {
	                var b = this;
	                b.itemHasClick = true;
	                setTimeout(function() {
	                    b._OnValueChanged(d[0]);
	                }, 1);
	            }
	            if (!this.multiSelect) {
	                this.hidePopup();
	            }
	            this.focus();
	            this.fire("itemclick", {
	                item: f.item
	            });
	        }
	        this.setValue(d[0]);
	        this.setText(d[1]);	        
	    },
	    __OnInputKeyDown: function(g, d) {
	        this.fire("keydown", {
	            htmlEvent: g
	        });
	        if (g.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
	            return false;
	        }
	        if (g.keyCode == 9) {
	            if (this.isShowPopup()) {
	                this.hidePopup();
	            }
	            return;
	        }
	        if (this.isReadOnly()) {
	            return;
	        }
	        switch (g.keyCode) {
	          case 27:
	            g.preventDefault();
	            if (this.isShowPopup()) {
	                g.stopPropagation();
	            }
	            this.hidePopup();
	            this.focus();
	            break;
	
	          case 13:
	            if (this.isShowPopup()) {
	                g.preventDefault();
	                g.stopPropagation();
	                var b = this._listbox.getFocusedIndex();
	                if (b != -1) {
	                    var c = this._listbox.getAt(b);
	                    if (this.multiSelect) {} else {
	                        this._listbox.deselectAll();
	                        this._listbox.select(c);
	                    }
	                    var a = this._listbox.getSelecteds();
	                    var f = this._listbox.getValueAndText(a);
	                    this.setValue(f[0]);
	                    this.setText(f[1]);
	                    this._OnValueChanged();
	                }
	                this.hidePopup();
	                this.focus();
	            } else {
	                this.fire("enter");
	            }
	            break;
	
	          case 37:
	            break;
	
	          case 38:
	            g.preventDefault();
	            var b = this._listbox.getFocusedIndex();
	            if (b == -1) {
	                b = 0;
	                if (!this.multiSelect) {
	                    var c = this._listbox.findItems(this.value)[0];
	                    if (c) {
	                        b = this._listbox.indexOf(c);
	                    }
	                }
	            }
	            if (this.isShowPopup()) {
	                if (!this.multiSelect) {
	                    b -= 1;
	                    if (b < 0) {
	                        b = 0;
	                    }
	                    this._listbox._focusItem(b, true);
	                }
	            }
	            break;
	
	          case 39:
	            break;
	
	          case 40:
	            g.preventDefault();
	            var b = this._listbox.getFocusedIndex();
	            if (b == -1) {
	                b = 0;
	                if (!this.multiSelect) {
	                    var c = this._listbox.findItems(this.value)[0];
	                    if (c) {
	                        b = this._listbox.indexOf(c);
	                    }
	                }
	            }
	            if (this.isShowPopup()) {
	                if (!this.multiSelect) {
	                    b += 1;
	                    if (b > this._listbox.getCount() - 1) {
	                        b = this._listbox.getCount() - 1;
	                    }
	                    this._listbox._focusItem(b, true);
	                }
	            } else {
	                this.showPopup();
	                if (!this.multiSelect) {
	                    this._listbox._focusItem(b, true);
	                }
	            }
	            break;
	
	          default:
	            this._tryQuery(this._textEl.value);
	            break;
	        }
	    },
	    __OnInputKeyUp: function(a) {
	        this.fire("keyup", {
	            htmlEvent: a
	        });
	    },
	    __OnInputKeyPress: function(a) {
	        this.fire("keypress", {
	            htmlEvent: a
	        });
	    },
	    _tryQuery: function(a) {
	        var b = this;
	        setTimeout(function() {
	            var c = b._textEl.value;
	            if (c != a) {
	                b._doQuery(c);
	            }
	        }, 10);
	    },
	    _doQuery: function(e) {
	    	if(this.ajaxQuery){
	    		var p = {};
	    		kitui.copyTo(p,this.getLoadParams());
	    		p.skey=e;
	    		var pp = {};
	    		pp.params = p
	    		pp.callback=function(){
	    			this._filtered = true;
			        if (e !== "" || this.isShowPopup()) {
			            this.showPopup();
			            var c = 0;
			            if (this._listbox.getShowNullItem()) {
			                c = 1;
			            }
			            var f = this;
			            f._listbox._focusItem(c, true);
			        }
	    		}
	    		this.load(p);
	    	}else{
		        if (this.multiSelect == true) {
		            return;
		        }
		        var b = [];
		        for (var d = 0, a = this.data.length; d < a; d++) {
		            var h = this.data[d];
		            var g = kitui._getMap(this.textField, h);
		            if (typeof g == "string") {
		                g = g.toUpperCase();
		                e = e.toUpperCase();
		                if(this.filterMode=="all"){
		                	 if (g.indexOf(e) != -1) {
		                    	b.push(h);
		               		 }
		                }else{
		                	if (g.indexOf(e) == 0) {
		                    	b.push(h);
		               		 }
		                }
	
		            }
		        }
		        this._listbox.setData(b);
		        this._filtered = true;
		        if (e !== "" || this.isShowPopup()) {
		            this.showPopup();
		            var c = 0;
		            if (this._listbox.getShowNullItem()) {
		                c = 1;
		            }
		            var f = this;
		            f._listbox._focusItem(c, true);
		        }	    		
	    	}
	    },
	    __OnPopupHide: function(a) {
	        if (this._filtered) {
	            this._filtered = false;
	            if (this._listbox.el) {
	                this._listbox.setData(this.data);
	            }
	        }
	        this.fire("hidepopup");
	    },
	    findItems: function(a) {
	        return this._listbox.findItems(a);
	    },
	    __OnInputTextChanged: function(h) {
	        if (this.multiSelect == false) {
	            var n = this._textEl.value;
	            var d = this.getData();
	            var c = null;
	            for (var f = 0, b = d.length; f < b; f++) {
	                var o = d[f];
	                var k = o[this.textField];
	                if (k == n) {
	                    c = o;
	                    break;
	                }
	            }
	            if (c) {
	                this._listbox.setValue(c ? c[this.valueField] : "");
	                var m = this._listbox.getValue();
	                var a = this._listbox.getValueAndText(m);
	                var j = this.getValue();
	                this.setValue(m);
	                this.setText(a[1]);
	            } else {
	                if (this.valueFromSelect) {
	                    this.setValue("");
	                    this.setText("");
	                } else {
	                    this.setValue(n);
	                    this.setText(n);
	                }
	            }
	            if (j != this.getValue()) {
	                var g = this;
	                g._OnValueChanged();
	            }
	        }
	    },
	    setAjaxData: function(a) {
	        this.ajaxData = a;
	        this._listbox.setAjaxData(a);
	    },
	    setAjaxType: function(a) {
	        this.ajaxType = a;
	        this._listbox.setAjaxType(a);
	    },
	    getAttrs: function(b) {
	        var m = kitui.ComboBox.superclass.getAttrs.call(this, b);
	        //kitui._ParseString(b, m, [ "url", "data", "textField", "valueField", "displayField", "nullItemText", "ondrawcell", "onbeforeload", "onload", "onloaderror", "onitemclick" ]);
	        //kitui._ParseBool(b, m, [ "multiSelect", "showNullItem", "valueFromSelect" ]);
	        if (m.displayField) {
	            m.textField = m.displayField;
	        }
	        var n = m.valueField || this.valueField;
	        var d = m.textField || this.textField;
	        if (b.nodeName.toLowerCase() == "select") {
	            var f = [];
	            for (var g = 0, e = b.length; g < e; g++) {
	                var h = b.options[g];
	                var a = {};
	                a[d] = h.text;
	                a[n] = h.value;
	                f.push(a);
	            }
	            if (f.length > 0) {
	                m.data = f;
	            }
	        } else {
	            var j = kitui.getChildNodes(b);
	            for (var g = 0, e = j.length; g < e; g++) {
	                var c = j[g];
	                var k = jQuery(c).attr("property");
	                if (!k) {
	                    continue;
	                }
	                k = k.toLowerCase();
	                if (k == "columns") {
	                    m.columns = kitui._ParseColumns(c);
	                } else {
	                    if (k == "data") {
	                        m.data = c.innerHTML;
	                    }
	                }
	            }
	        }
	        return m;
	    }
	});
	
	kitui.regClass(kitui.ComboBox, "combobox");	
})(jQuery);
///<jscompress sourcefile="jquery.pager.js" />
(function($) {

	kitui.Pager = function() {
	    kitui.Pager.superclass.constructor.apply(this, arguments);
	};
	
	kitui.extend(kitui.Pager, kitui.Control, {
	    pageIndex: 0,
	    pageSize: 10,
	    totalCount: 0,
	    totalPage: 0,
	    showPageIndex: true,
	    showPageSize: true,
	    showTotalCount: true,
	    showPageInfo: true,
	    showReloadButton: true,
	    showFilterButton: false,
	    showExpButton:true,
	    _clearBorder: false,
	    showButtonText: false,
	    showButtonIcon: true,
	    sizeText: "",
	    firstText: "首页",
	    prevText: "上一页",
	    nextText: "下一页",
	    lastText: "尾页",
	    reloadText: "刷新",
	    pageInfoText: "每页 {0} 条,共 {1} 条",
	    sizeList: [ 10, 20, 50, 100 ],
	    uiCls: "kitui-pager",
	    pageSizeWidth: 50,
	    pgrid:""
	});
	
	kitui.copyTo(kitui.Pager.prototype, {
	    getAttrs: function(el) {
	        var attrs = kitui.Pager.superclass.getAttrs.call(this, el);
	        kitui._ParseString(el, attrs, [ "onpagechanged", "sizeList", "onbeforepagechanged", "buttons", "sizeText" ]);
	        kitui._ParseBool(el, attrs, [ "showPageIndex", "showPageSize", "showTotalCount", "showPageInfo", "showReloadButton", "showButtonText", "showButtonIcon","showFilterButton","showExpButton" ]);
	        kitui._ParseInt(el, attrs, [ "pageIndex", "pageSize", "totalCount", "pageSizeWidth" ]);
	        if ("string" == typeof attrs.sizeList) {
	            attrs.sizeList = eval(attrs.sizeList);
	        }
	        if (attrs.buttons) {
	            attrs.buttons = kitui.byId(attrs.buttons);
	        }
	        return attrs;
	    },
	    onPageChanged: function(e, t) {
	        this.on("pagechanged", e, t);
	    },
	    _OnPageChanged: function(e, t) {
	        var i = {
	            pageIndex: kitui.isNumber(e) ? e : this.pageIndex,
	            pageSize: kitui.isNumber(t) ? t : this.pageSize,
	            cancel: false
	        };
	        if (i.pageIndex > this.totalPage - 1) {
	            i.pageIndex = this.totalPage - 1;
	        }
	        if (i.pageIndex < 0) {
	            i.pageIndex = 0;
	        }
	        this.fire("beforepagechanged", i);
	        if (true == i.cancel) {
	            return;
	        }
	        this.fire("pagechanged", i);
	        this.update(i.pageIndex, i.pageSize);
	    },
	    _OnFilter: function(e) {
	        e.fire("filter", e);
	    },	    
	    __OnPageSelectChanged: function() {
	        var a = parseInt(this.sizeCombo.getValue()||this.sizeCombo.getText());
	        this._OnPageChanged(0, a);
	    },
	    update: function(e, t, i) {
	        if (kitui.isNumber(e)) {
	            this.pageIndex = parseInt(e);
	        }
	        if (kitui.isNumber(t)) {
	            this.pageSize = parseInt(t);
	        }
	        if (kitui.isNumber(i)) {
	            this.totalCount = parseInt(i);
	        }
	        this.totalPage = parseInt(this.totalCount / this.pageSize) + 1;
	        if ((this.totalPage - 1) * this.pageSize == this.totalCount) {
	            this.totalPage -= 1;
	        }
	        if (0 == this.totalCount) {
	            this.totalPage = 0;
	        }
	        if (this.pageIndex > this.totalPage - 1) {
	            this.pageIndex = this.totalPage - 1;
	        }
	        if (this.pageIndex <= 0) {
	            this.pageIndex = 0;
	        }
	        if (this.totalPage <= 0) {
	            this.totalPage = 0;
	        }
	        this.firstButton.enable();
	        this.prevButton.enable();
	        this.nextButton.enable();
	        this.lastButton.enable();
	        if (0 == this.pageIndex) {
	            this.firstButton.disable();
	            this.prevButton.disable();
	        }
	        if (this.pageIndex >= this.totalPage - 1) {
	            this.nextButton.disable();
	            this.lastButton.disable();
	        }
	        var n = this.pageIndex > -1 ? this.pageIndex + 1 : 0;
	        if (0 == this.totalCount) {
	            n = 0;
	        }
	        this.numInput.value = n;
	        this.pagesLabel.innerHTML = "/ " + this.totalPage;
	        var s = this.sizeList.clone();
	        if (-1 == s.indexOf(this.pageSize)) {
	            s.push(this.pageSize);
	            s = s.sort(function(e, t) {
	                return e > t;
	            });
	        }
	        for (var o = [], r = 0, l = s.length; r < l; r++) {
	            var a = s[r], h = {};
	            h.text = a;
	            h.id = a;
	            o.push(h);
	        }
	        this.sizeCombo.setData(o);
	        this.sizeCombo.setValue(this.pageSize);
	        this.sizeTextEl.innerHTML = this.sizeText;
	        this.sizeTextEl.style.display = this.sizeText ? "" : "none";
	        var u = this.firstText, d = this.prevText, c = this.nextText, f = this.lastText, m = this.reloadText;
	        if (false == this.showButtonText) {
	            u = d = c = f = m = "";
	        }
	        this.firstButton.setText(u);
	        this.prevButton.setText(d);
	        this.nextButton.setText(c);
	        this.lastButton.setText(f);
	        this.reloadButton.setText(m);
	        u = this.firstText, d = this.prevText, c = this.nextText, f = this.lastText;
	        if (this.showButtonText) {
	            this.firstButton.setTooltip(u);
	            this.prevButton.setTooltip(d);
	            this.nextButton.setTooltip(c);
	            this.lastButton.setTooltip(f);
	            this.reloadButton.setTooltip(m);
	        }
	        this.firstButton.setIconCls(this.showButtonIcon ? "kitui-pager-first" : "");
	        this.prevButton.setIconCls(this.showButtonIcon ? "kitui-pager-prev" : "");
	        this.nextButton.setIconCls(this.showButtonIcon ? "kitui-pager-next" : "");
	        this.lastButton.setIconCls(this.showButtonIcon ? "kitui-pager-last" : "");
	        this.reloadButton.setIconCls(this.showButtonIcon ? "kitui-pager-reload" : "");
	        this.reloadButton.setVisible(this.showReloadButton);
	        this.filterButton.setIconCls(this.showButtonIcon ? "kitui-pager-filter" : "");
	        this.filterButton.setVisible(this.showFilterButton);       
	        this.expButton.setIconCls(this.showButtonIcon ? "kitui-pager-expData" : "");
	        this.expButton.setVisible(this.showExpButton); 
	        
	        var g = this.reloadButton.el.previousSibling;
	        if (g) {
	            g.style.display = this.showReloadButton ? "" : "none";
	        }
	        this._rightEl.innerHTML = String.format(this.pageInfoText, this.pageSize, this.totalCount);
	        this.indexEl.style.display = this.showPageIndex ? "" : "none";
	        this.sizeEl.style.display = this.showPageSize ? "" : "none";
	        this._rightEl.style.display = this.showPageInfo ? "" : "none";
	    },
	    getTotalPage: function() {
	        return this.totalPage;
	    },
	    getShowButtonIcon: function() {
	        return this.showButtonIcon;
	    },
	    setShowButtonIcon: function(e) {
	        this.showButtonIcon = e;
	        this.update();
	    },
	    getShowButtonText: function() {
	        return this.showButtonText;
	    },
	    setShowButtonText: function(e) {
	        this.showButtonText = e;
	        this.update();
	    },
	    getShowReloadButton: function() {
	        return this.showReloadButton;
	    },
	    setShowReloadButton: function(e) {
	        this.showReloadButton = e;
	        this.update();
	    },
	    getShowFilterButton: function() {
	        return this.showFilterButton;
	    },
	    setShowFilterButton: function(e) {
	        this.showFilterButton = e;
	        this.update();
	    },
	    getShowExpButton: function() {
	        return this.showExpButton;
	    },
	    setShowExpButton: function(e) {
	        this.showExpButton = e;
	        this.update();
	    },
	    getShowPageInfo: function() {
	        return this.showPageInfo;
	    },
	    setShowPageInfo: function(e) {
	        this.showPageInfo = e;
	        this.update();
	    },
	    getShowTotalCount: function() {
	        return this.showTotalCount;
	    },
	    setShowTotalCount: function(e) {
	        this.showTotalCount = e;
	        this.update();
	    },
	    getShowPageIndex: function() {
	        return this.showPageIndex;
	    },
	    setShowPageIndex: function(e) {
	        this.showPageIndex = e;
	        this.update();
	    },
	    getShowPageSize: function() {
	        return this.showPageSize;
	    },
	    setShowPageSize: function(e) {
	        this.showPageSize = e;
	        this.update();
	    },
	    getPageSizeWidth: function() {
	        return this.pageSizeWidth;
	    },
	    setPageSizeWidth: function(e) {
	        e = parseInt(e);
	        if (isNaN(e)) {
	            return;
	        }
	        if (this.pageSizeWidth != e) {
	            this.pageSizeWidth = e;
	            this.sizeCombo.setWidth(e);
	        }
	    },
	    getSizeList: function() {
	        return this.sizeList;
	    },
	    setSizeList: function(e) {
	        if (!kitui.isArray(e)) {
	            return;
	        }
	        this.sizeList = e;
	        this.update();
	    },
	    getTotalCount: function() {
	        return this.totalCount;
	    },
	    setTotalCount: function(e) {
	        e = parseInt(e);
	        if (isNaN(e)) {
	            return;
	        }
	        this.totalCount = e;
	        this.update();
	    },
	    getPageSize: function() {
	        return this.pageSize;
	    },
	    setPageSize: function(e) {
	        if (isNaN(e)) {
	            return;
	        }
	        this.pageSize = e;
	        this.update();
	    },
	    getPageIndex: function() {
	        return this.pageIndex;
	    },
	    setPageIndex: function(e) {
	        if (isNaN(e)) {
	            return;
	        }
	        this.pageIndex = e;
	        this.update();
	    },
	    doLayout: function() {
	        if (!this.canLayout()) {
	            return;
	        }
	        kitui.layout(this._leftEl);
	        kitui.layout(this._rightEl);
	    },
	    _initEvents: function() {
	        kitui.Pager.superclass._initEvents.call(this);
	        this.firstButton.on("click", function() {
	            this._OnPageChanged(0);
	        }, this);
	        this.prevButton.on("click", function() {
	            this._OnPageChanged(this.pageIndex - 1);
	        }, this);
	        this.nextButton.on("click", function() {
	            this._OnPageChanged(this.pageIndex + 1);
	        }, this);
	        this.lastButton.on("click", function() {
	            this._OnPageChanged(this.totalPage);
	        }, this);
	        this.reloadButton.on("click", function() {
	            this._OnPageChanged();
	        }, this);
	        this.filterButton.on("click", function() {
	        	this._OnFilter(this.pgrid)
	        }, this);
			this.expButton.on("click", function() {
	        	var gridObject = kitui.get(this.pgrid);
				if(typeof gridObject != "undefined"){ //判断对象是否存在
					gridObject.preExport();
				}
	        }, this);
	        function e() {
	            if (t) {
	                return;
	            }
	            t = true;
	            var e = parseInt(this.numInput.value);
	            if (isNaN(e)) {
	                this.update();
	            } else {
	                this._OnPageChanged(e - 1);
	            }
	            setTimeout(function() {
	                t = false;
	            }, 100);
	        }
	        var t = false;
	        kitui.on(this.numInput, "change", function() {
	            e.call(this);
	        }, this);
	        kitui.on(this.numInput, "keydown", function(t) {
	            if (13 == t.keyCode) {
	                e.call(this);
	                t.stopPropagation();
	            }
	        }, this);
	        this.sizeCombo.on("valuechanged", this.__OnPageSelectChanged, this);
	    },
	    getButtonsEl: function() {
	        return this.buttonsEl;
	    },
	    setButtons: function(e) {
	        __kitui_setControls(e, this.buttonsEl, this);
	    },
	    destroy: function(e) {
	        if (this.pageSelect) {
	            kitui.clearEvent(this.pageSelect);
	            this.pageSelect = null;
	        }
	        if (this.numInput) {
	            kitui.clearEvent(this.numInput);
	            this.numInput = null;
	        }
	        this.sizeEl = this.sizeTextEl = this._barEl = this._barEl2 = this._leftEl = this._rightEl = this.indexEl = this.buttonsEl = null;
	        kitui.Pager.superclass.destroy.call(this, e);
	    },
	    _create: function() {
	        this.el = document.createElement("div");
	        this.el.className = "kitui-pager";
	        var e = '<div class="kitui-pager-left"><table cellspacing="0" cellpadding="0" border="0"><tr><td></td><td></td></tr></table></div><div class="kitui-pager-right"></div>';
	        this.el.innerHTML = e;
	        this._leftEl = this.el.childNodes[0];
	        this._rightEl = this.el.childNodes[1];
	        var t = this._leftEl.getElementsByTagName("td");
	        this._barEl = t[0];
	        this._barEl2 = t[1];
	        this.sizeEl = kitui.append(this._barEl, '<span class="kitui-pager-size"></span>');
	        this.sizeTextEl = kitui.before(this.sizeEl, '<span class="kitui-pager-sizetext"></span>');
	        this.sizeCombo = new kitui.ComboBox();
	        this.sizeCombo.setName("pagesize");
	        this.sizeCombo.setAllowInput(true);	        
	        this.sizeCombo.setWidth(this.pageSizeWidth);
	        this.sizeCombo.render(this.sizeEl);
	        kitui.append(this.sizeEl, '<span class="separator"></span>');
	        this.firstButton = new kitui.Button();
	        this.firstButton.render(this._barEl);
	        this.prevButton = new kitui.Button();
	        this.prevButton.render(this._barEl);
	        this.indexEl = document.createElement("span");
	        this.indexEl.className = "kitui-pager-index";
	        this.indexEl.innerHTML = '<input id="" type="text" class="kitui-pager-num"/><span class="kitui-pager-pages">/ 0</span>';
	        this._barEl.appendChild(this.indexEl);
	        this.numInput = this.indexEl.firstChild;
	        this.pagesLabel = this.indexEl.lastChild;
	        this.nextButton = new kitui.Button();
	        this.nextButton.render(this._barEl);
	        this.lastButton = new kitui.Button();
	        this.lastButton.render(this._barEl);
	        kitui.append(this._barEl, '<span class="separator"></span>');
	        this.reloadButton = new kitui.Button();
	        this.reloadButton.render(this._barEl);
	        this.firstButton.setPlain(true);
	        this.prevButton.setPlain(true);
	        this.nextButton.setPlain(true);
	        this.lastButton.setPlain(true);
	        this.reloadButton.setPlain(true);

	        this.filterButton = new kitui.Button();
	        this.filterButton.render(this._barEl);      
	        this.filterButton.setPlain(true);
	        
	        this.expButton = new kitui.Button();
	        this.expButton.render(this._barEl);      
	        this.expButton.setPlain(true);
	        
	        this.buttonsEl = kitui.append(this._barEl2, '<div class="kitui-page-buttons"></div>');
	        this.update();
	    },
	    set: function(e) {
	        if ("string" == typeof e) {
	            return this;
	        }
	        var t = e.pageIndex;
	        delete e.pageIndex;
	        kitui.Pager.superclass.set.call(this, e);
	        if (!kitui.isNull(t)) {
	            this.setPageIndex(t);
	        }
	        return this;
	    }
	});
	
	kitui.regClass(kitui.Pager, "pager");
	
	})(jQuery);
///<jscompress sourcefile="jquery.datasource.js" />
(function($) {
	kitui.DataSource = function() {
	    kitui.DataSource.superclass.constructor.call(this);
	    this._init();
	};

	kitui.extend(kitui.DataSource, kitui.Component, {
	    idField: "id",
	    textField: "text",
	    _originalIdField: "_id",
	    _clearOriginals: true,
	    _autoCreateNewID: false,
	    _init: function() {
	        this.source = [];
	        this.dataview = [];
	        this.visibleRows = null;
	        this._ids = {};
	        this._removeds = [];
	        if (this._clearOriginals) {
	            this._originals = {};
	        }
	        this._errors = {};
	        this._selected = null;
	        this._selecteds = [];
	        this._idSelecteds = {};
	        this.__changeCount = 0;
	    },
	    getSource: function() {
	        return this.source.clone();
	    },
	    getList: function() {
	        return this.source.clone();
	    },
	    getDataView: function() {
	        return this.dataview;
	    },
	    getVisibleRows: function() {
	        if (!this.visibleRows) {
	            this.visibleRows = this.getDataView().clone();
	        }
	        return this.visibleRows;
	    },
	    setData: function(a) {
	        this.loadData(a);
	    },
	    loadData: function(a) {
	        if (!kitui.isArray(a)) {
	            a = [];
	        }
	        this._init();
	        this._doLoadData(a);
	        this._dataChanged();
	        this.fire("loaddata");
	        return true;
	    },
	    _doLoadData: function(f) {
	        this.source = f;
	        this.dataview = f;
	        var e = this.source, d = this._ids;
	        for (var c = 0, b = e.length; c < b; c++) {
	            var a = e[c];
	            a._id = kitui.DataSource.RecordId++;
	            d[a._id] = a;
	            a._uid = a._id;
	        }
	    },
	    clearData: function() {
	        this._init();
	        this._dataChanged();
	        this.fire("cleardata");
	    },
	    clear: function() {
	        this.clearData();
	    },
	    updateRecord: function(e, t, i) {
	        if (kitui.isNull(e)) {
	            return;
	        }
	        var n = kitui._getMap, s = kitui._setMap;
	        this.fire("beforeupdate", {
	            record: e
	        });
	        if ("string" == typeof t) {
	            var o = n(t, e);
	            if (kitui.isEquals(o, i)) {
	                return false;
	            }
	            this.beginChange();
	            s(t, i, e);
	            this._setModified(e, t, o);
	            this.endChange();
	        } else {
	            this.beginChange();
	            for (var r in t) {
	                var o = n(r, e), i = t[r];
	                if (kitui.isEquals(o, i)) {
	                    continue;
	                }
	                s(r, i, e);
	                this._setModified(e, r, o);
	            }
	            this.endChange("update");
	        }
	        this.fire("update", {
	            record: e
	        });
	    },
	    deleteRecord: function(a) {
	        this._setDeleted(a);
	        this._dataChanged();
	        this.fire("delete", {
	            record: a
	        });
	    },
	    getby_id: function(a) {
	        a = typeof a == "object" ? a._id : a;
	        return this._ids[a];
	    },
	    getbyId: function(f) {
	        var c = typeof f;
	        if (c == "number") {
	            return this.getAt(f);
	        }
	        if (typeof f == "object") {
	            return f;
	        }
	        var d = this.getList();
	        for (var b = 0, a = d.length; b < a; b++) {
	            var e = d[b];
	            if (e[this.idField] == f) {
	                return e;
	            }
	        }
	        return null;
	    },
	    getsByIds: function(f) {
	        if (kitui.isNull(f)) {
	            f = "";
	        }
	        f = String(f);
	        var b = [];
	        var d = String(f).split(",");
	        for (var c = 0, a = d.length; c < a; c++) {
	            var e = this.getbyId(d[c]);
	            if (e) {
	                b.push(e);
	            }
	        }
	        return b;
	    },
	    getRecord: function(a) {
	        return this.getRow(a);
	    },
	    getRow: function(a) {
	        var b = typeof a;
	        if (b == "string") {
	            return this.getbyId(a);
	        } else {
	            if (b == "number") {
	                return this.getAt(a);
	            } else {
	                if (b == "object") {
	                    return a;
	                }
	            }
	        }
	    },
	    delimiter: ",",
	    getValueAndText: function(e, d) {
	        if (kitui.isNull(e)) {
	            e = [];
	        }
	        d = d || this.delimiter;
	        if (typeof e == "string") {
	            e = this.getsByIds(e);
	        } else {
	            if (!kitui.isArray(e)) {
	                e = [ e ];
	            }
	        }
	        var c = [];
	        var g = [];
	        for (var f = 0, b = e.length; f < b; f++) {
	            var a = e[f];
	            if (a) {
	                c.push(this.getItemValue(a));
	                g.push(this.getItemText(a));
	            }
	        }
	        return [ c.join(d), g.join(d) ];
	    },
	    getItemValue: function(b) {
	        if (!b) {
	            return "";
	        }
	        var a = kitui._getMap(this.idField, b);
	        return kitui.isNull(a) ? "" : String(a);
	    },
	    getItemText: function(b) {
	        if (!b) {
	            return "";
	        }
	        var a = kitui._getMap(this.textField, b);
	        return kitui.isNull(a) ? "" : String(a);
	    },
	    isModified: function(a, c) {
	        var b = this._originals[a[this._originalIdField]];
	        if (!b) {
	            return false;
	        }
	        if (kitui.isNull(c)) {
	            return false;
	        }
	        return b.hasOwnProperty(c);
	    },
	    hasRecord: function(a) {
	        return !!this.getby_id(a);
	    },
	    findRecords: function(k, j) {
	        var g = typeof k == "function";
	        var h = k;
	        var m = j || this;
	        var d = this.source;
	        var b = [];
	        for (var e = 0, c = d.length; e < c; e++) {
	            var a = d[e];
	            if (g) {
	                var f = h.call(m, a);
	                if (f == true) {
	                    b[b.length] = a;
	                }
	                if (f === 1) {
	                    break;
	                }
	            } else {
	                if (a[k] == j) {
	                    b[b.length] = a;
	                }
	            }
	        }
	        return b;
	    },
	    findRecord: function(c, b) {
	        var a = this.findRecords(c, b);
	        return a[0];
	    },
	    each: function(b, a) {
	        var c = this.getDataView().clone();
	        a = a || this;
	        kitui.forEach(c, b, a);
	    },
	    getCount: function() {
	        return this.getDataView().length;
	    },
	    setIdField: function(a) {
	        this.idField = a;
	    },
	    setTextField: function(a) {
	        this.textField = a;
	    },
	    __changeCount: 0,
	    beginChange: function() {
	        this.__changeCount++;
	    },
	    endChange: function(a) {
	        this.__changeCount--;
	        if (this.__changeCount < 0) {
	            this.__changeCount = 0;
	        }
	        if (a !== false && this.__changeCount == 0 || a == true) {
	            this.__changeCount = 0;
	            this._dataChanged();
	        }
	    },
	    _dataChanged: function() {
	        this.visibleRows = null;
	        if (this.__changeCount == 0) {
	            this.fire("datachanged");
	        }
	    },
	    _setAdded: function(a) {
	        a._id = kitui.DataSource.RecordId++;
	        if (this._autoCreateNewID && !a[this.idField]) {
	            a[this.idField] = UUID();
	        }
	        a._uid = a._id;
	        a._state = "added";
	        this._ids[a._id] = a;
	        delete this._originals[a[this._originalIdField]];
	    },
	    _setModified: function(a, d, b) {
	        if (a._state != "added" && a._state != "deleted" && a._state != "removed") {
	            a._state = "modified";
	            var c = this._getOriginal(a);
	            if (!c.hasOwnProperty(d)) {
	                c[d] = b;
	            }
	        }
	    },
	    _setDeleted: function(a) {
	        if (a._state != "added" && a._state != "deleted" && a._state != "removed") {
	            a._state = "deleted";
	        }
	    },
	    _setRemoved: function(a) {
	        delete this._ids[a._id];
	        if (a._state != "added" && a._state != "removed") {
	            a._state = "removed";
	            delete this._originals[a[this._originalIdField]];
	            this._removeds.push(a);
	        }
	    },
	    _getOriginal: function(a) {
	        var b = a[this._originalIdField];
	        var c = this._originals[b];
	        if (!c) {
	            c = this._originals[b] = {};
	        }
	        return c;
	    },
	    _selected: null,
	    _selecteds: [],
	    _idSelecteds: null,
	    multiSelect: false,
	    isSelected: function(a) {
	        if (!a) {
	            return false;
	        }
	        if (typeof a != "string") {
	            a = a._id;
	        }
	        return !!this._idSelecteds[a];
	    },
	    setSelected: function(a) {
	        a = this.getby_id(a);
	        var b = this.getSelected();
	        if (b != a) {
	            this._selected = a;
	            if (a) {
	                this.select(a);
	            } else {
	                this.deselect(this.getSelected());
	            }
	            this._OnCurrentChanged(a);
	        }
	    },
	    getSelected: function() {
	        if (this.isSelected(this._selected)) {
	            return this._selected;
	        }
	        return this._selecteds[0];
	    },
	    setCurrent: function(a) {
	        this.setSelected(a);
	    },
	    getCurrent: function() {
	        return this.getSelected();
	    },
	    getSelecteds: function() {
	        return this._selecteds.clone();
	    },
	    select: function(a) {
	        if (kitui.isNull(a)) {
	            return;
	        }
	        this.selects([ a ]);
	    },
	    deselect: function(a) {
	        if (kitui.isNull(a)) {
	            return;
	        }
	        this.deselects([ a ]);
	    },
	    selectAll: function() {
	        this.selects(this.getList());
	    },
	    deselectAll: function() {
	        this.deselects(this.getList());
	    },
	    selects: function(c) {
	        if (!kitui.isArray(c)) {
	            return;
	        }
	        c = c.clone();
	        if (this.multiSelect == false) {
	            this.deselects(this.getSelecteds());
	            if (c.length > 0) {
	                c.length = 1;
	            }
	            this._selecteds = [];
	            this._idSelecteds = {};
	        }
	        var e = [];
	        for (var d = 0, b = c.length; d < b; d++) {
	            var a = this.getbyId(c[d]);
	            if (!a) {
	                continue;
	            }
	            if (!this.isSelected(a)) {
	                this._selecteds.push(a);
	                this._idSelecteds[a._id] = a;
	                e.push(a);
	            }
	        }
	        this._OnSelectionChanged(c, true, e);
	    },
	    deselects: function(b) {
	        if (!kitui.isArray(b)) {
	            return;
	        }
	        b = b.clone();
	        var d = [];
	        for (var c = b.length - 1; c >= 0; c--) {
	            var a = this.getbyId(b[c]);
	            if (!a) {
	                continue;
	            }
	            if (this.isSelected(a)) {
	                this._selecteds.remove(a);
	                delete this._idSelecteds[a._id];
	                d.push(a);
	            }
	        }
	        this._OnSelectionChanged(b, false, d);
	    },
	    _OnSelectionChanged: function(b, a, g) {
	        var f = {
	            records: b,
	            select: a,
	            selected: this.getSelected(),
	            selecteds: this.getSelecteds(),
	            _records: g
	        };
	        this.fire("SelectionChanged", f);
	        var d = this._current;
	        var c = this.getCurrent();
	        if (d != c) {
	            this._current = c;
	            this._OnCurrentChanged(c);
	        }
	    },
	    _OnCurrentChanged: function(a) {
	        if (this._currentTimer) {
	            clearTimeout(this._currentTimer);
	        }
	        var b = this;
	        this._currentTimer = setTimeout(function() {
	            b._currentTimer = null;
	            var c = {
	                record: a
	            };
	            b.fire("CurrentChanged", c);
	        }, 1);
	    },
	    _checkSelecteds: function() {
	        for (var b = this._selecteds.length - 1; b >= 0; b--) {
	            var a = this._selecteds[b];
	            var c = this.getby_id(a._id);
	            if (!c) {
	                this._selecteds.removeAt(b);
	                delete this._idSelecteds[a._id];
	            }
	        }
	        if (this._selected && this.getby_id(this._selected._id) == null) {
	            this._selected = null;
	        }
	    },
	    setMultiSelect: function(a) {
	        if (this.multiSelect != a) {
	            this.multiSelect = a;
	            if (a == false) {}
	        }
	    },
	    getMultiSelect: function() {
	        return this.multiSelect;
	    },
	    selectPrev: function() {
	        var a = this.getSelected();
	        if (!a) {
	            a = this.getAt(0);
	        } else {
	            var b = this.indexOf(a);
	            a = this.getAt(b - 1);
	        }
	        if (a) {
	            this.deselectAll();
	            this.select(a);
	            this.setCurrent(a);
	        }
	    },
	    selectNext: function() {
	        var a = this.getSelected();
	        if (!a) {
	            a = this.getAt(0);
	        } else {
	            var b = this.indexOf(a);
	            a = this.getAt(b + 1);
	        }
	        if (a) {
	            this.deselectAll();
	            this.select(a);
	            this.setCurrent(a);
	        }
	    },
	    selectFirst: function() {
	        var a = this.getAt(0);
	        if (a) {
	            this.deselectAll();
	            this.select(a);
	            this.setCurrent(a);
	        }
	    },
	    selectLast: function() {
	        var b = this.getVisibleRows();
	        var a = this.getAt(b.length - 1);
	        if (a) {
	            this.deselectAll();
	            this.select(a);
	            this.setCurrent(a);
	        }
	    },
	    getSelectedsId: function(b) {
	        var a = this.getSelecteds();
	        var c = this.getValueAndText(a, b);
	        return c[0];
	    },
	    getSelectedsText: function(b) {
	        var a = this.getSelecteds();
	        var c = this.getValueAndText(a, b);
	        return c[1];
	    },
	    _filterInfo: null,
	    _sortInfo: null,
	    filter: function(b, a) {
	        if (typeof b != "function") {
	            return;
	        }
	        a = a || this;
	        this._filterInfo = [ b, a ];
	        this._doFilter();
	        this._doSort();
	        this._dataChanged();
	        this.fire("filter");
	    },
	    clearFilter: function() {
	        if (!this._filterInfo) {
	            return;
	        }
	        this._filterInfo = null;
	        this._doFilter();
	        this._doSort();
	        this._dataChanged();
	        this.fire("filter");
	    },
	    sort: function(c, b, a) {
	        if (typeof c != "function") {
	            return;
	        }
	        b = b || this;
	        this._sortInfo = [ c, b, a ];
	        this._doSort();
	        this._dataChanged();
	        this.fire("sort");
	    },
	    clearSort: function() {
	        this._sortInfo = null;
	        this.sortField = this.sortOrder = null;
	        this._doFilter();
	        this._dataChanged();
	        this.fire("filter");
	    },
	    _doClientSortField: function(b, d, a) {
	        var e = this._getSortFnByField(b, a);
	        if (!e) {
	            return;
	        }
	        this.sortField = b;
	        this.sortOrder = d;
	        var c = d == "desc";
	        this.sort(e, this, c);
	    },
	    _getSortFnByField: function(c, d) {
	        if (!c) {
	            return null;
	        }
	        var b = null;
	        var a = kitui.sortTypes[d];
	        if (!a) {
	            a = kitui.sortTypes.string;
	        }
	        function e(h, f) {
	            var g = kitui._getMap(c, h), i = kitui._getMap(c, f);
	            var k = kitui.isNull(g) || g === "";
	            var j = kitui.isNull(i) || i === "";
	            if (k) {
	                return -1;
	            }
	            if (j) {
	                return 1;
	            }
	            var m = a(g);
	            var l = a(i);
	            if (m > l) {
	                return 1;
	            } else {
	                if (m == l) {
	                    return 0;
	                } else {
	                    return -1;
	                }
	            }
	        }
	        b = e;
	        return b;
	    },
	    ajaxOptions: null,
	    autoLoad: false,
	    url: "",
	    ds : "",
	    pageSize: 10,
	    pageIndex: 0,
	    totalCount: 0,
	    totalPage: 0,
	    sortField: "",
	    sortOrder: "",
	    //showPager:true,
	    loadParams: {},
	    staticParams: {},
	    getLoadParams: function() {
	        return this.loadParams || {};
	    },
	    setLoadParams:function(loadparams){
 			if(loadparams){
 				if(typeof loadparams=="string")
 					this.loadParams=kitui.decode(loadparams);
 				else
 					this.loadParams=loadparams
 				this.staticParams = this.loadParams;
 			}
	    },    
	    sortMode: "client",
	    pageIndexField: "pageIndex",
	    pageSizeField: "pageSize",
	    sortFieldField: "sortField",
	    sortOrderField: "sortOrder",
	    totalField: "total",
	    dataField: "data",
	    load: function(param, sucfun, errfun, completefun) {
	        if (typeof param == "string") {
	            this.setUrl(param);
	            return;
	        }
	      
	        this.loadParams = kitui.copyIf( param || {},this.staticParams);
	        //this.loadParams = param || {};
	        if(this.ds){
		    	this.loadDataset = kitui.decode(this.ds);
		    	this.loadDataset.setControl(this);
				var sf = this;
				if(this.loadDataset){
					if(this.showPager){
						if (kitui.isNull(this.loadParams.pageIndex)) {
				            this.loadParams.pageIndex = 0;
				        }
				        if (kitui.isNull(this.loadParams.pageSize)) {
				           this.loadParams.pageSize = this.pageSize;
				        }	 
					}
					this.loadDataset._load(this.loadParams,function(data){
						  sf._loadDataSetCallback(data,sf.loadParams,sucfun);
					})				
				}
				return;	        	
	        }
	        if (this._loadTimer) {
	            clearTimeout(this._loadTimer);
	        }
	        if (this.ajaxAsync) {
	            var sf = this;
	            this._loadTimer = setTimeout(function() {
	                sf._doLoadAjax(sf.loadParams, sucfun, errfun, completefun);
	                sf._loadTimer = null;
	            }, 1);
	        } else {
	            this._doLoadAjax(this.loadParams, sucfun, errfun, completefun);
	        }
	    },
	    reload: function(sucfun, errfun, completefun) {
	        this.load(this.loadParams, sucfun, errfun, completefun);
	    },
	    gotoPage: function(a, b) {
	        var param = this.loadParams || {};
	        if (kitui.isNumber(a)) {
	            param.pageIndex = a;
	        }
	        if (kitui.isNumber(b)) {
	            param.pageSize = b;
	        }
	        this.load(param);
	    },
	    sortBy: function(a, b) {
	        this.sortField = a;
	        this.sortOrder = b == "asc" ? "asc" : "desc";
	        if (this.sortMode == "server") {
	            var c = this.getLoadParams();
	            c.sortField = a;
	            c.sortOrder = b;
	            c.pageIndex = this.pageIndex;
	            this.load(c);
	        } else {}
	    },
	    setSortField: function(a) {
	        this.sortField = a;
	        if (this.sortMode == "server") {
	            var b = this.getLoadParams();
	            b.sortField = a;
	        }
	    },
	    setSortOrder: function(a) {
	        this.sortOrder = a;
	        if (this.sortMode == "server") {
	            var b = this.getLoadParams();
	            b.sortOrder = a;
	        }
	    },
	    checkSelectOnLoad: true,
	    selectOnLoad: false,
	    ajaxData: null,
	    ajaxAsync: true,
	    ajaxType: "",
	    loadSuccess:function(t, u, s,j,d,i,m) {
	                var e = null;
	                try {
	                    e = kitui.decode(t);
	                } catch (n) {
	                    if (kitui_debugger == true) {
	                        //alert(n + "\n json is error.");
	                    }
	                }
	                if (e && !kitui.isArray(e)) {
	                    e.total = parseInt(kitui._getMap(j.totalField, e));
	                    e.data = kitui._getMap(j.dataField, e);
	                } else {
	                    if (e == null) {
	                        e = {};
	                        e.data = [];
	                        e.total = 0;
	                    } else {
	                        if (kitui.isArray(e)) {
	                            var p = {};
	                            p.data = e;
	                            p.total = e.length;
	                            e = p;
	                        }
	                    }
	                }
	             
	                if (!e.data) {
	                    e.data = [];
	                }
	                if (!e.total) {
	                    e.total = 0;
	                }
	     
	                j._resultObject = e;
	            
	                if (!kitui.isArray(e.data)) {
	                
	                    e.data = [ e.data ];
	                }      
	                var n = {
	                    xhr: s,
	                    text: t,
	                    textStatus: u,
	                    result: e,
	                    code:e.code,
	                    msg :e.msg,
	                    total: e.total,
	                    data: e.data.clone(),
	                    pageIndex: d[j.pageIndexField],
	                    pageSize: d[j.pageSizeField]
	                };
	                if (kitui.isNumber(e.error) && e.error != 0) {
	                    n.textStatus = "servererror";
	                    n.errorCode = e.error;
	                    n.stackTrace = e.stackTrace;
	                    n.errorMsg = e.errorMsg;
	                    if (kitui_debugger == true) {
	                        alert(a + "\n" + n.textStatus + "\n" + n.stackTrace);
	                    }
	                    j.fire("loaderror", n);
	                    if (l) {
	                        l.call(j, n);
	                    }
	                } else {
	                    if (i) {
	                        i(n);
	                    } else {
	                        j.pageIndex = n.pageIndex;
	                        j.pageSize = n.pageSize;
	                        j.setTotalCount(n.total);
	                        j._OnPreLoad(n);
	                        j.setData(n.data);
	                        if (j._selectedValue && j.checkSelectOnLoad) {
	                            var q = j.getbyId(j._selectedValue);
	                            if (q) {
	                                j.select(q);
	                            }
	                        }
	                        if (j.getSelected() == null && j.selectOnLoad && j.getDataView().length > 0) {
	                            j.select(0);
	                        }
	                        j.fire("load", n);
	                        if (m) {
	                            m.call(j, n);
	                        }
	                    }
	                }
	            },
	    _doLoadAjax: function(d, m, l, b, i) {
	        d = d || {};
	        if (kitui.isNull(d.pageIndex)) {
	            d.pageIndex = 0;
	        }
	        if (kitui.isNull(d.pageSize)) {
	            d.pageSize = this.pageSize;
	        }
	        d.sortField = this.sortField;
	        d.sortOrder = this.sortOrder;
	        this.loadParams = d;
	        var a = this._evalUrl();
	     
	        var k = this._evalType(a);
	        var h = {
	            url: a,
	            async: this.ajaxAsync,
	            type: k,
	            data: d,
	            params: d,
	            cache: false,
	            cancel: false
	        };
	     
	       
	        if (h.data != h.params && h.params != d) {
	            h.data = h.params;
	        }
	        var g = kitui._evalAjaxData(this.ajaxData, this);
	        kitui.copyTo(h.data, g);
	        kitui.copyTo(h, this.ajaxOptions);
	        this._OnBeforeLoad(h);
	        if (h.cancel == true) {
	            d.pageIndex = this.getPageIndex();
	            d.pageSize = this.getPageSize();
	            return;
	        }
	        var c = {};
	        c[this.pageIndexField] = d.pageIndex;
	        c[this.pageSizeField] = d.pageSize;
	        if (d.sortField) {
	            c[this.sortFieldField] = d.sortField;
	        }
	        if (d.sortOrder) {
	            c[this.sortOrderField] = d.sortOrder;
	        }
	       
	        kitui.copyTo(d, c);
	        var f = this.getSelected();
	        this._selectedValue = f ? f[this.idField] : null;
	        var j = this;
	        j._resultObject = null;
	        kitui.copyTo(h, {
	        	success:function(t,u,s){
	        		j.loadSuccess(t,u,s,j,d,i,m);
	        	},
//	            success: function(t, u, s) {
//	                var e = null;
//	                try {
//	                    e = kitui.decode(t);
//	                } catch (n) {
//	                    if (kitui_debugger == true) {
//	                        alert(a + "\n json is error.");
//	                    }
//	                }
//	                if (e && !kitui.isArray(e)) {
//	                    e.total = parseInt(kitui._getMap(j.totalField, e));
//	                    e.data = kitui._getMap(j.dataField, e);
//	                } else {
//	                    if (e == null) {
//	                        e = {};
//	                        e.data = [];
//	                        e.total = 0;
//	                    } else {
//	                        if (kitui.isArray(e)) {
//	                            var p = {};
//	                            p.data = e;
//	                            p.total = e.length;
//	                            e = p;
//	                        }
//	                    }
//	                }
//	                if (!e.data) {
//	                    e.data = [];
//	                }
//	                if (!e.total) {
//	                    e.total = 0;
//	                }
//	                j._resultObject = e;
//	                if (!kitui.isArray(e.data)) {
//	                
//	                    e.data = [ e.data ];
//	                }
//	                var n = {
//	                    xhr: s,
//	                    text: t,
//	                    textStatus: u,
//	                    result: e,
//	                    total: e.total,
//	                    data: e.data.clone(),
//	                    pageIndex: d[j.pageIndexField],
//	                    pageSize: d[j.pageSizeField]
//	                };
//	                if (kitui.isNumber(e.error) && e.error != 0) {
//	                    n.textStatus = "servererror";
//	                    n.errorCode = e.error;
//	                    n.stackTrace = e.stackTrace;
//	                    n.errorMsg = e.errorMsg;
//	                    if (kitui_debugger == true) {
//	                        alert(a + "\n" + n.textStatus + "\n" + n.stackTrace);
//	                    }
//	                    j.fire("loaderror", n);
//	                    if (l) {
//	                        l.call(j, n);
//	                    }
//	                } else {
//	                    if (i) {
//	                        i(n);
//	                    } else {
//	                        j.pageIndex = n.pageIndex;
//	                        j.pageSize = n.pageSize;
//	                        j.setTotalCount(n.total);
//	                        j._OnPreLoad(n);
//	                        j.setData(n.data);
//	                        if (j._selectedValue && j.checkSelectOnLoad) {
//	                            var q = j.getbyId(j._selectedValue);
//	                            if (q) {
//	                                j.select(q);
//	                            }
//	                        }
//	                        if (j.getSelected() == null && j.selectOnLoad && j.getDataView().length > 0) {
//	                            j.select(0);
//	                        }
//	                        j.fire("load", n);
//	                        if (m) {
//	                            m.call(j, n);
//	                        }
//	                    }
//	                }
//	            },
	            error: function(o, p, n) {
	                var e = {
	                    xhr: o,
	                    text: o.responseText,
	                    textStatus: p
	                };
	                e.errorMsg = o.responseText;
	                e.errorCode = o.status;
	                if (kitui_debugger == true) {
	                    alert(a + "\n" + e.errorCode + "\n" + e.errorMsg);
	                }
	                j.fire("loaderror", e);
	                if (l) {
	                    l.call(j, e);
	                }
	            },
	            complete: function(n, o) {
	                var e = {
	                    xhr: n,
	                    text: n.responseText,
	                    textStatus: o
	                };
	                j.fire("loadcomplete", e);
	                if (b) {
	                    b.call(j, e);
	                }
	                j._xhr = null;
	            }
	        });
	        if (this._xhr) {}
	 
	        this._xhr = kitui.ajax(h);
	    },
	    _OnBeforeLoad: function(a) {
	        this.fire("beforeload", a);
	    },
	    _OnPreLoad: function(a) {
	        this.fire("preload", a);
	    },
	    _evalUrl: function() {
	        var url = this.url;
	        if (typeof url == "function") {
	            url = url();
	        } else {
	            try {
	                url = eval(url);
	            } catch (ex) {
	                url = this.url;
	            }
	            if (!url) {
	                url = this.url;
	            }
	        }
	        return url;
	    },
	    _evalType: function(a) {
	        var b = this.ajaxType;
	        if (!b) {
	            b = "post";
	            if (a) {
	                if (a.indexOf(".txt") != -1 || a.indexOf(".json") != -1) {
	                    b = "get";
	                }
	            } else {
	                b = "get";
	            }
	        }
	        return b;
	    },
	    setSortMode: function(a) {
	        this.sortMode = a;
	    },
	    getSortMode: function() {
	        return this.sortMode;
	    },
	    setAjaxOptions: function(a) {
	        this.ajaxOptions = a;
	    },
	    getAjaxOptions: function() {
	        return this.ajaxOptions;
	    },
	    setAutoLoad: function(a) {
	        this.autoLoad = a;
	    },
	    getAutoLoad: function() {
	        return this.autoLoad;
	    },
	    setUrl: function(a) {
	        this.url = a;
	        if (this.autoLoad) {
	            this.load();
	        }
	    },
	    getUrl: function() {
	        return this.url;
	    },
	    setLoadDataset : function(ds,params){
	    	this.ds = ds;
	    	this.loadDataset = kitui.decode(ds);
	    	this.loadDataset.setControl(this);
	    	this.loadParams = kitui.copyIf(params||{},this.staticParams);
			var sf = this;
			if(this.loadDataset&&this.autoLoad){
				if(this.showPager){
					if (kitui.isNull(this.loadParams.pageIndex)) {
				            this.loadParams.pageIndex = 0;
				        }
				        if (kitui.isNull(this.loadParams.pageSize)) {
				           this.loadParams.pageSize = this.pageSize;
				    }
				}
				this.loadDataset._load(this.loadParams,function(data){
					  sf._loadDataSetCallback(data,this.loadParams);
					
				})				
			}
	    },
		_loadDataSetCallback : function(data,params,succFun){
//			this.fire("preload", data);
//	        this.pageIndex = data.pageIndex;
//	        this.pageSize = data.pageSize;
//	        this.setTotalCount(data.total);
//	        this.setData(data.data);
//            this.fire("load");
			params = params||{};
          	this.loadSuccess(data,null,null,this,params,null,succFun);
		},		    
	    setPageIndex: function(a) {
	        this.pageIndex = a;
	        this.fire("pageinfochanged");
	    },
	    getPageIndex: function() {
	        return this.pageIndex;
	    },
	    setPageSize: function(a) {
	        this.pageSize = a;
	        this.fire("pageinfochanged");
	    },
	    getPageSize: function() {
	        return this.pageSize;
	    },
	    setTotalCount: function(a) {
	        this.totalCount = a;
	        this.fire("pageinfochanged");
	    },
	    setShowPager: function(a) {
	        this.showPager = a;
	    },	    
	    getTotalCount: function() {
	        return this.totalCount;
	    },
	    getTotalPage: function() {
	        return this.totalPage;
	    },
	    setCheckSelectOnLoad: function(a) {
	        this.checkSelectOnLoad = a;
	    },
	    getCheckSelectOnLoad: function() {
	        return this.checkSelectOnLoad;
	    },
	    setSelectOnLoad: function(a) {
	        this.selectOnLoad = a;
	    },
	    getSelectOnLoad: function() {
	        return this.selectOnLoad;
	    }
	});

	kitui.DataSource.RecordId = 1;
	
	
})(jQuery);

kitui.copyTo(kitui.DataSource.prototype, {
	exportData:function(cols,allpage,conO){
		if(allpage){
			allpage=1;
		}
        if(this.ds){
	    	this.loadDataset = kitui.decode(this.ds);
	    	this.loadDataset.setControl(this);
	    	//this.loadParams = {};
			var sf = this;
			if(this.loadDataset){
				var as = new AppSubmit();
				as.setAction("tt_grid_export.do");
				if(allpage==1){
					delete this.loadParams.pageIndex
					delete this.loadParams.pageSize
				}
				if(conO == false){
					as.add("datas",kitui.encode(this.getSelecteds()));
					as.add("parameter",kitui.encode(this.loadParams));
				}else{
				//	var lparams = Object.assign(this.loadParams,conO);
					var lparams = _cloneObj(this.loadParams);
					as.add("parameter",kitui.encode(lparams));
				}
				as.add("parameter",kitui.encode(this.loadParams));
				as.add("cols",kitui.encode(cols));
				as.add("path",this.loadDataset.options.pagepath)
				as.add("dataset",this.loadDataset.options.dataset)
				as.add("action",this.loadDataset.options.action)
				as.add("datasourceName","")
				as.add("async","true")
				as.submitForm();
			}
			return;	        	
        }		
	},
	printData:function(cols,allpage){
		if(allpage){
			allpage=1;
		}
        if(this.ds){
	    	this.loadDataset = kitui.decode(this.ds);
	    	this.loadDataset.setControl(this);
	    	//this.loadParams = {};
			var sf = this;
			if(this.loadDataset){
				var as = new AppSubmit();
				as.setAction("tt_grid_export.do?isPrint=1");
				if(allpage==1){
					delete this.loadParams.pageIndex
					delete this.loadParams.pageSize
				}
				as.add("parameter",kitui.encode(this.loadParams));
				as.add("cols",kitui.encode(cols));
				as.add("path",this.loadDataset.options.pagepath)
				as.add("dataset",this.loadDataset.options.dataset)
				as.add("action",this.loadDataset.options.action)
				as.add("datasourceName","")
				as.add("async","true")
				as.submitForm();
			}
			return;	        	
        }	
	}
	
	
});
///<jscompress sourcefile="jquery.datatable.js" />
(function($) {
	
	kitui.DataTable = function() {
	    kitui.DataTable.superclass.constructor.call(this);
	};

	kitui.extend(kitui.DataTable, kitui.DataSource, {
	    _init: function() {
	        kitui.DataTable.superclass._init.call(this);
	        this._filterInfo = null;
	        this._sortInfo = null;
	    },
	    add: function(a) {
	        return this.insert(this.source.length, a);
	    },
	    addRange: function(a) {
	        this.insertRange(this.source.length, a);
	    },
	    insert: function(d, b) {
	        if (!b) {
	            return null;
	        }
	        var g = {
	            index: d,
	            record: b
	        };
	        this.fire("beforeadd", g);
	        if (!kitui.isNumber(d)) {
	            var c = this.getRecord(d);
	            if (c) {
	                d = this.indexOf(c);
	            } else {
	                d = this.getDataView().length;
	            }
	        }
	        var f = this.dataview[d];
	        if (f) {
	            this.dataview.insert(d, b);
	        } else {
	            this.dataview.add(b);
	        }
	        if (this.dataview != this.source) {
	            if (f) {
	                var a = this.source.indexOf(f);
	                this.source.insert(a, b);
	            } else {
	                this.source.add(b);
	            }
	        }
	        this._setAdded(b);
	        this._dataChanged();
	        this.fire("add", g);
	    },
	    insertRange: function(d, c) {
	        if (!kitui.isArray(c)) {
	            return;
	        }
	        this.beginChange();
	        for (var e = 0, b = c.length; e < b; e++) {
	            var a = c[e];
	            this.insert(d + e, a);
	        }
	        this.endChange();
	    },
	    remove: function(a, c) {
	        var b = this.indexOf(a);
	        return this.removeAt(b, c);
	    },
	    removeAt: function(f, d) {
	        var b = this.getAt(f);
	        if (!b) {
	            return null;
	        }
	        var g = {
	            record: b
	        };
	        this.fire("beforeremove", g);
	        var c = this.isSelected(b);
	        this.source.removeAt(f);
	        if (this.dataview !== this.source) {
	            this.dataview.removeAt(f);
	        }
	        this._setRemoved(b);
	        this._checkSelecteds();
	        this._dataChanged();
	        this.fire("remove", g);
	        if (c && d) {
	            var a = this.getAt(f);
	            if (!a) {
	                a = this.getAt(f - 1);
	            }
	            this.deselectAll();
	            this.select(a);
	        }
	    },
	    removeRange: function(b, c) {
	        if (!kitui.isArray(b)) {
	            return;
	        }
	        this.beginChange();
	        b = b.clone();
	        for (var d = 0, a = b.length; d < a; d++) {
	            var e = b[d];
	            this.remove(e, c);
	        }
	        this.endChange();
	    },
	    move: function(g, o) {
	        if (!g || !kitui.isNumber(o)) {
	            return;
	        }
	        if (o < 0) {
	            return;
	        }
	        if (kitui.isArray(g)) {
	            this.beginChange();
	            var d = g, b = this.getAt(o);
	            var j = this;
	            kitui.sort(d, function(i, e) {
	                return j.indexOf(i) > j.indexOf(e);
	            }, this);
	            for (var f = 0, c = d.length; f < c; f++) {
	                var a = d[f];
	                var h = this.indexOf(b);
	                this.move(a, h);
	            }
	            this.endChange();
	            return;
	        }
	        var m = {
	            index: o,
	            record: g
	        };
	        this.fire("beforemove", m);
	        var k = this.dataview[o];
	        this.dataview.remove(g);
	        var n = this.dataview.indexOf(k);
	        if (n != -1) {
	            o = n;
	        }
	        if (k) {
	            this.dataview.insert(o, g);
	        } else {
	            this.dataview.add(g);
	        }
	        if (this.dataview != this.source) {
	            this.source.remove(g);
	            var n = this.source.indexOf(k);
	            if (n != -1) {
	                o = n;
	            }
	            if (k) {
	                this.source.insert(o, g);
	            } else {
	                this.source.add(g);
	            }
	        }
	        this._dataChanged();
	        this.fire("move", m);
	    },
	    indexOf: function(a) {
	        return this.dataview.indexOf(a);
	    },
	    getAt: function(a) {
	        return this.dataview[a];
	    },
	    getRange: function(g, b) {
	        if (g > b) {
	            var e = g;
	            g = b;
	            b = e;
	        }
	        var c = [];
	        for (var d = g, a = b; d <= a; d++) {
	            var f = this.dataview[d];
	            c.push(f);
	        }
	        return c;
	    },
	    selectRange: function(c, a) {
	        if (!kitui.isNumber(c)) {
	            c = this.indexOf(c);
	        }
	        if (!kitui.isNumber(a)) {
	            a = this.indexOf(a);
	        }
	        if (kitui.isNull(c) || kitui.isNull(a)) {
	            return;
	        }
	        var b = this.getRange(c, a);
	        this.selects(b);
	    },
	    toArray: function() {
	        return this.source.clone();
	    },
	    getChanges: function(a, e) {
	        var h = [];
	        if (a == "removed" || a == null) {
	            h.addRange(this._removeds.clone());
	        }
	        for (var c = 0, b = this.source.length; c < b; c++) {
	            var d = this.source[c];
	            if (!d._state) {
	                continue;
	            }
	            if (d._state == a || a == null) {
	                h[h.length] = d;
	            }
	        }
	        var m = h;
	        if (e) {
	            for (var c = 0, b = m.length; c < b; c++) {
	                var k = m[c];
	                if (k._state == "modified") {
	                    var j = {};
	                    j[this.idField] = k[this.idField];
	                    for (var g in k) {
	                        var f = this.isModified(k, g);
	                        if (f) {
	                            j[g] = k[g];
	                        }
	                    }
	                    m[c] = j;
	                }
	            }
	        }
	        return h;
	    },
	    accept: function() {
	        this.beginChange();
	        for (var c = 0, b = this.source.length; c < b; c++) {
	            var a = this.source[c];
	            this.acceptRecord(a);
	        }
	        this._removeds = [];
	        this._originals = {};
	        this.endChange();
	    },
	    reject: function() {
	        this.beginChange();
	        for (var c = 0, b = this.source.length; c < b; c++) {
	            var a = this.source[c];
	            this.rejectRecord(a);
	        }
	        this._removeds = [];
	        this._originals = {};
	        this.endChange();
	    },
	    acceptRecord: function(a) {
	        delete this._originals[a[this._originalIdField]];
	        if (a._state == "deleted") {
	            this.removeNode(a);
	        } else {
	            delete a._state;
	            delete this._originals[a[this._originalIdField]];
	            this._dataChanged();
	        }
	    },
	    rejectRecord: function(a) {
	        if (a._state == "added") {
	            this.removeNode(a);
	        } else {
	            if (a._state == "modified" || a._state == "deleted") {
	                var b = this._getOriginal(a);
	                kitui.copyTo(a, b);
	                delete a._state;
	                delete this._originals[a[this._originalIdField]];
	                this._dataChanged();
	            }
	        }
	    },
	    _doFilter: function() {
	        if (!this._filterInfo) {
	            this.dataview = this.source;
	            return;
	        }
	        var e = this._filterInfo[0], d = this._filterInfo[1];
	        var b = [];
	        var g = this.source;
	        for (var c = 0, a = g.length; c < a; c++) {
	            var f = g[c];
	            var h = e.call(d, f, c, this);
	            if (h !== false) {
	                b.push(f);
	            }
	        }
	        this.dataview = b;
	    },
	    _doSort: function() {
	        if (!this._sortInfo) {
	            return;
	        }
	        var d = this._sortInfo[0], c = this._sortInfo[1], a = this._sortInfo[2];
	        var b = this.getDataView().clone();
	        kitui.sort(b, d, c);
	        if (a) {
	            b.reverse();
	        }
	        this.dataview = b;
	    }
	});

	kitui.regClass(kitui.DataTable, "datatable");
	
})(jQuery);
///<jscompress sourcefile="jquery.datatree.js" />
(function($) {
	kitui.DataTree = function() {
	    kitui.DataTree.superclass.constructor.call(this);
	};

	kitui.extend(kitui.DataTree, kitui.DataSource, {
	    isTree: true,
	    expandOnLoad: false,
	    idField: "id",
	    parentField: "pid",
	    nodesField: "children",
	    resultAsTree: false,
	    dataField: "data",
	    checkModel: "cascade",
	    autoCheckParent: false,
	    onlyLeafCheckable: false,
	    autoLoad:true,
	    showAllNode:false,
	    setShowAllNode: function(a) {
	        this.showAllNode = a;
	    },	    
	    setExpandOnLoad: function(a) {
	        this.expandOnLoad = a;
	    },
	    getExpandOnLoad: function() {
	        return this.expandOnLoad;
	    },
	    setParentField: function(a) {
	        this.parentField = a;
	    },
	    setNodesField: function(b) {
	        if (this.nodesField != b) {
	            var a = this.root[this.nodesField];
	            this.nodesField = b;
	            this._doLoadData(a);
	        }
	    },
	    setResultAsTree: function(a) {
	        this.resultAsTree = a;
	    },
	    setCheckRecursive: function(a) {
	        this.checkModel = a ? "cascade" : "multiple";
	    },
	    getCheckRecursive: function() {
	        return this.checkModel == "cascade";
	    },
	    setShowFolderCheckBox: function(a) {
	        this.onlyLeafCheckable = !a;
	    },
	    getShowFolderCheckBox: function() {
	        return !this.onlyLeafCheckable;
	    },
	    _doExpandOnLoad: function(a) {
	        var d = this.nodesField;
	        var c = this.expandOnLoad;
	        function b(f, k) {
	            for (var g = 0, e = f.length; g < e; g++) {
	                var h = f[g];
	                if (kitui.isNull(h.expanded)) {
	                    if (c === true || kitui.isNumber(c) && k <= c) {
	                        h.expanded = true;
	                    } else {
	                        h.expanded = false;
	                    }
	                } else {}
	                var j = h[d];
	                if (j) {
	                    b(j, k + 1);
	                }
	            }
	        }
	        b(a, 0);
	    },
	    _OnBeforeLoad: function(b) {
	        var a = this._loadingNode || this.root;
	        b.node = a;
	        if (this._isNodeLoading()) {
	            b.async = true;
	            b.isRoot = b.node == this.root;
	            if (!b.isRoot) {
	                b.data[this.idField] = this.getItemValue(b.node);
	            }
	        }
	        this.fire("beforeload", b);
	    },
	    _OnPreLoad: function(a) {
	        if (this.resultAsTree == false) {
				for(var p=0;p<a.data.length;p++){
		        	var e = a.data[p];
		            if(e.EXPANDED!=undefined){
		            	if(e.EXPANDED=="1"||e.EXPANDED==1||e.EXPANDED=="true")
							e.expanded = true;
						else
							e.expanded = false;
					}	   
					if(e.CHECKED!=undefined){
		            	if(e.CHECKED=="1"||e.CHECKED==1||e.CHECKED=="true")
							e.checked = true;
						else
							e.checked = false;							
					}
				}	          	
	            a.data = kitui.arrayToTree(a.data, this.nodesField, this.idField, this.parentField);
	        }
	        this.fire("preload", a);
	    },
	    _init: function() {
	        kitui.DataTree.superclass._init.call(this);
	        this.root = {
	            _id: -1,
	            _level: -1
	        };
	        this.source = this.root[this.nodesField] = [];
	        this.viewNodes = null;
	        this.dataview = null;
	        this.visibleRows = null;
	        this._ids[this.root._id] = this.root;
	    },
	    _doLoadData: function(h) {
	        h = h || [];
			for(var k=0;k<h.length;k++){
            	var d = h[k];
	            if(d.EXPANDED!=undefined){
	            	if(d.EXPANDED=="1"||d.EXPANDED==1||d.EXPANDED=="true")
						d.expanded = true;
					else
						d.expanded = false;
				}
				if(d.ISLEAF!=undefined){
	            	if(d.ISLEAF=="1"||d.ISLEAF==1||d.ISLEAF=="true")
						d.isLeaf = true;
					else
						d.isLeaf = false;
				}	   
				if(d.CHECKED!=undefined){
	            	if(d.CHECKED=="1"||d.CHECKED==1||d.CHECKED=="true")
						d.checked = true;
					else
						d.checked = false;							
				}
            }
            //自动生成全部节点
            if(kitui.toBoolean(this.showAllNode)){
            	var k = {isLeaf:false,expanded:true};
		   		//if(h[0][this.nodesField]){
		   			k[this.textField] = "全部";
		   			k[this.idField] = "";
		   			k[this.parentField] = "-1";
		   			k[this.nodesField] = h;
		   			h = [k]
		   		//}
            }

	        this._doExpandOnLoad(h);
	        this.source = this.root[this.nodesField] = h;
	        this.viewNodes = null;
	        this.dataview = null;
	        this.visibleRows = null;
	        var g = kitui.treeToArray(h, this.nodesField);
	        var e = this._ids;
	        e[this.root._id] = this.root;
	        for (var c = 0, b = g.length; c < b; c++) {
	            var f = g[c];
	            f._id = kitui.DataSource.RecordId++;
	            e[f._id] = f;
	            f._uid = f._id;
	        }
	        var g = kitui.treeToArray(h, this.nodesField, "_id", "_pid", this.root._id);
	        for (var c = 0, b = g.length; c < b; c++) {
	            var f = g[c];
	            var a = this.getParentNode(f);
	            f._pid = a._id;
	            f._level = a._level + 1;
	            delete f._state;
	            if (f.isLeaf === false) {
	                var d = f[this.nodesField];
	                if (d && d.length > 0) {
	                    delete f.isLeaf;
	                }
	            }
	        }
	        this._doUpdateLoadedCheckedNodes();
	    },
	    _setAdded: function(b) {
	        var a = this.getParentNode(b);
	        b._id = kitui.DataSource.RecordId++;
	        if (this._autoCreateNewID && !b[this.idField]) {
	            b[this.idField] = UUID();
	        }
	        b._uid = b._id;
	        b._pid = a._id;
	        b[this.parentField] = a[this.idField];
	        b._level = a._level + 1;
	        b._state = "added";
	        this._ids[b._id] = b;
	        delete this._originals[b[this._originalIdField]];
	    },
	    _createNodes: function(b) {
	        var a = b[this.nodesField];
	        if (!a) {
	            a = b[this.nodesField] = [];
	        }
	        if (this.viewNodes && !this.viewNodes[b._id]) {
	            this.viewNodes[b._id] = [];
	        }
	        return a;
	    },
	    addNode: function(b, a) {
	        if (!b) {
	            return;
	        }
	        return this.insertNode(b, -1, a);
	    },
	    addNodes: function(c, a, f) {
	        if (!kitui.isArray(c)) {
	            return;
	        }
	        if (kitui.isNull(f)) {
	            f = "add";
	        }
	        for (var d = 0, b = c.length; d < b; d++) {
	            var e = c[d];
	            this.insertNode(e, f, a);
	        }
	    },
	    insertNodes: function(d, e, a) {
	        if (!kitui.isNumber(e)) {
	            return;
	        }
	        if (!kitui.isArray(d)) {
	            return;
	        }
	        if (!a) {
	            a = this.root;
	        }
	        this.beginChange();
	        var c = this._createNodes(a);
	        if (e < 0 || e > c.length) {
	            e = c.length;
	        }
	        d = d.clone();
	        for (var f = 0, b = d.length; f < b; f++) {
	            this.insertNode(d[f], e + f, a);
	        }
	        this.endChange();
	        return d;
	    },
	    removeNode: function(c) {
	        var a = this.getParentNode(c);
	        if (!a) {
	            return;
	        }
	        var b = this.indexOfNode(c);
	        return this.removeNodeAt(b, a);
	    },
	    removeNodes: function(b) {
	        if (!kitui.isArray(b)) {
	            return;
	        }
	        this.beginChange();
	        b = b.clone();
	        for (var c = 0, a = b.length; c < a; c++) {
	            this.removeNode(b[c]);
	        }
	        this.endChange();
	    },
	    moveNodes: function(b, g, f) {
	        if (!b || b.length == 0 || !g || !f) {
	            return;
	        }
	        this.beginChange();
	        var e = this;
	        kitui.sort(b, function(i, h) {
	            return e.indexOf(i) > e.indexOf(h);
	        }, this);
	        for (var c = 0, a = b.length; c < a; c++) {
	            var d = b[c];
	            this.moveNode(d, g, f);
	            if (c != 0) {
	                g = d;
	                f = "after";
	            }
	        }
	        this.endChange();
	    },
	    moveNode: function(a, h, b) {
	        if (!a || !h || kitui.isNull(b)) {
	            return;
	        }
	        if (this.viewNodes) {
	            var d = h;
	            var f = b;
	            if (f == "before") {
	                d = this.getParentNode(h);
	                f = this.indexOfNode(h);
	            } else {
	                if (f == "after") {
	                    d = this.getParentNode(h);
	                    f = this.indexOfNode(h) + 1;
	                } else {
	                    if (f == "add" || f == "append") {
	                        if (!d[this.nodesField]) {
	                            d[this.nodesField] = [];
	                        }
	                        f = d[this.nodesField].length;
	                    } else {
	                        if (!kitui.isNumber(f)) {
	                            return;
	                        }
	                    }
	                }
	            }
	            if (this.isAncestor(a, d)) {
	                return false;
	            }
	            var j = this.getChildNodes(d);
	            if (f < 0 || f > j.length) {
	                f = j.length;
	            }
	            var i = {};
	            j.insert(f, i);
	            var k = this.getParentNode(a);
	            var c = this.getChildNodes(k);
	            c.remove(a);
	            f = j.indexOf(i);
	            j[f] = a;
	        }
	        var d = h;
	        var f = b;
	        var j = this._createNodes(d);
	        if (f == "before") {
	            d = this.getParentNode(h);
	            j = this._createNodes(d);
	            f = j.indexOf(h);
	        } else {
	            if (f == "after") {
	                d = this.getParentNode(h);
	                j = this._createNodes(d);
	                f = j.indexOf(h) + 1;
	            } else {
	                if (f == "add" || f == "append") {
	                    f = j.length;
	                } else {
	                    if (!kitui.isNumber(f)) {
	                        return;
	                    }
	                }
	            }
	        }
	        if (this.isAncestor(a, d)) {
	            return false;
	        }
	        if (f < 0 || f > j.length) {
	            f = j.length;
	        }
	        var i = {};
	        j.insert(f, i);
	        var k = this.getParentNode(a);
	        k[this.nodesField].remove(a);
	        f = j.indexOf(i);
	        j[f] = a;
	        this._updateParentAndLevel(a, d);
	        this._dataChanged();
	        var g = {
	            parentNode: d,
	            index: f,
	            node: a
	        };
	        this.fire("movenode", g);
	    },
	    insertNode: function(f, d, b) {
	        if (!f) {
	            return;
	        }
	        if (!b) {
	            b = this.root;
	            d = "add";
	        }
	        if (!kitui.isNumber(d)) {
	            switch (d) {
	              case "before":
	                d = this.indexOfNode(b);
	                b = this.getParentNode(b);
	                this.insertNode(f, d, b);
	                break;

	              case "after":
	                d = this.indexOfNode(b);
	                b = this.getParentNode(b);
	                this.insertNode(f, d + 1, b);
	                break;

	              case "append":
	              case "add":
	                this.addNode(f, b);
	                break;

	              default:
	                break;
	            }
	            return;
	        }
	        var a = this._createNodes(b);
	        var c = this.getChildNodes(b);
	        if (d < 0) {
	            d = c.length;
	        }
	        c.insert(d, f);
	        d = c.indexOf(f);
	        if (this.viewNodes) {
	            var i = c[d - 1];
	            if (i) {
	                var h = a.indexOf(i);
	                a.insert(h + 1, f);
	            } else {
	                a.insert(0, f);
	            }
	        }
	        f._pid = b._id;
	        this._setAdded(f);
	        this.cascadeChild(f, function(k, e, j) {
	            k._pid = j._id;
	            this._setAdded(k);
	        }, this);
	        this._dataChanged();
	        var g = {
	            parentNode: b,
	            index: d,
	            node: f
	        };
	        this.fire("addnode", g);
	        return f;
	    },
	    removeNodeAt: function(d, b) {
	        if (!b) {
	            b = this.root;
	        }
	        var c = this.getChildNodes(b);
	        var f = c[d];
	        if (!f) {
	            return null;
	        }
	        c.removeAt(d);
	        if (this.viewNodes) {
	            var a = b[this.nodesField];
	            a.remove(f);
	        }
	        this._setRemoved(f);
	        this.cascadeChild(f, function(j, e, h) {
	            this._setRemoved(j);
	        }, this);
	        this._checkSelecteds();
	        this._dataChanged();
	        var g = {
	            parentNode: b,
	            index: d,
	            node: f
	        };
	        this.fire("removenode", g);
	        return f;
	    },
	    bubbleParent: function(d, c, b) {
	        b = b || this;
	        if (d) {
	            c.call(this, d);
	        }
	        var a = this.getParentNode(d);
	        if (a && a != this.root) {
	            this.bubbleParent(a, c, b);
	        }
	    },
	    cascadeChild: function(g, f, e) {
	        if (!f) {
	            return;
	        }
	        if (!g) {
	            g = this.root;
	        }
	        var b = g[this.nodesField];
	        if (b) {
	            b = b.clone();
	            for (var d = 0, a = b.length; d < a; d++) {
	                var h = b[d];
	                if (f.call(e || this, h, d, g) === false) {
	                    return;
	                }
	                this.cascadeChild(h, f, e);
	            }
	        }
	    },
	    eachChild: function(f, e, d) {
	        if (!e || !f) {
	            return;
	        }
	        var b = f[this.nodesField];
	        if (b) {
	            var g = b.clone();
	            for (var c = 0, a = g.length; c < a; c++) {
	                var h = g[c];
	                if (e.call(d || this, h, c, f) === false) {
	                    break;
	                }
	            }
	        }
	    },
	    collapse: function(b, a) {
	        if (!b) {
	            return;
	        }
	        this.beginChange();
	        b.expanded = false;
	        if (a) {
	            this.eachChild(b, function(d) {
	                if (d[this.nodesField] != null) {
	                    this.collapse(d, a);
	                }
	            }, this);
	        }
	        this.endChange();
	        var c = {
	            node: b
	        };
	        this.fire("collapse", c);
	    },
	    expand: function(b, a) {
	        if (!b) {
	            return;
	        }
	        this.beginChange();
	        b.expanded = true;
	        if (a) {
	            this.eachChild(b, function(d) {
	                if (d[this.nodesField] != null) {
	                    this.expand(d, a);
	                }
	            }, this);
	        }
	        this.endChange();
	        var c = {
	            node: b
	        };
	        this.fire("expand", c);
	    },
	    toggle: function(a) {
	        if (this.isExpandedNode(a)) {
	            this.collapse(a);
	        } else {
	            this.expand(a);
	        }
	    },
	    expandNode: function(a) {
	        this.expand(a);
	    },
	    collapseNode: function(a) {
	        this.collapse(a);
	    },
	    collapseAll: function() {
	        this.collapse(this.root, true);
	    },
	    expandAll: function() {
	        this.expand(this.root, true);
	    },
	    collapseLevel: function(b, a) {
	        this.beginChange();
	        this.each(function(d) {
	            var c = this.getLevel(d);
	            if (b == c) {
	                this.collapse(d, a);
	            }
	        }, this);
	        this.endChange();
	    },
	    expandLevel: function(b, a) {
	        this.beginChange();
	        this.each(function(d) {
	            var c = this.getLevel(d);
	            if (b == c) {
	                this.expand(d, a);
	            }
	        }, this);
	        this.endChange();
	    },
	    expandPath: function(d) {
	        d = this.getNode(d);
	        if (!d) {
	            return;
	        }
	        var b = this.getAncestors(d);
	        for (var c = 0, a = b.length; c < a; c++) {
	            this.expandNode(b[c]);
	        }
	    },
	    collapsePath: function(d) {
	        d = this.getNode(d);
	        if (!d) {
	            return;
	        }
	        var b = this.getAncestors(d);
	        for (var c = 0, a = b.length; c < a; c++) {
	            this.collapseNode(b[c]);
	        }
	    },
	    isAncestor: function(a, e) {
	        if (a == e) {
	            return true;
	        }
	        if (!a || !e) {
	            return false;
	        }
	        var c = this.getAncestors(e);
	        for (var d = 0, b = c.length; d < b; d++) {
	            if (c[d] == a) {
	                return true;
	            }
	        }
	        return false;
	    },
	    getAncestors: function(c) {
	        var b = [];
	        while (1) {
	            var a = this.getParentNode(c);
	            if (!a || a == this.root) {
	                break;
	            }
	            b[b.length] = a;
	            c = a;
	        }
	        b.reverse();
	        return b;
	    },
	    getNode: function(a) {
	        return this.getRecord(a);
	    },
	    getRootNode: function() {
	        return this.root;
	    },
	    getParentNode: function(a) {
	        if (!a) {
	            return null;
	        }
	        return this.getby_id(a._pid);
	    },
	    getAllChildNodes: function(a) {
	        return this.getChildNodes(a, true);
	    },
	    getChildNodes: function(b, h, j) {
	        var a = b[this.nodesField];
	        if (this.viewNodes && j !== false) {
	            a = this.viewNodes[b._id];
	        }
	        if (h === true && a) {
	            var g = [];
	            for (var d = 0, c = a.length; d < c; d++) {
	                var f = a[d];
	                g[g.length] = f;
	                var e = this.getChildNodes(f, h, j);
	                if (e && e.length > 0) {
	                    g.addRange(e);
	                }
	            }
	            a = g;
	        }
	        return a || [];
	    },
	    getChildNodeAt: function(b, c) {
	        var a = this.getChildNodes(c);
	        if (a) {
	            return a[b];
	        }
	        return null;
	    },
	    hasChildNodes: function(b) {
	        var a = this.getChildNodes(b);
	        return a.length > 0;
	    },
	    getLevel: function(a) {
	        return a._level;
	    },
	    isLeafNode: function(a) {
	        return this.isLeaf(a);
	    },
	    isLeaf: function(b) {
	        if (!b || b.isLeaf === false) {
	            return false;
	        }
	        var a = this.getChildNodes(b);
	        if (a.length > 0) {
	            return false;
	        }
	        return true;
	    },
	    hasChildren: function(b) {
	        var a = this.getChildNodes(b);
	        return !!(a && a.length > 0);
	    },
	    isFirstNode: function(b) {
	        if (b == this.root) {
	            return true;
	        }
	        var a = this.getParentNode(b);
	        if (!a) {
	            return false;
	        }
	        return this.getFirstNode(a) == b;
	    },
	    isLastNode: function(b) {
	        if (b == this.root) {
	            return true;
	        }
	        var a = this.getParentNode(b);
	        if (!a) {
	            return false;
	        }
	        return this.getLastNode(a) == b;
	    },
	    isCheckedNode: function(a) {
	        return a.checked === true;
	    },
	    isExpandedNode: function(a) {
	        return a.expanded == true || a.expanded == 1 || kitui.isNull(a.expanded);
	    },
	    isVisible: function(a) {
	        var b = this._ids[a._pid];
	        if (!b || b == this.root) {
	            return true;
	        }
	        if (b.expanded === false) {
	            return false;
	        }
	        return this.isVisible(b);
	    },
	    isVisibleNode: function(e) {
	        if (false == e.visible) {
	            return false;
	        }
	        var t = this._ids[e._pid];
	        if (!t || t == this.root) {
	            return true;
	        }
	        if (false === t.expanded) {
	            return false;
	        }
	        return this.isVisibleNode(t);
	    },	    
	    getNextNode: function(c) {
	        var a = this.getby_id(c._pid);
	        if (!a) {
	            return null;
	        }
	        var b = this.indexOfNode(c);
	        return this.getChildNodes(a)[b + 1];
	    },
	    getPrevNode: function(c) {
	        var a = this.getby_id(c._pid);
	        if (!a) {
	            return null;
	        }
	        var b = this.indexOfNode(c);
	        return this.getChildNodes(a)[b - 1];
	    },
	    getFirstNode: function(a) {
	        return this.getChildNodes(a)[0];
	    },
	    getLastNode: function(a) {
	        var b = this.getChildNodes(a);
	        return b[b.length - 1];
	    },
	    indexOfNode: function(b) {
	        var a = this.getby_id(b._pid);
	        if (a) {
	            return this.getChildNodes(a).indexOf(b);
	        }
	        return -1;
	    },
	    getAt: function(a) {
	        return this.getDataView()[a];
	    },
	    indexOf: function(a) {
	        return this.getDataView().indexOf(a);
	    },
	    getRange: function(h, b) {
	        if (h > b) {
	            var e = h;
	            h = b;
	            b = e;
	        }
	        var f = this.getChildNodes(this.root, true);
	        var c = [];
	        for (var d = h, a = b; d <= a; d++) {
	            var g = f[d];
	            if (g) {
	                c.push(g);
	            }
	        }
	        return c;
	    },
	    selectRange: function(d, a) {
	        var c = this.getChildNodes(this.root, true);
	        if (!kitui.isNumber(d)) {
	            d = c.indexOf(d);
	        }
	        if (!kitui.isNumber(a)) {
	            a = c.indexOf(a);
	        }
	        if (kitui.isNull(d) || kitui.isNull(a)) {
	            return;
	        }
	        var b = this.getRange(d, a);
	        this.selects(b);
	    },
	    findRecords: function(k, j) {
	        var d = this.toArray();
	        var g = typeof k == "function";
	        var h = k;
	        var m = j || this;
	        var b = [];
	        for (var e = 0, c = d.length; e < c; e++) {
	            var a = d[e];
	            if (g) {
	                var f = h.call(m, a);
	                if (f == true) {
	                    b[b.length] = a;
	                }
	                if (f === 1) {
	                    break;
	                }
	            } else {
	                if (a[k] == j) {
	                    b[b.length] = a;
	                }
	            }
	        }
	        return b;
	    },
	    _dataChangedCount: 0,
	    _dataChanged: function() {
	        this._dataChangedCount++;
	        this.dataview = null;
	        this.visibleRows = null;
	        if (this.__changeCount == 0) {
	            this.fire("datachanged");
	        }
	    },
	    _createDataView: function() {
	        var a = this.getChildNodes(this.root, true);
	        return a;
	    },
	    _createVisibleRows: function() {
	        var e = this.getChildNodes(this.root, true);
	        var b = [];
	        for (var c = 0, a = e.length; c < a; c++) {
	            var d = e[c];
	            if (this.isVisibleNode(d)) {
	                b[b.length] = d;
	            }
	        }
	        return b;
	    },
	    getList: function() {
	        return kitui.treeToList(this.source, this.nodesField);
	    },
	    getDataView: function() {
	        if (!this.dataview) {
	            this.dataview = this._createDataView();
	        }
	        return this.dataview;
	    },
	    getVisibleRows: function() {
	        if (!this.visibleRows) {
	            this.visibleRows = this._createVisibleRows();
	        }
	        return this.visibleRows;
	    },
	    _doFilter: function() {
	        if (!this._filterInfo) {
	            this.viewNodes = null;
	            return;
	        }
	        var d = this._filterInfo[0], c = this._filterInfo[1];
	        var a = this.viewNodes = {}, e = this.nodesField;
	        function b(k) {
	            var g = k[e];
	            if (!g) {
	                return false;
	            }
	            var h = k._id;
	            var o = a[h] = [];
	            for (var n = 0, m = g.length; n < m; n++) {
	                var f = g[n];
	                var j = b(f);
	                var p = d.call(c, f, n, this);
	                if (p === true || j) {
	                    o.push(f);
	                }
	            }
	            return o.length > 0;
	        }
	        b(this.root);
	    },
	    _doSort: function() {
	        if (!this._filterInfo && !this._sortInfo) {
	            this.viewNodes = null;
	            return;
	        }
	        if (!this._sortInfo) {
	            return;
	        }
	        var e = this._sortInfo[0], d = this._sortInfo[1], b = this._sortInfo[2];
	        var g = this.nodesField;
	        if (!this.viewNodes) {
	            var a = this.viewNodes = {};
	            a[this.root._id] = this.root[g].clone();
	            this.cascadeChild(this.root, function(k, j, l) {
	                var h = k[g];
	                if (h) {
	                    a[k._id] = h.clone();
	                }
	            });
	        }
	        var f = this;
	        function c(n) {
	            var j = f.getChildNodes(n);
	            kitui.sort(j, e, d);
	            if (b) {
	                j.reverse();
	            }
	            for (var k = 0, h = j.length; k < h; k++) {
	                var m = j[k];
	                c(m);
	            }
	        }
	        c(this.root);
	    },
	    toArray: function() {
	        if (!this._array || this._dataChangedCount != this._dataChangedCount2) {
	            this._dataChangedCount2 = this._dataChangedCount;
	            this._array = this.getChildNodes(this.root, true, false);
	        }
	        return this._array;
	    },
	    toTree: function() {
	        return this.root[this.nodesField];
	    },
	    getChanges: function(a, d) {
	        var g = [];
	        if (a == "removed" || a == null) {
	            g.addRange(this._removeds.clone());
	        }
	        this.cascadeChild(this.root, function(l, m, n) {
	            if (l._state == null || l._state == "") {
	                return;
	            }
	            if (l._state == a || a == null) {
	                g[g.length] = l;
	            }
	        }, this);
	        var k = g;
	        if (d) {
	            for (var c = 0, b = k.length; c < b; c++) {
	                var j = k[c];
	                if (j._state == "modified") {
	                    var h = {};
	                    h[this.idField] = j[this.idField];
	                    for (var f in j) {
	                        var e = this.isModified(j, f);
	                        if (e) {
	                            h[f] = j[f];
	                        }
	                    }
	                    k[c] = h;
	                }
	            }
	        }
	        return g;
	    },
	    accept: function(a) {
	        a = a || this.root;
	        this.beginChange();
	        this.cascadeChild(this.root, function(b) {
	            this.acceptRecord(b);
	        }, this);
	        this._removeds = [];
	        this._originals = {};
	        this.endChange();
	    },
	    reject: function(a) {
	        this.beginChange();
	        this.cascadeChild(this.root, function(b) {
	            this.rejectRecord(b);
	        }, this);
	        this._removeds = [];
	        this._originals = {};
	        this.endChange();
	    },
	    acceptRecord: function(a) {
	        delete this._originals[a[this._originalIdField]];
	        if (a._state == "deleted") {
	            this.removeNode(a);
	        } else {
	            delete a._state;
	            delete this._originals[a[this._originalIdField]];
	            this._dataChanged();
	        }
	    },
	    rejectRecord: function(a) {
	        if (a._state == "added") {
	            this.removeNode(a);
	        } else {
	            if (a._state == "modified" || a._state == "deleted") {
	                var b = this._getOriginal(a);
	                kitui.copyTo(a, b);
	                delete a._state;
	                delete this._originals[a[this._originalIdField]];
	                this._dataChanged();
	            }
	        }
	    },
	    upGrade: function(b) {
	        var e = this.getParentNode(b);
	        if (e == this.root || b == this.root) {
	            return false;
	        }
	        var c = e[this.nodesField];
	        var g = c.indexOf(b);
	        var h = b[this.nodesField] ? b[this.nodesField].length : 0;
	        for (var f = c.length - 1; f >= g; f--) {
	            var a = c[f];
	            c.removeAt(f);
	            if (a != b) {
	                if (!b[this.nodesField]) {
	                    b[this.nodesField] = [];
	                }
	                b[this.nodesField].insert(h, a);
	            }
	        }
	        var d = this.getParentNode(e);
	        var j = d[this.nodesField];
	        var g = j.indexOf(e);
	        j.insert(g + 1, b);
	        this._updateParentAndLevel(b, d);
	        this._doFilter();
	        this._dataChanged();
	    },
	    downGrade: function(e) {
	        if (this.isFirstNode(e)) {
	            return false;
	        }
	        var d = this.getParentNode(e);
	        var c = d[this.nodesField];
	        var b = c.indexOf(e);
	        var a = c[b - 1];
	        c.removeAt(b);
	        if (!a[this.nodesField]) {
	            a[this.nodesField] = [];
	        }
	        a[this.nodesField].add(e);
	        this._updateParentAndLevel(e, a);
	        this._doFilter();
	        this._dataChanged();
	    },
	    _updateParentAndLevel: function(b, a) {
	        b._pid = a._id;
	        b._level = a._level + 1;
	        this.cascadeChild(b, function(e, c, d) {
	            e._pid = d._id;
	            e._level = d._level + 1;
	            e[this.parentField] = d[this.idField];
	        }, this);
	        this._setModified(b);
	    },
	    setCheckModel: function(a) {
	        this.checkModel = a;
	    },
	    getCheckModel: function() {
	        return this.checkModel;
	    },
	    setOnlyLeafCheckable: function(a) {
	        this.onlyLeafCheckable = a;
	    },
	    getOnlyLeafCheckable: function() {
	        return this.onlyLeafCheckable;
	    },
	    setAutoCheckParent: function(a) {
	        this.autoCheckParent = a;
	    },
	    getAutoCheckParent: function() {
	        return this.autoCheckParent;
	    },
	    _doUpdateLoadedCheckedNodes: function() {
	        var b = this.getAllChildNodes(this.root);
	        for (var c = 0, a = b.length; c < a; c++) {
	            var d = b[c];
	            if (d.checked == true) {
	                this._doUpdateNodeCheckState(d);
	            }
	        }
	    },
	    _doUpdateNodeCheckState: function(b) {
	        if (!b) {
	            return;
	        }
	        var h = this.isChecked(b);
	        if (this.checkModel == "cascade") {
	            this.cascadeChild(b, function(l) {
	                var i = this.getCheckable(l);
	                if (i) {
	                    this.doCheckNodes(l, h);
	                }
	            }, this);
	            if (!this.autoCheckParent) {
	                var j = this.getAncestors(b);
	                j.reverse();
	                for (var d = 0, c = j.length; d < c; d++) {
	                    var e = j[d];
	                    var a = this.getCheckable(e);
	                    if (a == false) {
	                        return;
	                    }
	                    var n = this.getChildNodes(e);
	                    var m = true;
	                    for (var k = 0, g = n.length; k < g; k++) {
	                        var f = n[k];
	                        if (!this.isCheckedNode(f)) {
	                            m = false;
	                        }
	                    }
	                    if (m) {
	                        this.doCheckNodes(e, true);
	                    } else {
	                        this.doCheckNodes(e, false);
	                    }
	                    this.fire("checkchanged", {
	                        nodes: [ e ],
	                        _nodes: [ e ]
	                    });
	                }
	            }
	        }
	        if (this.autoCheckParent && h) {
	            var j = this.getAncestors(b);
	            j.reverse();
	            for (var d = 0, c = j.length; d < c; d++) {
	                var e = j[d];
	                var a = this.getCheckable(e);
	                if (a == false) {
	                    return;
	                }
	                e.checked = true;
	                this.fire("checkchanged", {
	                    nodes: [ e ],
	                    _nodes: [ e ]
	                });
	            }
	        }
	    },
	    doCheckNodes: function(b, f, a) {
	        if (!b) {
	            return;
	        }
	        if (typeof b == "string") {
	            b = b.split(",");
	        }
	        if (!kitui.isArray(b)) {
	            b = [ b ];
	        }
	        b = b.clone();
	        var g = [];
	        f = f !== false;
	        if (a === true) {
	            if (this.checkModel == "single") {
	                this.uncheckAllNodes();
	            }
	        }
	        for (var c = b.length - 1; c >= 0; c--) {
	            var e = this.getRecord(b[c]);
	            if (!e || f && e.checked === true || !f && e.checked !== true) {
	                if (e) {
	                    if (a === true) {
	                        this._doUpdateNodeCheckState(e);
	                    }
	                    if (!f && !this.isLeaf(e)) {
                        	g.push(e);
                    	}
	                }
	                continue;
	            }
	            e.checked = f;
	            g.push(e);
	            if (a === true) {
	                this._doUpdateNodeCheckState(e);
	            }
	        }
	        var d = this;
	        setTimeout(function() {
	            d.fire("checkchanged", {
	                nodes: b,
	                _nodes: g,
	                checked: f
	            });
	        }, 1);
	    },
	    checkNode: function(a) {
	        this.doCheckNodes([ a ], true, true);
	    },
	    uncheckNode: function(a) {
	        this.doCheckNodes([ a ], false, true);
	    },
	    checkNodes: function(a) {
	        if (!kitui.isArray(a)) {
	            a = [];
	        }
	        this.doCheckNodes(a, true, true);
	    },
	    uncheckNodes: function(a) {
	        if (!kitui.isArray(a)) {
	            a = [];
	        }
	        this.doCheckNodes(a, false, true);
	    },
	    checkAllNodes: function() {
	        var a = this.getList();
	        this.doCheckNodes(a, true);
	    },
	    uncheckAllNodes: function() {
	        var a = this.getList();
	        this.doCheckNodes(a, false);
	    },
	    doGetCheckedNodes: function(e, t) {
	        if (false === t) {
	            t = "leaf";
	        }
	        for (var i = [], n = {}, s = 0, o = e.length; s < o; s++) {
	            var r = e[s], l = this.isLeafNode(r);
	            if (true === t) {
	                if (!n[r._id]) {
	                    n[r._id] = r;
	                    i.push(r);
	                }
	                for (var a = this.getAncestors(r), h = 0, u = a.length; h < u; h++) {
	                    var d = a[h];
	                    if (!n[d._id]) {
	                        n[d._id] = d;
	                        i.push(d);
	                    }
	                }
	            } else {
	                if ("parent" === t) {
	                    if (!l) {
	                        if (!n[r._id]) {
	                            n[r._id] = r;
	                            i.push(r);
	                        }
	                    }
	                } else {
	                    if ("leaf" === t) {
	                        if (l) {
	                            if (!n[r._id]) {
	                                n[r._id] = r;
	                                i.push(r);
	                            }
	                        }
	                    } else {
	                        if (!n[r._id]) {
	                            n[r._id] = r;
	                            i.push(r);
	                        }
	                    }
	                }
	            }
	        }
	        return i;
	    },
	    getCheckedNodes: function(e) {
	        var t = [];
	        this.cascadeChild(this.root, function(e) {
	            if (true == e.checked) {
	                t.push(e);
	            }
	        });
	        t = this.doGetCheckedNodes(t, e);
	        return t;
	    },
	    getCheckedNodesId: function(d, b) {
	        var a = this.getCheckedNodes(d);
	        var c = this.getValueAndText(a, b);
	        return c[0];
	    },
	    getCheckedNodesText: function(d, b) {
	        var a = this.getCheckedNodes(d);
	        var c = this.getValueAndText(a, b);
	        return c[1];
	    },
	    isChecked: function(a) {
	        a = this.getRecord(a);
	        if (!a) {
	            return null;
	        }
	        return a.checked === true;
	    },
	    getCheckState: function(d) {
	        d = this.getRecord(d);
	        if (!d) {
	            return null;
	        }
	        if (d.checked === true) {
	            return "checked";
	        }
	        if (!d[this.nodesField]) {
	            return "unchecked";
	        }
	        if (d.indeterminate) {
	            return "indeterminate";
	        }	        
	        var c = this.getChildNodes(d,true);
	        for (var b = 0, a = c.length; b < a; b++) {
	            var d = c[b];
	            if (d.checked === true) {
	                return "indeterminate";
	            }
	        }
	        return "unchecked";
	    },
	    getUnCheckableNodes: function() {
	        var a = [];
	        this.cascadeChild(this.root, function(c) {
	            var b = this.getCheckable(c);
	            if (b == false) {
	                a.push(c);
	            }
	        }, this);
	        return a;
	    },
	    setCheckable: function(b, a) {
	        if (!b) {
	            return;
	        }
	        if (!kitui.isArray(b)) {
	            b = [ b ];
	        }
	        b = b.clone();
	        a = !!a;
	        for (var c = b.length - 1; c >= 0; c--) {
	            var d = this.getRecord(b[c]);
	            if (!d) {
	                continue;
	            }
	            d.checkable = checked;
	        }
	    },
	    getCheckable: function(a) {
	        a = this.getRecord(a);
	        if (!a) {
	            return false;
	        }
	        if (a.checkable === true) {
	            return true;
	        }
	        if (a.checkable === false) {
	            return false;
	        }
	        return this.isLeafNode(a) ? true : !this.onlyLeafCheckable;
	    },
	    showNodeCheckbox: function(b, a) {},
	    _isNodeLoading: function() {
	        return !!this._loadingNode;
	    },
	    _loadSyncCallback : function(h,d,b,c,a) {
	            var g = new Date() - d;
	            if (g < 60) {
	                g = 60 - g;
	            }
	            setTimeout(function() {
	                h.node = b._loadingNode;
	                b._loadingNode = null;
	                var i = c[b.nodesField];
	                b.removeNodes(i);
	                var e = h.data;
					for(var k=0;k<e.length;k++){
	                	var d = e[k];
			            if(d.EXPANDED!=undefined){
			            	if(d.EXPANDED=="1"||d.EXPANDED==1||d.EXPANDED=="true")
								d.expanded = true;
							else
								d.expanded = false;
						}
						if(d.ISLEAF!=undefined){
			            	if(d.ISLEAF=="1"||d.ISLEAF==1||d.ISLEAF=="true")
								d.isLeaf = true;
							else
								d.isLeaf = false;
						}	   
						if(d.CHECKED!=undefined){
			            	if(d.CHECKED=="1"||d.CHECKED==1||d.CHECKED=="true")
								d.checked = true;
							else
								d.checked = false;							
						}
							             	
	                }	                
	                if (e && e.length > 0) {
	                    b.addNodes(e, c);
	                    if (a !== false) {
	                        b.expand(c, true);
	                    } else {
	                        b.collapse(c, true);
	                    }
	                } else {
	                    delete c.isLeaf;
	                    b.expand(c, true);
	                }
	                b.fire("loadnode", {
	                    node: c
	                });
	            }, g);
	        },	
	    loadNode: function(c, a) {
	        this._loadingNode = c;
	        var f = {
	            node: c
	        };
	        this.fire("beforeloadnode", f);
	        var d = new Date();
	        var b = this;
	        
	         if(this.ds){
	        	//this.setLoadDataset(this.ds,this.loadParams);
		    	this.loadDataset = kitui.decode(this.ds);
		    	this.loadDataset.setControl(this);
				var sf = this;
				if(this.loadDataset){
					p=this.loadParams||{};
			        if (kitui.isNull(d.pageIndex)) {
			            //p.pageIndex = 0;
			        }
			        if (kitui.isNull(d.pageSize)) {
			            //p.pageSize = this.pageSize;
			        }
			        p.sortField = this.sortField;
			        p.sortOrder = this.sortOrder;
			        var k = this._evalType(a);
			        var h = {
			            data: p,
			            params: p
			        };
			        var g = kitui._evalAjaxData(this.ajaxData, this);
			        kitui.copyTo(h.data, g);
			        kitui.copyTo(h, this.ajaxOptions);
			        this._OnBeforeLoad(h); 
					
					this.loadDataset._load(h.params,function(h){
					b._loadSyncCallback(h,d,b,c,a);
					}
					);				
				}
				return;	        	
	        }
	        
	        
	        b._doLoadAjax(b.loadParams, null, null, null,function(h){
	        b._loadSyncCallback(h,d,b,c,a);
	        } , true);
	    }
	});

	kitui.regClass(kitui.DataTree, "datatree");
	
	
})(jQuery);
///<jscompress sourcefile="jquery.columnmodel.js" />
(function($) {
	kitui.ColumnModel = function(a) {
	    this.owner = a;
	    kitui.ColumnModel.superclass.constructor.call(this);
	    this._init();
	};

	kitui.ColumnModel_ColumnID = 1;

	kitui.extend(kitui.ColumnModel, kitui.Component, {
	    _defaultColumnWidth: 100,
	    _init: function() {
	        this.columns = [];
	        this._columnsRow = [];
	        this._visibleColumnsRow = [];
	        this._bottomColumns = [];
	        this._visibleColumns = [];
	        this._idColumns = {};
	        this._nameColumns = {};
	        this._fieldColumns = {};
	    },
	    getColumns: function() {
	        return this.columns;
	    },
	    getAllColumns: function() {
	        var a = [];
	        for (var c in this._idColumns) {
	            var b = this._idColumns[c];
	            a.push(b);
	        }
	        return a;
	    },
	    getColumnsRow: function() {
	        return this._columnsRow;
	    },
	    getVisibleColumnsRow: function() {
	        return this._visibleColumnsRow;
	    },
	    getBottomColumns: function() {
	        return this._bottomColumns;
	    },
	    getVisibleColumns: function() {
	        return this._visibleColumns;
	    },
	    _getBottomColumnsByColumn: function(f) {
	        f = this.getColumn(f);
	        var d = this._bottomColumns;
	        var e = [];
	        for (var b = 0, a = d.length; b < a; b++) {
	            var g = d[b];
	            if (this.isAncestorColumn(f, g)) {
	                e.push(g);
	            }
	        }
	        return e;
	    },
	    _getVisibleColumnsByColumn: function(f) {
	        f = this.getColumn(f);
	        var d = this._visibleColumns;
	        var e = [];
	        for (var b = 0, a = d.length; b < a; b++) {
	            var g = d[b];
	            if (this.isAncestorColumn(f, g)) {
	                e.push(g);
	            }
	        }
	        return e;
	    },
	    setColumns: function(a) {
	        if (!kitui.isArray(a)) {
	            a = [];
	        }
	        this._init();
	        this.columns = a;
	        this._columnsChanged();
	    },
	    _columnsChanged: function() {
	        this._updateColumnsView();
	        this.fire("columnschanged");
	    },
	    _updateColumnsView: function() {
	        this._maxColumnLevel = 0;
	        var level = 0;
	        function init(column, index, parentColumn) {
	            if (column.type) {
	                if (!kitui.isNull(column.header) && typeof column.header !== "function") {
	                    if (column.header.trim() == "") {
	                        delete column.header;
	                    }
	                }
	                var col = kitui._getColumn(column.type);
	                if (col) {
	                    var _column = kitui.copyTo({}, column);
	                    kitui.copyTo(column, col);
	                    kitui.copyTo(column, _column);
	                }
	            }
	            column._id = kitui.ColumnModel_ColumnID++;
	            column._pid = parentColumn == this ? -1 : parentColumn._id;
	            this._idColumns[column._id] = column;
	            if (column.name) {
	                this._nameColumns[column.name] = column;
	            }
	            column._level = level;
	            level += 1;
	            this.eachColumns(column, init, this);
	            level -= 1;
	            if (column._level > this._maxColumnLevel) {
	                this._maxColumnLevel = column._level;
	            }
	            var width = parseInt(column.width);
	            if (kitui.isNumber(width) && String(width) == column.width) {
	                column.width = width + "px";
	            }
	            if (kitui.isNull(column.width)) {
	                column.width = this._defaultColumnWidth + "px";
	            }
	            column.visible = column.visible !== false;
	            column.allowResize = column.allowResize !== false;
	            column.allowMove = column.allowMove !== false;
	            column.allowSort = column.allowSort === true;
	            column.allowDrag = !!column.allowDrag;
	            column.readOnly = !!column.readOnly;
	            column.autoEscape = !!column.autoEscape;
	            column.vtype = column.vtype || "";
	            if (typeof column.filter == "string") {
	                column.filter = eval("(" + column.filter + ")");
	            }
	            if (column.filter && !column.filter.el) {
	                column.filter = kitui.create(column.filter);
	            }
	            if (typeof column.init == "function" && column.inited != true) {
	                column.init(this.owner);
	            }
	            column.inited = true;
	            column._gridUID = this.owner.uid;
	            column._rowIdField = this.owner._rowIdField;
	        }
	        this.eachColumns(this, init, this);
	        this._createColumnsRow();
	        var index = 0;
	        var view = this._visibleColumns = [];
	        var bottoms = this._bottomColumns = [];
	        this.cascadeColumns(this, function(column) {
	            if (!column.columns || column.columns.length == 0) {
	                bottoms.push(column);
	                if (this.isVisibleColumn(column)) {
	                    view.push(column);
	                    column._index = index++;
	                }
	            }
	        }, this);
	        this._fieldColumns = {};
	        var columns = this.getAllColumns();
	        for (var i = 0, l = columns.length; i < l; i++) {
	            var column = columns[i];
	            if (column.field && !this._fieldColumns[column.field]) {
	                this._fieldColumns[column.field] = column;
	            }
	        }
	        this._createFrozenColSpan();
	    },
	    _frozenStartColumn: -1,
	    _frozenEndColumn: -1,
	    isFrozen: function() {
	        return this._frozenStartColumn >= 0 && this._frozenEndColumn >= this._frozenStartColumn;
	    },
	    frozen: function(b, c) {
	        b = this.getColumn(b);
	        c = this.getColumn(c);
	        var a = this.getVisibleColumns();
	        this._frozenStartColumn = a.indexOf(b);
	        this._frozenEndColumn = a.indexOf(c);
	        if (b && c) {
	            this._columnsChanged();
	        }
	    },
	    unFrozen: function() {
	        this._frozenStartColumn = -1;
	        this._frozenEndColumn = -1;
	        this._columnsChanged();
	    },
	    setFrozenStartColumn: function(a) {
	        this.frozen(a, this._frozenEndColumn);
	    },
	    setFrozenEndColumn: function(a) {
	        this.frozen(this._frozenStartColumn, a);
	    },
	    getFrozenColumns: function() {
	        var c = [], d = this.isFrozen();
	        for (var b = 0, a = this._visibleColumns.length; b < a; b++) {
	            if (d && this._frozenStartColumn <= b && b <= this._frozenEndColumn) {
	                c.push(this._visibleColumns[b]);
	            }
	        }
	        return c;
	    },
	    getUnFrozenColumns: function() {
	        var c = [], d = this.isFrozen();
	        for (var b = 0, a = this._visibleColumns.length; b < a; b++) {
	            if (d && b > this._frozenEndColumn || !d) {
	                c.push(this._visibleColumns[b]);
	            }
	        }
	        return c;
	    },
	    getFrozenColumnsRow: function() {
	        return this.isFrozen() ? this._columnsRow1 : [];
	    },
	    getUnFrozenColumnsRow: function() {
	        return this.isFrozen() ? this._columnsRow2 : this.getVisibleColumnsRow();
	    },
	    _createFrozenColSpan: function() {
	        var s = this;
	        var u = this.getVisibleColumns();
	        var a = this._frozenStartColumn, h = this._frozenEndColumn;
	        function t(z, w) {
	            var y = s.isBottomColumn(z) ? [ z ] : s._getVisibleColumnsByColumn(z);
	            for (var x = 0, j = y.length; x < j; x++) {
	                var A = y[x];
	                var k = u.indexOf(A);
	                if (w == 0 && k < a) {
	                    return true;
	                }
	                if (w == 1 && a <= k && k <= h) {
	                    return true;
	                }
	                if (w == 2 && k > h) {
	                    return true;
	                }
	            }
	            return false;
	        }
	        function b(x, w) {
	            var j = kitui.treeToList(x.columns, "columns");
	            var z = 0;
	            for (var y = 0, k = j.length; y < k; y++) {
	                var A = j[y];
	                if (s.isVisibleColumn(A) == false || t(A, w) == false) {
	                    continue;
	                }
	                if (!A.columns || A.columns.length == 0) {
	                    z += 1;
	                }
	            }
	            return z;
	        }
	        var o = kitui.treeToList(this.columns, "columns");
	        for (var n = 0, f = o.length; n < f; n++) {
	            var e = o[n];
	            delete e.colspan0;
	            delete e.colspan1;
	            delete e.colspan2;
	            delete e.viewIndex0;
	            delete e.viewIndex1;
	            delete e.viewIndex2;
	            if (this.isFrozen()) {
	                if (e.columns && e.columns.length > 0) {
	                    e.colspan1 = b(e, 1);
	                    e.colspan2 = b(e, 2);
	                    e.colspan0 = b(e, 0);
	                } else {
	                    e.colspan1 = 1;
	                    e.colspan2 = 1;
	                    e.colspan0 = 1;
	                }
	                if (t(e, 0)) {
	                    e["viewIndex" + 0] = true;
	                }
	                if (t(e, 1)) {
	                    e["viewIndex" + 1] = true;
	                }
	                if (t(e, 2)) {
	                    e["viewIndex" + 2] = true;
	                }
	            }
	        }
	        var v = this._getMaxColumnLevel();
	        this._columnsRow1 = [];
	        this._columnsRow2 = [];
	        for (var n = 0, f = this._visibleColumnsRow.length; n < f; n++) {
	            var d = this._visibleColumnsRow[n];
	            var r = [];
	            var p = [];
	            this._columnsRow1.push(r);
	            this._columnsRow2.push(p);
	            for (var m = 0, g = d.length; m < g; m++) {
	                var q = d[m];
	                if (q.viewIndex1) {
	                    r.push(q);
	                }
	                if (q.viewIndex2) {
	                    p.push(q);
	                }
	            }
	        }
	    },
	    _createColumnsRow: function() {
	        var m = this._getMaxColumnLevel();
	        var k = [];
	        var a = [];
	        for (var e = 0, d = m; e <= d; e++) {
	            k.push([]);
	            a.push([]);
	        }
	        var h = this;
	        function b(p) {
	            var n = kitui.treeToList(p.columns, "columns");
	            var r = 0;
	            for (var q = 0, o = n.length; q < o; q++) {
	                var s = n[q];
	                if (h.isVisibleColumn(s) == false) {
	                    continue;
	                }
	                if (!s.columns || s.columns.length == 0) {
	                    r += 1;
	                }
	            }
	            return r;
	        }
	        var g = kitui.treeToList(this.columns, "columns");
	        for (var e = 0, d = g.length; e < d; e++) {
	            var c = g[e];
	            var j = k[c._level];
	            var f = a[c._level];
	            delete c.rowspan;
	            delete c.colspan;
	            if (c.columns && c.columns.length > 0) {
	                c.colspan = b(c);
	            }
	            if ((!c.columns || c.columns.length == 0) && c._level < m) {
	                c.rowspan = m - c._level + 1;
	            }
	            j.push(c);
	            if (this.isVisibleColumn(c)) {
	                f.push(c);
	            }
	        }
	        this._columnsRow = k;
	        this._visibleColumnsRow = a;
	    },
	    _getMaxColumnLevel: function() {
	        return this._maxColumnLevel;
	    },
	    cascadeColumns: function(g, f, e) {
	        if (!f) {
	            return;
	        }
	        var b = g.columns;
	        if (b) {
	            b = b.clone();
	            for (var d = 0, a = b.length; d < a; d++) {
	                var h = b[d];
	                if (f.call(e || this, h, d, g) === false) {
	                    return;
	                }
	                this.cascadeColumns(h, f, e);
	            }
	        }
	    },
	    eachColumns: function(f, e, d) {
	        var c = f.columns;
	        if (c) {
	            var g = c.clone();
	            for (var b = 0, a = g.length; b < a; b++) {
	                var h = g[b];
	                if (e.call(d, h, b, f) === false) {
	                    break;
	                }
	            }
	        }
	    },
	    getColumn: function(a) {
	        var b = typeof a;
	        if (b == "number") {
	            return this._visibleColumns[a];
	        } else {
	            if (b == "object") {
	                return a;
	            } else {
	                return this._nameColumns[a];
	            }
	        }
	    },
	    getColumnByField: function(a) {
	        if (!a) {
	            return null;
	        }
	        return this._fieldColumns[a];
	    },
	    _getColumnById: function(a) {
	        return this._idColumns[a];
	    },
	    _getDataTypeByField: function(e) {
	        var f = "string";
	        var c = this.getBottomColumns();
	        for (var b = 0, a = c.length; b < a; b++) {
	            var d = c[b];
	            if (d.field == e) {
	                if (d.dataType) {
	                    f = d.dataType.toLowerCase();
	                }
	                break;
	            }
	        }
	        return f;
	    },
	    getParentColumn: function(b) {
	        b = this.getColumn(b);
	        var a = b._pid;
	        if (a == -1) {
	            return this;
	        }
	        return this._idColumns[a];
	    },
	    getAncestorColumns: function(c) {
	        var b = [ c ];
	        while (1) {
	            var a = this.getParentColumn(c);
	            if (!a || a == this) {
	                break;
	            }
	            b[b.length] = a;
	            c = a;
	        }
	        b.reverse();
	        return b;
	    },
	    isAncestorColumn: function(a, e) {
	        if (a == e) {
	            return true;
	        }
	        if (!a || !e) {
	            return false;
	        }
	        var c = this.getAncestorColumns(e);
	        for (var d = 0, b = c.length; d < b; d++) {
	            if (c[d] == a) {
	                return true;
	            }
	        }
	        return false;
	    },
	    isVisibleColumn: function(d) {
	        d = this.getColumn(d);
	        var c = this.getAncestorColumns(d);
	        for (var b = 0, a = c.length; b < a; b++) {
	            if (c[b].visible == false) {
	                return false;
	            }
	        }
	        return true;
	    },
	    isBottomColumn: function(a) {
	        a = this.getColumn(a);
	        return !(a.columns && a.columns.length > 0);
	    },
	    updateColumn: function(b, a) {
	        b = this.getColumn(b);
	        if (!b) {
	            return;
	        }
	        kitui.copyTo(b, a);
	        this._columnsChanged();
	    },
	    moveColumn: function(d, c, e) {
	        d = this.getColumn(d);
	        c = this.getColumn(c);
	        if (!d || !c || !e || d == c) {
	            return;
	        }
	        if (this.isAncestorColumn(d, c)) {
	            return;
	        }
	        var a = this.getParentColumn(d);
	        if (a) {
	            a.columns.remove(d);
	        }
	        var f = c;
	        var b = e;
	        if (b == "before") {
	            f = this.getParentColumn(c);
	            b = f.columns.indexOf(c);
	        } else {
	            if (b == "after") {
	                f = this.getParentColumn(c);
	                b = f.columns.indexOf(c) + 1;
	            } else {
	                if (b == "add" || b == "append") {
	                    if (!f.columns) {
	                        f.columns = [];
	                    }
	                    b = f.columns.length;
	                } else {
	                    if (!kitui.isNumber(b)) {
	                        return;
	                    }
	                }
	            }
	        }
	        f.columns.insert(b, d);
	        this._columnsChanged();
	    },
	    addColumn: function() {
	        this._columnsChanged();
	    },
	    removeColumn: function() {
	        this._columnsChanged();
	    }
	});
	
})(jQuery);
///<jscompress sourcefile="jquery.panel.js" />
(function($) {
kitui.Panel = function() {
	    this._initButtons();
	    kitui.Panel.superclass.constructor.call(this);
	    if (this.url) {
	        this.setUrl(this.url);
	    }
	    this._contentEl = this._bodyEl;
	    this._doVisibleEls();
	    this._Resizer = new kitui._Resizer(this);
	    this._doTools();
	};

	kitui.extend(kitui.Panel, kitui.Container, {
	    width: 250,
	    title: "",
	    iconCls: "",
	    iconStyle: "",
	    allowResize: false,
	    url: "",
	    refreshOnExpand: false,
	    maskOnLoad: true,
	    showCollapseButton: false,
	    showCloseButton: false,
	    closeAction: "display",
	    showHeader: true,
	    showToolbar: false,
	    showFooter: false,
	    headerCls: "",
	    headerStyle: "",
	    bodyCls: "",
	    bodyStyle: "",
	    footerCls: "",
	    footerStyle: "",
	    toolbarCls: "",
	    toolbarStyle: "",
	    minWidth: 180,
	    minHeight: 100,
	    maxWidth: 5e3,
	    maxHeight: 3e3,
	    set: function(d) {
	        if (typeof d == "string") {
	            return this;
	        }
	        var b = this._allowLayout;
	        this._allowLayout = false;
	        var c = d.toolbar;
	        delete d.toolbar;
	        var e = d.footer;
	        delete d.footer;
	        var a = d.url;
	        delete d.url;
	        kitui.Panel.superclass.set.call(this, d);
	        if (c) {
	            this.setToolbar(c);
	        }
	        if (e) {
	            this.setFooter(e);
	        }
	        if (a) {
	            this.setUrl(a);
	        }
	        this._allowLayout = b;
	        this.doLayout();
	        return this;
	    },
	    uiCls: "kitui-panel",
	    _create: function() {
	    	
	        this.el = document.createElement("div");
	        this.el.className = "kitui-panel";
	        var b = '<div class="kitui-panel-border"><div class="kitui-panel-header" ><div class="kitui-panel-header-inner" ><span class="kitui-panel-icon"></span><div class="kitui-panel-title" ></div><div class="kitui-tools" ></div></div></div><div class="kitui-panel-viewport"><div class="kitui-panel-toolbar"></div><div class="kitui-panel-body" ></div><div class="kitui-panel-footer"></div><div class="kitui-resizer-trigger"></div></div></div>';
	        this.el.innerHTML = b;
	        this._borderEl = this.el.firstChild;
	        this._headerEl = this._borderEl.firstChild;
	        this._viewportEl = this._borderEl.lastChild;
	        this._toolbarEl = kitui.byClass("kitui-panel-toolbar", this.el);
	        this._bodyEl = kitui.byClass("kitui-panel-body", this.el);
	        this._footerEl = kitui.byClass("kitui-panel-footer", this.el);
	        this._resizeGridEl = kitui.byClass("kitui-resizer-trigger", this.el);
	        var a = kitui.byClass("kitui-panel-header-inner", this.el);
	        this._iconEl = kitui.byClass("kitui-panel-icon", this.el);
	        this._titleEl = kitui.byClass("kitui-panel-title", this.el);
	        this._toolsEl = kitui.byClass("kitui-tools", this.el);
	        kitui.setStyle(this._bodyEl, this.bodyStyle);
	        this._doTitle();
	    },
	    destroy: function(a) {
	        this._doRemoveIFrame();
	        this._iframeEl = null;
	        this._viewportEl = this._borderEl = this._bodyEl = this._footerEl = this._toolbarEl = null;
	        this._toolsEl = this._titleEl = this._iconEl = this._resizeGridEl = null;
	        kitui.Panel.superclass.destroy.call(this, a);
	    },
	    _initEvents: function() {
	        kitui._BindEvents(function() {
	            kitui.on(this.el, "click", this.__OnClick, this);
	        }, this);
	    },
	    _doVisibleEls: function() {
	        this._headerEl.style.display = this.showHeader ? "" : "none";
	        this._toolbarEl.style.display = this.showToolbar ? "" : "none";
	        this._footerEl.style.display = this.showFooter ? "" : "none";
	    },
	    _setBodyWidth: true,
	    doLayout: function() {
	        if (!this.canLayout()) {
	            return;
	        }
	        this._resizeGridEl.style.display = this.allowResize ? "" : "none";
	        var c = this.isAutoHeight();
	        var e = this.isAutoWidth();
	        var a = kitui.getWidth(this._viewportEl, true);
	        var d = a;
	        if (!c) {
	            var f = this.getViewportHeight();
	            kitui.setHeight(this._viewportEl, f);
	            var b = this.getBodyHeight(true);
	            kitui.setHeight(this._bodyEl, b);
	        } else {
	            this._viewportEl.style.height = "auto";
	            this._bodyEl.style.height = "auto";
	        }
	        kitui.layout(this._borderEl);
	        this.fire("layout");
	    },
	    deferLayout: function(b) {
	        if (!b) {
	            b = 10;
	        }
	        if (this._layoutTimer) {
	            return;
	        }
	        var a = this;
	        this._layoutTimer = setTimeout(function() {
	            a._layoutTimer = null;
	            a.doLayout();
	        }, b);
	    },
	    _stopLayout: function() {
	        clearTimeout(this._layoutTimer);
	        this._layoutTimer = null;
	    },
	    getViewportWidth: function(a) {
	        return kitui.getWidth(this._viewportEl, a);
	    },
	    getViewportHeight: function(e) {
	        var t = this.getHeight(true) - this.getHeaderHeight();
	        if (e) {
	            var i = kitui.getPaddings(this._viewportEl), n = kitui.getBorders(this._viewportEl), s = kitui.getMargins(this._viewportEl);
	            if (jQuery.boxModel) {
	                t = t - i.top - i.bottom - n.top - n.bottom;
	            }
	            t = t - s.top - s.bottom;
	        }
	        return t;
	    },
	    getBodyHeight: function(c) {
	        var b = this.getViewportHeight();
	        var b = b - this.getToolbarHeight() - this.getFooterHeight();
	        if (c) {
	            var e = kitui.getPaddings(this._bodyEl);
	            var a = kitui.getBorders(this._bodyEl);
	            var d = kitui.getMargins(this._bodyEl);
	            if (jQuery.boxModel) {
	                b = b - e.top - e.bottom - a.top - a.bottom;
	            }
	            b = b - d.top - d.bottom;
	        }
	        if (b < 0) {
	            b = 0;
	        }
	        return b;
	    },
	    getHeaderHeight: function() {
	        var a = this.showHeader ? jQuery(this._headerEl).outerHeight() : 0;
	        return a;
	    },
	    getToolbarHeight: function() {
	        var a = this.showToolbar ? jQuery(this._toolbarEl).outerHeight() : 0;
	        return a;
	    },
	    getFooterHeight: function() {
	        var a = this.showFooter ? jQuery(this._footerEl).outerHeight() : 0;
	        return a;
	    },
	    setHeaderStyle: function(a) {
	        this.headerStyle = a;
	        kitui.setStyle(this._headerEl, a);
	        this.doLayout();
	    },
	    getHeaderStyle: function() {
	        return this.headerStyle;
	    },
	    setBodyStyle: function(a) {
	        this.bodyStyle = a;
	        kitui.setStyle(this._bodyEl, a);
	        this.doLayout();
	    },
	    getBodyStyle: function() {
	        return this.bodyStyle;
	    },
	    setToolbarStyle: function(a) {
	        this.toolbarStyle = a;
	        kitui.setStyle(this._toolbarEl, a);
	        this.doLayout();
	    },
	    getToolbarStyle: function() {
	        return this.toolbarStyle;
	    },
	    setFooterStyle: function(a) {
	        this.footerStyle = a;
	        kitui.setStyle(this._footerEl, a);
	        this.doLayout();
	    },
	    getFooterStyle: function() {
	        return this.footerStyle;
	    },
	    setHeaderCls: function(a) {
	        jQuery(this._headerEl).removeClass(this.headerCls);
	        jQuery(this._headerEl).addClass(a);
	        this.headerCls = a;
	        this.doLayout();
	    },
	    getHeaderCls: function() {
	        return this.headerCls;
	    },
	    setBodyCls: function(a) {
	        jQuery(this._bodyEl).removeClass(this.bodyCls);
	        jQuery(this._bodyEl).addClass(a);
	        this.bodyCls = a;
	        this.doLayout();
	    },
	    getBodyCls: function() {
	        return this.bodyCls;
	    },
	    setToolbarCls: function(a) {
	        jQuery(this._toolbarEl).removeClass(this.toolbarCls);
	        jQuery(this._toolbarEl).addClass(a);
	        this.toolbarCls = a;
	        this.doLayout();
	    },
	    getToolbarCls: function() {
	        return this.toolbarCls;
	    },
	    setFooterCls: function(a) {
	        jQuery(this._footerEl).removeClass(this.footerCls);
	        jQuery(this._footerEl).addClass(a);
	        this.footerCls = a;
	        this.doLayout();
	    },
	    getFooterCls: function() {
	        return this.footerCls;
	    },
	    _doTitle: function() {
	        this._titleEl.innerHTML = this.title;
	        this._iconEl.style.display = this.iconCls || this.iconStyle ? "inline" : "none";
	        this._iconEl.className = "kitui-panel-icon " + this.iconCls;
	        kitui.setStyle(this._iconEl, this.iconStyle);
	    },
	    setTitle: function(a) {
	        this.title = a;
	        this._doTitle();
	    },
	    getTitle: function() {
	        return this.title;
	    },
	    setIconCls: function(a) {
	        this.iconCls = a;
	        this._doTitle();
	    },
	    getIconCls: function() {
	        return this.iconCls;
	    },
	    _doTools: function() {
	        var c = "";
	        for (var b = this.buttons.length - 1; b >= 0; b--) {
	            var a = this.buttons[b];
	            c += '<span id="' + b + '" class="' + a.cls + " " + (a.enabled ? "" : "kitui-disabled") + '" style="' + a.style + ";" + (a.visible ? "" : "display:none;") + '"></span>';
	        }
	        this._toolsEl.innerHTML = c;
	    },
	    setShowCloseButton: function(b) {
	        this.showCloseButton = kitui.toBoolean(b);
	        var a = this.getButton("close");
	        a.visible = b;
	        this._doTools();
	    },
	    getShowCloseButton: function() {
	        return this.showCloseButton;
	    },
	    setCloseAction: function(a) {
	        this.closeAction = a;
	    },
	    getCloseAction: function() {
	        return this.closeAction;
	    },
	    setShowCollapseButton: function(b) {
	        this.showCollapseButton = b;
	        var a = this.getButton("collapse");
	        a.visible = b;
	        this._doTools();
	    },
	    getShowCollapseButton: function() {
	        return this.showCollapseButton;
	    },
	    setShowHeader: function(a) {
	        this.showHeader = kitui.toBoolean(a);
	        this._doVisibleEls();
	        this.deferLayout();
	    },
	    getShowHeader: function() {
	        return this.showHeader;
	    },
	    setShowToolbar: function(a) {
	        this.showToolbar = kitui.toBoolean(a);
	        this._doVisibleEls();
	        this.deferLayout();
	    },
	    getShowToolbar: function() {
	        return this.showToolbar;
	    },
	    setShowFooter: function(a) {
	        this.showFooter = kitui.toBoolean(a);
	        this._doVisibleEls();
	        this.deferLayout();
	    },
	    getShowFooter: function() {
	        return this.showFooter;
	    },
	    __OnClick: function(b) {
	        if (kitui.isAncestor(this._headerEl, b.target)) {
	            var c = kitui.findParent(b.target, "kitui-tools");
	            if (c) {
	                var a = this.getButton(parseInt(b.target.id));
	                if (a) {
	                    this._OnButtonClick(a, b);
	                }
	            }
	        }
	    },
	    _OnButtonClick: function(d, a) {
	        var f = {
	            button: d,
	            index: this.buttons.indexOf(d),
	            name: d.name.toLowerCase(),
	            htmlEvent: a,
	            cancel: false
	        };
	        this.fire("beforebuttonclick", f);
	        try {
	            if (f.name == "close" && this.closeAction == "destroy" && this._iframeEl && this._iframeEl.contentWindow) {
	                var b = true;
	                if (this._iframeEl.contentWindow.CloseWindow) {
	                    b = this._iframeEl.contentWindow.CloseWindow("close");
	                } else {
	                    if (this._iframeEl.contentWindow.CloseOwnerWindow) {
	                        b = this._iframeEl.contentWindow.CloseOwnerWindow("close");
	                    }
	                }
	                if (b === false) {
	                    f.cancel = true;
	                }
	            }
	        } catch (c) {}
	        if (f.cancel == true) {
	            return f;
	        }
	        this.fire("buttonclick", f);
	        if (f.name == "close") {
	            if (this.closeAction == "destroy") {
	                this.__HideAction = "close";
	                this.destroy();
	            } else {
	                this.hide();
	            }
	        }
	        if (f.name == "collapse") {
	            this.toggle();
	            if (this.refreshOnExpand && this.expanded && this.url) {
	                this.reload();
	            }
	        }
	        return f;
	    },
	    onButtonClick: function(b, a) {
	        this.on("buttonclick", b, a);
	    },
	    _initButtons: function() {
	        this.buttons = [];
	        var b = this.createButton({
	            name: "close",
	            cls: "kitui-tools-close",
	            visible: this.showCloseButton
	        });
	        this.buttons.push(b);
	        var a = this.createButton({
	            name: "collapse",
	            cls: "kitui-tools-collapse",
	            visible: this.showCollapseButton
	        });
	        this.buttons.push(a);
	    },
	    createButton: function(a) {
	        var b = kitui.copyTo({
	            name: "",
	            cls: "",
	            style: "",
	            visible: true,
	            enabled: true,
	            html: ""
	        }, a);
	        return b;
	    },
	    addButton: function(b, a) {
	        if (typeof b == "string") {
	            b = {
	                iconCls: b
	            };
	        }
	        b = this.createButton(b);
	        if (typeof a != "number") {
	            a = this.buttons.length;
	        }
	        this.buttons.insert(a, b);
	        this._doTools();
	    },
	    updateButton: function(b, a) {
	        var c = this.getButton(b);
	        if (!c) {
	            return;
	        }
	        kitui.copyTo(c, a);
	        this._doTools();
	    },
	    removeButton: function(a) {
	        var b = this.getButton(a);
	        if (!b) {
	            return;
	        }
	        this.buttons.remove(b);
	        this._doTools();
	    },
	    getButton: function(b) {
	        if (typeof b == "number") {
	            return this.buttons[b];
	        } else {
	            for (var d = 0, a = this.buttons.length; d < a; d++) {
	                var c = this.buttons[d];
	                if (c.name == b) {
	                    return c;
	                }
	            }
	        }
	    },
	    setBody: function(a) {
	        __kitui_setControls(a, this._bodyEl, this);
	    },
	    set_bodyParent: function(a) {},
	    setToolbar: function(a) {
	        __kitui_setControls(a, this._toolbarEl, this);
	    },
	    setFooter: function(a) {
	        __kitui_setControls(a, this._footerEl, this);
	    },
	    getHeaderEl: function() {
	        return this._headerEl;
	    },
	    getToolbarEl: function() {
	        return this._toolbarEl;
	    },
	    getBodyEl: function() {
	        return this._bodyEl;
	    },
	    getFooterEl: function() {
	        return this._footerEl;
	    },
	    getIFrameEl: function(a) {
	        return this._iframeEl;
	    },
	    _getMaskWrapEl: function() {
	        return this._bodyEl;
	    },
	    _doRemoveIFrame: function(c) {
	        if (this._iframeEl) {
	            var b = this._iframeEl;
	            if (b._ondestroy) {
	            	try{
	            		b._ondestroy();
	            	}catch(e){}
	            }
				try {
	                b.parentNode.removeChild(b);
	                b.removeNode(true);
	            } catch (a) {}
	        }
	        this._iframeEl = null;
	        if (c === true) {
	            kitui.removeChilds(this._bodyEl);
	        }
	    },
	    _deferLoadingTime: 80,
	    _doLoad: function() {
	        this._doRemoveIFrame(true);
	        var a = new Date();
	        var c = this;
	        this.loadedUrl = this.url;
	        if (this.maskOnLoad) {
	            this.loading();
	        }
	        var b = kitui.createIFrame(this.url, function(h, g) {
	            var d = a - new Date() + c._deferLoadingTime;
	            if (d < 0) {
	                d = 0;
	            }
	            setTimeout(function() {
	                c.unmask();
	            }, d);
	            try {
	                c._iframeEl.contentWindow.Owner = c.Owner;
	                c._iframeEl.contentWindow.CloseOwnerWindow = function(j) {
	                    c.__HideAction = j;
	                    var i = true;
	                    if (c.__onDestroy) {
	                        i = c.__onDestroy(j);
	                    }
	                    if (i === false) {
	                        return false;
	                    }
	                    var k = {
	                        iframe: c._iframeEl,
	                        action: j
	                    };
	                    c.fire("unload", k);
	                    setTimeout(function() {
	                        c.destroy();
	                    }, 10);
	                };
	            } catch (f) {}
	            if (g) {
	                if (c.__onLoad) {
	                    c.__onLoad();
	                }
	                var f = {
	                    iframe: c._iframeEl
	                };
	                c.fire("load", f);
	            }
	        });
	        this._bodyEl.appendChild(b);
	        this._iframeEl = b;
	    },
	    load: function(a, c, b) {
	        this.setUrl(a, c, b);
	    },
	    reload: function() {
	        this.setUrl(this.url);
	    },
	    setUrl: function(a, c, b) {
	        this.url = a;
	        this.__onLoad = c;
	        this.__onDestroy = b;
	        if (this.expanded) {
	            this._doLoad();
	        }
	    },
	    getUrl: function() {
	        return this.url;
	    },
	    setRefreshOnExpand: function(a) {
	        this.refreshOnExpand = a;
	    },
	    getRefreshOnExpand: function() {
	        return this.refreshOnExpand;
	    },
	    setMaskOnLoad: function(a) {
	        this.maskOnLoad = a;
	    },
	    getMaskOnLoad: function(a) {
	        return this.maskOnLoad;
	    },
	    setAllowResize: function(a) {
	        if (this.allowResize != a) {
	            this.allowResize = a;
	            this.doLayout();
	        }
	    },
	    getAllowResize: function() {
	        return this.allowResize;
	    },
	    expanded: true,
	    setExpanded: function(a) {
	        if (this.expanded != a) {
	            this.expanded = a;
	            if (this.expanded) {
	                this.expand();
	            } else {
	                this.collapse();
	            }
	        }
	    },
	    toggle: function() {
	        if (this.expanded) {
	            this.collapse();
	        } else {
	            this.expand();
	        }
	    },
	    collapse: function() {
	        this.expanded = false;
	        this._height = this.el.style.height;
	        this.el.style.height = "auto";
	        this._viewportEl.style.display = "none";
	        kitui.addClass(this.el, "kitui-panel-collapse");
	        this.doLayout();
	    },
	    expand: function() {
	        this.expanded = true;
	        this.el.style.height = this._height;
	        this._viewportEl.style.display = "block";
	        delete this._height;
	        kitui.removeClass(this.el, "kitui-panel-collapse");
	        if (this.url && this.url != this.loadedUrl) {
	            this._doLoad();
	        }
	        this.doLayout();
	    },
	    getAttrs: function(d) {
	        var a = kitui.Panel.superclass.getAttrs.call(this, d);
	        //kitui._ParseString(d, a, [ "title", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle", "footerCls", "footerStyle", "toolbarCls", "toolbarStyle", "footer", "toolbar", "url", "closeAction", "loadingMsg", "onbeforebuttonclick", "onbuttonclick", "onload" ]);
	       // kitui._ParseBool(d, a, [ "allowResize", "showCloseButton", "showHeader", "showToolbar", "showFooter", "showCollapseButton", "refreshOnExpand", "maskOnLoad", "expanded" ]);
	        var c = kitui.getChildNodes(d, true);
	        for (var b = c.length - 1; b >= 0; b--) {
	            var e = c[b];
	            var f = jQuery(e).attr("property");
	            if (!f) {
	                continue;
	            }
	            f = f.toLowerCase();
	            if (f == "toolbar") {
	                a.toolbar = e;
	            } else {
	                if (f == "footer") {
	                    a.footer = e;
	                }
	            }
	        }
	        a.body = c;
	        return a;
	    }
	});

	kitui.regClass(kitui.Panel, "panel");
	
})(jQuery);
///<jscompress sourcefile="jquery.gridview.js" />
(function($) {
	
	kitui._DataTableApplys = {
		    setAjaxData: function(a) {
		        this._dataSource.ajaxData = a;
		    },
		    getby_id: function(a) {
		        return this._dataSource.getby_id(a);
		    },
		    getValueAndText: function(b, a) {
		        return this._dataSource.getValueAndText(b, a);
		    },
		    setIdField: function(a) {
		        this._dataSource.setIdField(a);
		        this.idField = a;
		    },
		    getIdField: function() {
		        return this._dataSource.idField;
		    },
		    setTextField: function(a) {
		        this._dataSource.setTextField(a);
		        this.textField = a;
		    },
		    getTextField: function() {
		        return this._dataSource.textField;
		    },
		    clearData: function() {
		        this._dataSource.clearData();
		    },
		    clearRows: function() {
		        this._dataSource.clearData();
		    },		    
		    loadData: function(a) {
		        this._dataSource.loadData(a);
		    },
		    setData: function(a) {
		        this._dataSource.loadData(a);
		    },
		    getData: function() {
		        return this._dataSource.getSource();
		    },
		    getList: function() {
		        return this._dataSource.getList();
		    },
		    getDataView: function() {
		        return this._dataSource.getDataView().clone();
		    },
		    getVisibleRows: function() {
		        if (this._useEmptyView) {
		            return [];
		        }
		        return this._dataSource.getVisibleRows();
		    },
		    toArray: function() {
		        return this._dataSource.toArray();
		    },
		    getRecord: function(a) {
		        return this._dataSource.getRecord(a);
		    },
		    getRow: function(a) {
		        return this._dataSource.getRow(a);
		    },
		    getRange: function(b, a) {
		        if (kitui.isNull(b) || kitui.isNull(a)) {
		            return;
		        }
		        return this._dataSource.getRange(b, a);
		    },
		    getAt: function(a) {
		        return this._dataSource.getAt(a);
		    },
		    indexOf: function(a) {
		        return this._dataSource.indexOf(a);
		    },
		    getRowByUID: function(a) {
		        return this._dataSource.getby_id(a);
		    },
		    getRowById: function(a) {
		        return this._dataSource.getbyId(a);
		    },
		    updateRow: function(a, c, b) {
		        this._dataSource.updateRecord(a, c, b);
		    },
		    addRow: function(a, b) {
		        return this._dataSource.insert(b, a);
		    },
		    removeRow: function(a, b) {
		        return this._dataSource.remove(a, b);
		    },
		    removeRows: function(a, b) {
		        return this._dataSource.removeRange(a, b);
		    },
		    removeRowAt: function(b, a) {
		        return this._dataSource.removeAt(b, a);
		    },
		    moveRow: function(b, a) {
		        this._dataSource.move(b, a);
		    },
		    addRows: function(a, b) {
		        return this._dataSource.insertRange(b, a);
		    },
		    findRows: function(b, a) {
		        return this._dataSource.findRecords(b, a);
		    },
		    findRow: function(b, a) {
		        return this._dataSource.findRecord(b, a);
		    },
		    multiSelect: false,
		    setMultiSelect: function(a) {
		        this._dataSource.setMultiSelect(a);
		        this.multiSelect = a;
		    },
		    getMultiSelect: function() {
		        return this._dataSource.getMultiSelect();
		    },
		    setCurrent: function(a) {
		        this._dataSource.setCurrent(a);
		    },
		    getCurrent: function() {
		        return this._dataSource.getCurrent();
		    },
		    isSelected: function(a) {
		        return this._dataSource.isSelected(a);
		    },
		    getSelected: function() {
		        return this._dataSource.getSelected();
		    },
		    getSelecteds: function() {
		        return this._dataSource.getSelecteds();
		    },
		    select: function(a) {
		        this._dataSource.select(a);
		    },
		    selects: function(a) {
		        this._dataSource.selects(a);
		    },
		    deselect: function(a) {
		        this._dataSource.deselect(a);
		    },
		    deselects: function(a) {
		        this._dataSource.deselects(a);
		    },
		    selectAll: function() {
		        this._dataSource.selectAll();
		    },
		    deselectAll: function() {
		        this._dataSource.deselectAll();
		    },
		    selectPrev: function() {
		        this._dataSource.selectPrev();
		    },
		    selectNext: function() {
		        this._dataSource.selectNext();
		    },
		    selectFirst: function() {
		        this._dataSource.selectFirst();
		    },
		    selectLast: function() {
		        this._dataSource.selectLast();
		    },
		    selectRange: function(b, a) {
		        this._dataSource.selectRange(b, a);
		    },
		    filter: function(b, a) {
		        this._dataSource.filter(b, a);
		    },
		    clearFilter: function() {
		        this._dataSource.clearFilter();
		    },
		    sort: function(b, a) {
		        this._dataSource.sort(b, a);
		    },
		    clearSort: function() {
		        this._dataSource.clearSort();
		    },
		    getResultObject: function() {
		        return this._dataSource._resultObject || {};
		    },
		    getChanges: function(b, a) {
		        return this._dataSource.getChanges(b, a);
		    },
		    accept: function() {
		        this._dataSource.accept();
		    },
		    reject: function() {
		        this._dataSource.reject();
		    },
		    acceptRecord: function(a) {
		        this._dataSource.acceptRecord(a);
		    },
		    rejectRecord: function(a) {
		        this._dataSource.rejectRecord(a);
		    }
		};

	
	
	kitui.GridView = function() {
	    this._createTime = new Date();
	    this._createColumnModel();
	    this._bindColumnModel();
	    this._createSource();
	    this._bindSource();
	    this._initData();
	    kitui.GridView.superclass.constructor.call(this);
	    this._doUpdateFilterRow();
	    this._doUpdateSummaryRow();
	    var t = this;
	    setTimeout(function(){t.doUpdate();},1)
	    
	};

	kitui.extend(kitui.GridView, kitui.Panel, {
	    _displayStyle: "block",
	    _rowIdField: "_id",
	    width: "100%",
	    showColumns: true,
	    showFilterRow: false,
	    showSummaryRow: false,
	    showPager: false,
	    allowCellWrap: false,
	    allowHeaderCellWrap: false,
	    showModified: false,
	    showNewRow: true,
	    showEmptyText: false,
	    emptyText: "No data returned.",
	    showHGridLines: true,
	    showVGridLines: true,
	    allowAlternating: false,
	    _alternatingCls: "kitui-grid-row-alt",
	    _rowCls: "kitui-grid-row",
	    _cellCls: "kitui-grid-cell",
	    _headerCellCls: "kitui-grid-headerCell",
	    _rowSelectedCls: "kitui-grid-row-selected",
	    _rowHoverCls: "kitui-grid-row-hover",
	    _cellSelectedCls: "kitui-grid-cell-selected",
	    defaultRowHeight: 21,
	    fixedRowHeight: false,
	    isFixedRowHeight: function() {
	        return this.fixedRowHeight;
	    },
	    fitColumns: true,
	    isFitColumns: function() {
	        return this.fitColumns;
	    },
	    uiCls: "kitui-gridview",
	    _create: function() {
	    
	        kitui.GridView.superclass._create.call(this);
	        var e = this.el;
	        kitui.addClass(e, "kitui-grid");
	        kitui.addClass(this._viewportEl, "kitui-grid-viewport");
	        var a = '<div class="kitui-grid-pager"></div>';
	        var d = '<div class="kitui-grid-filterRow"><div class="kitui-grid-filterRow-view"></div><div class="kitui-grid-scrollHeaderCell"></div></div>';
	        var b = '<div class="kitui-grid-summaryRow"><div class="kitui-grid-summaryRow-view"></div><div class="kitui-grid-scrollHeaderCell"></div></div>';
	        var c = '<div class="kitui-grid-columns"><div class="kitui-grid-columns-view"></div><div class="kitui-grid-scrollHeaderCell"></div></div>';
	        this._columnsEl = kitui.after(this._toolbarEl, c);
	        this._filterEl = kitui.after(this._columnsEl, d);
	        this._rowsEl = this._bodyEl;
	        kitui.addClass(this._rowsEl, "kitui-grid-rows");
	        this._summaryEl = kitui.after(this._rowsEl, b);
	        this._bottomPagerEl = kitui.after(this._summaryEl, a);
	        this._columnsViewEl = this._columnsEl.childNodes[0];
	        this._topRightCellEl = this._columnsEl.childNodes[1];
	        this._rowsViewEl = kitui.append(this._rowsEl, '<div class="kitui-grid-rows-view"><div class="kitui-grid-rows-content"></div></div>');
	        this._rowsViewContentEl = this._rowsViewEl.firstChild;
	        this._filterViewEl = this._filterEl.childNodes[0];
	        this._summaryViewEl = this._summaryEl.childNodes[0];
	    },
	    _initEvents: function() {
	        kitui.GridView.superclass._initEvents.call(this);
	        kitui.on(this._rowsViewEl, "scroll", this.__OnRowViewScroll, this);
	    },
	    _setBodyWidth: false,
	    doLayout: function() {
	        var e = this;
	        if (!this.canLayout()) {
	            return;
	        }
	        kitui.GridView.superclass.doLayout.call(this);
	        this._stopLayout();
	        var t = (this.isAutoHeight(), this._columnsViewEl.firstChild), i = this._rowsViewContentEl.firstChild, n = this._filterViewEl.firstChild, s = this._summaryViewEl.firstChild;
	        function o(e) {
	            if (this.isFitColumns()) {
	                i.style.width = "100%";
	                if (kitui.isSafari || kitui.isChrome || kitui.isIE6) {
	                    e.style.width = i.offsetWidth + "px";
	                } else {
	                    if (this._rowsViewEl.scrollHeight > this._rowsViewEl.clientHeight + 1) {
	                        e.style.width = "100%";
	                        e.parentNode.style.width = "auto";
	                        e.parentNode.style.paddingRight = kitui.getScrollOffset() + "px";
	                        if (kitui.isIE8) {
	                            kitui.removeClass(this._rowsViewEl, "kitui-grid-hidden-y");
	                        }
	                    } else {
	                        e.style.width = "100%";
	                        e.parentNode.style.width = "auto";
	                        e.parentNode.style.paddingRight = "0px";
	                        if (kitui.isIE8) {
	                            kitui.addClass(this._rowsViewEl, "kitui-grid-hidden-y");
	                        }
	                    }
	                }
	            } else {
	                i.style.width = "0px";
	                e.style.width = "0px";
	                if (kitui.isSafari || kitui.isChrome || kitui.isIE6) {
	                    ;
	                } else {
	                    e.parentNode.style.width = "100%";
	                    e.parentNode.style.paddingRight = "0px";
	                }
	            }
	        }
	        o.call(this, t);
	        o.call(this, n);
	        o.call(this, s);
	        this._syncScroll();
	        var r = this;
	        setTimeout(function() {
	            kitui.layout(r._filterEl);
	            kitui.layout(r._summaryEl);
	        }, 10);
	        if (kitui.isIE6) {
	            setTimeout(function() {
	                o.call(e, t);
	            }, 1);
	        }
	        if (kitui.isIE10) {
	            setTimeout(function() {
	                if (r.isFitColumns()) {
	                    t.style.width = "auto";
	                    t.offsetWidth;
	                    t.style.width = "100%";
	                } else {
	                    t.style.width = "0px";
	                }
	            }, 0);
	            kitui.repaint(i);
	        }
	        this._topRightCellEl = this._columnsViewEl.childNodes[1];
	        if (kitui.isIE6) {
	            this._topRightCellEl.style.height = $(this._columnsViewEl).height() + "px";
	        }
   		},
	    setBody: function() {},
	    _createTopRowHTML: function(c) {
	        var f = "";
	        if (kitui.isIE) {
	            if (kitui.isIE6 || kitui.isIE7 || !kitui.boxModel) {
	                f += '<tr style="display:none;">';
	            } else {
	                f += "<tr >";
	            }
	        } else {
	            f += "<tr>";
	        }
	        for (var b = 0, a = c.length; b < a; b++) {
	            var e = c[b];
	            var d = e.width;
	            var g = e._id;
	            f += '<td id="' + g + '" style="padding:0;border:0;margin:0;height:0px;';
	            if (e.width) {
	                f += "width:" + e.width;
	            }
	            f += '" ></td>';
	        }
	        f += '<td style="width:0px;"></td>';
	        f += "</tr>";
	        return f;
	    },
	    _createColumnsHTML: function(t, s, r) {
	    	
	        var r = r ? r : this.getVisibleColumns();
	        var q = [ '<table class="kitui-grid-table" cellspacing="0" cellpadding="0" border="0">' ];
	        q.push(this._createTopRowHTML(r));
	        var p = this.getSortField();
	        var c = this.getSortOrder();
	        for (var m = 0, g = t.length; m < g; m++) {
	            var f = t[m];
	            q[q.length] = "<tr>";
	            for (var n = 0, e = f.length; n < e; n++) {
	                var d = f[n];
	                var o = this._createHeaderText(d, s);
	                var a = this._createHeaderCellId(d, s);
	                var h = "";
	                if (p && p == d.field) {
	                    h = c == "asc" ? "kitui-grid-asc" : "kitui-grid-desc";
	                }
	                q[q.length] = '<td id="';
	                q[q.length] = a;
	                q[q.length] = '" class="kitui-grid-headerCell ' + h + " " + (d.headerCls || "") + " ";
	                var b = !(d.columns && d.columns.length > 0);
	                if (b) {
	                    q[q.length] = " kitui-grid-bottomCell ";
	                }
	                if (n == e - 1) {
	                    q[q.length] = " kitui-grid-rightCell ";
	                }
	                q[q.length] = '" style="';
	                if (d.headerStyle) {
	                    q[q.length] = d.headerStyle + ";";
	                }
	                if (d.headerAlign) {
	                    q[q.length] = "text-align:" + d.headerAlign + ";";
	                }
	                q[q.length] = '" ';
	                if (d.rowspan) {
	                    q[q.length] = 'rowspan="' + d.rowspan + '" ';
	                }
	                this._createColumnColSpan(d, q, s);
	                q[q.length] = '><div class="kitui-grid-headerCell-inner">';
	                q[q.length] = o;
	                if (h) {
	                    q[q.length] = '<span class="kitui-grid-sortIcon"></span>';
	                }
	                q[q.length] = '<div id="' + d._id + '" class="kitui-grid-column-splitter"></div>';
	                q[q.length] = "</div></td>";
	            }
	            if (this.isFrozen() && s == 1) {
	                q[q.length] = '<td class="kitui-grid-headerCell" style="width:0;"><div class="kitui-grid-headerCell-inner" style="';
	                q[q.length] = '">0</div></td>';
	            }
	            q[q.length] = "</tr>";
	        }
	        q.push("</table>");
	 
	        return q.join("");
	    },
	    _createHeaderText: function(b, a) {
	        var c = b.header;
	        if (typeof c == "function") {
	            c = c.call(this, b);
	        }
	        if (kitui.isNull(c) || c === "") {
	            c = "&nbsp;";
	        }
	        return c;
	    },
	    _createColumnColSpan: function(b, c, a) {
	        if (b.colspan) {
	            c[c.length] = 'colspan="' + b.colspan + '" ';
	        }
	    },
	    doUpdateColumns: function() {
	        var d = this._columnsViewEl.scrollLeft;
	        var c = this.getVisibleColumnsRow();
	        var a = this._createColumnsHTML(c, 2);
	        var b = '<div class="kitui-grid-topRightCell"></div>';
	        a += b;
	        this._columnsViewEl.innerHTML = a;
	        this._columnsViewEl.scrollLeft = d;
	    },
	    doUpdate: function() {
	        if (this.canUpdate() == false) {
	            return;
	        }
	        var c = this._isCreating();
	        var b = new Date();
	        this._doUpdateSummaryRow();
	        var a = this,n = this.getScrollLeft();
	        function d() {
	            a.doUpdateRows();
	            a.doLayout();
	            a._doUpdateTimer = null;
	        }
	        a.doUpdateColumns();
	        if (c) {
	            this._useEmptyView = true;
	        }
	        if (this._rowsViewContentEl && this._rowsViewContentEl.firstChild) {
	            this._rowsViewContentEl.removeChild(this._rowsViewContentEl.firstChild);
	        }
	        if (this._rowsLockContentEl && this._rowsLockContentEl.firstChild) {
	            this._rowsLockContentEl.removeChild(this._rowsLockContentEl.firstChild);
	        }
	        a.doUpdateRows();
	        if (n > 0 && a.isVirtualScroll()) {
	            a.setScrollLeft(n);
	        }	        
	        if (c) {
	            this._useEmptyView = false;
	        }
	        a.doLayout();
	        if (c && !this._doUpdateTimer) {
	            this._doUpdateTimer = setTimeout(d, 15);
	        }
	        this.unmask();
	    },
	    _isCreating: function() {
	        return new Date() - this._createTime < 1e3;
	    },
	    deferUpdate: function(b) {
	        if (!b) {
	            b = 5;
	        }
	        if (this._updateTimer || this._doUpdateTimer) {
	            return;
	        }
	        var a = this;
	        this._updateTimer = setTimeout(function() {
	            a._updateTimer = null;
	            a.doUpdate();
	        }, b);
	    },
	    _updateCount: 0,
	    beginUpdate: function() {
	        this._updateCount++;
	    },
	    endUpdate: function(a) {
	        this._updateCount--;
	        if (this._updateCount == 0 || a === true) {
	            this._updateCount = 0;
	            this.doUpdate();
	        }
	    },
	    canUpdate: function() {
	        return this._updateCount == 0;
	    },
	    _getRowHeight: function(a) {
	        var b = this.defaultRowHeight;
	        if (a._height) {
	            b = parseInt(a._height);
	            if (isNaN(parseInt(a._height))) {
	                b = rowHeight;
	            }
	        }
	        b -= 4;
	        b -= 1;
	        return b;
	    },
	    _createGroupingHTML: function(g, s) {
	        var f = this.getGroupingView();
	        var b = this._showGroupSummary;
	        var n = this.isFrozen();
	        var q = 0;
	        var o = this;
	        function m(u, v) {
	            p.push('<table class="kitui-grid-table" cellspacing="0" cellpadding="0" border="0">');
	            if (g.length > 0) {
	                p.push(o._createTopRowHTML(g));
	                for (var t = 0, e = u.length; t < e; t++) {
	                    var w = u[t];
	                    o._createRowHTML(w, q++, g, s, p);
	                }
	            }
	            if (b) {}
	            p.push("</table>");
	        }
	        var p = [ '<table class="kitui-grid-table" cellspacing="0" cellpadding="0" border="0">' ];
	        p.push(this._createTopRowHTML(g));
	        for (var i = 0, h = f.length; i < h; i++) {
	            var r = f[i];
	            var d = this._createRowGroupId(r, s);
	            var c = this._createRowGroupRowsId(r, s);
	            var l = this._OnDrawGroup(r);
	            p[p.length] = '<tr id="';
	            p[p.length] = d;
	            p[p.length] = '" class="kitui-grid-groupRow"><td class="kitui-grid-groupCell" colspan="';
	            p[p.length] = g.length;
	            p[p.length] = '"><div class="kitui-grid-groupHeader">';
	            if (!n || n && s == 1) {
	                p[p.length] = '<div class="kitui-grid-group-ecicon"></div>';
	                p[p.length] = '<div class="kitui-grid-groupTitle">' + l.cellHtml + "</div>";
	            } else {
	                p[p.length] = "&nbsp;";
	            }
	            p[p.length] = "</div></td></tr>";
	            var a = r.expanded ? "" : "display:none";
	            p[p.length] = '<tr class="kitui-grid-groupRows-tr" style="';
	            if (kitui.isIE) {
	                p[p.length] = a;
	            }
	            p[p.length] = '"><td class="kitui-grid-groupRows-td" colspan="';
	            p[p.length] = g.length;
	            p[p.length] = '"><div id="';
	            p[p.length] = c;
	            p[p.length] = '" class="kitui-grid-groupRows" style="';
	            p[p.length] = a;
	            p[p.length] = '">';
	            m(r.rows, r);
	            p[p.length] = "</div></td></tr>";
	        }
	        p.push("</table>");
	        return p.join("");
	    },
	    _isFastCreating: function() {
	        var a = this.getVisibleRows();
	        if (a.length > 50) {
	            return this._isCreating() || this.getScrollTop() < 50 * this._defaultRowHeight;
	        }
	        return false;
	    },
	    _createRowHTML: function(g, p, d, n, a) {
	        var m = !a;
	        if (!a) {
	            a = [];
	        }
	        var f = "";
	        var s = this.isFixedRowHeight();
	        if (s) {
	            f = this._getRowHeight(g);
	        }
	        var k = -1;
	        var q = " ";
	        var j = -1;
	        var v = " ";
	        a[a.length] = '<tr class="kitui-grid-row ';
	        if (g._state == "added" && this.showNewRow) {
	            a[a.length] = "kitui-grid-newRow ";
	        }
	        if (this.allowAlternating && p % 2 == 1) {
	            a[a.length] = this._alternatingCls;
	            a[a.length] = " ";
	        }
	        var o = this._dataSource.isSelected(g);
	        if (o) {
	            a[a.length] = this._rowSelectedCls;
	            a[a.length] = " ";
	        }
	        k = a.length;
	        a[a.length] = q;
	        a[a.length] = '" style="';
	        j = a.length;
	        a[a.length] = v;
	        a[a.length] = '" id="';
	        a[a.length] = this._createRowId(g, n);
	        a[a.length] = '">';
	        var x = this._currentCell;
	        for (var t = 0, r = d.length; t < r; t++) {
	            var h = d[t];
	            var w = this._createCellId(g, h);
	            var c = "";
	            var u = this._OnDrawCell(g, h, p, h._index);
	            if (u.cellHtml === null || u.cellHtml === undefined || u.cellHtml === "") {
	                u.cellHtml = "&nbsp;";
	            }
	            a[a.length] = "<td ";
	            if (u.rowSpan) {
	                a[a.length] = 'rowspan="' + u.rowSpan + '"';
	            }
	            if (u.colSpan) {
	                a[a.length] = 'colspan="' + u.colSpan + '"';
	            }
	            a[a.length] = ' id="';
	            a[a.length] = w;
	            a[a.length] = '" class="kitui-grid-cell ';
	            if (t == r - 1) {
	                a[a.length] = " kitui-grid-rightCell ";
	            }
	            if (u.cellCls) {
	                a[a.length] = " " + u.cellCls + " ";
	            }
	            if (c) {
	                a[a.length] = c;
	            }
	            if (x && x[0] == g && x[1] == h) {
	                a[a.length] = " ";
	                a[a.length] = this._cellSelectedCls;
	            }
	            a[a.length] = '" style="';
	            if (u.showHGridLines == false) {
	                a[a.length] = "border-bottom:0;";
	            }
	            if (u.showVGridLines == false) {
	                a[a.length] = "border-right:0;";
	            }
	            if (!u.visible) {
	                a[a.length] = "display:none;";
	            }
	            if (h.align) {
	                a[a.length] = "text-align:";
	                a[a.length] = h.align;
	                a[a.length] = ";";
	            }
	            if (u.cellStyle) {
	                a[a.length] = u.cellStyle;
	            }
	            a[a.length] = '">';
	            a[a.length] = '<div class="kitui-grid-cell-inner ';
	            if (!u.allowCellWrap) {
	                a[a.length] = " kitui-grid-cell-nowrap ";
	            }
	            if (u.cellInnerCls) {
	                a[a.length] = u.cellInnerCls;
	            }
	            var b = h.field ? this._dataSource.isModified(g, h.field) : false;
	            if (b && this.showModified) {
	                a[a.length] = " kitui-grid-cell-dirty";
	            }
	            a[a.length] = '" style="';
	            if (s) {
	                a[a.length] = "height:";
	                a[a.length] = f;
	                a[a.length] = "px;";
	            }
	            if (u.cellInnerStyle) {
	                a[a.length] = u.cellInnerStyle;
	            }
	            a[a.length] = '">';
	            a[a.length] = u.cellHtml;
	            a[a.length] = "</div>";
	            a[a.length] = "</td>";
	            if (u.rowCls) {
	                q = u.rowCls;
	            }
	            if (u.rowStyle) {
	                v = u.rowStyle;
	            }
	        }
	        if (this.isFrozen() && n == 1) {
	            a[a.length] = '<td class="kitui-grid-cell" style="width:0;';
	            if (this.showHGridLines == false) {
	                a[a.length] = "border-bottom:0;";
	            }
	            a[a.length] = '"><div class="kitui-grid-cell-inner" style="';
	            if (s) {
	                a[a.length] = "height:";
	                a[a.length] = f;
	                a[a.length] = "px;";
	            }
	            a[a.length] = '">0</div></td>';
	        }
	        a[k] = q;
	        a[j] = v;
	        a[a.length] = "</tr>";
	        if (m) {
	            return a.join("");
	        }
	    },
	    _createRowsHTML: function(a, n, d, i) {
	        d = d || this.getVisibleRows();
	        var h = [ '<table class="kitui-grid-table" cellspacing="0" cellpadding="0" border="0">' ];
	        h.push(this._createTopRowHTML(a));
	        var l = this.uid + "$emptytext" + n;
	        h.push('<tr id="' + l + '" style="display:none;"><td class="kitui-grid-emptyText" colspan="' + a.length + '">' + this.emptyText + "</td></tr>");
	        var m = 0;
	        if (d.length > 0) {
	            var f = d[0];
	            m = this.getVisibleRows().indexOf(f);
	        }
	        for (var c = 0, b = d.length; c < b; c++) {
	            var g = m + c;
	            var e = d[c];
	            this._createRowHTML(e, g, a, n, h);
	        }
	        if (i) {
	            h.push(i);
	        }
	        h.push("</table>");
	        return h.join("");
	    },
	    doUpdateRows: function() {
	        var c = this.getVisibleRows();
	        var b = this.getVisibleColumns();
	        if (this.isGrouping()) {
	            var a = this._createGroupingHTML(b, 2);
	            this._rowsViewContentEl.innerHTML = a;
	        } else {
	            var a = this._createRowsHTML(b, 2, c);
	            this._rowsViewContentEl.innerHTML = a;
	        }
	    },
	    _createFilterRowHTML: function(d, b) {
	        var h = [ '<table class="kitui-grid-table" cellspacing="0" cellpadding="0" border="0">' ];
	        h.push(this._createTopRowHTML(d));
	        h[h.length] = "<tr>";
	        for (var c = 0, a = d.length; c < a; c++) {
	            var f = d[c];
	            var g = this._createFilterCellId(f);
	            h[h.length] = '<td id="';
	            h[h.length] = g;
	            h[h.length] = '" class="kitui-grid-filterCell" style="';
	            h[h.length] = '">&nbsp;</td>';
	        }
	        h[h.length] = '</tr></table><div class="kitui-grid-scrollHeaderCell"></div>';
	        var e = h.join("");
	        return e;
	    },
	    _doRenderFilters: function() {
	        var d = this.getVisibleColumns();
	        for (var c = 0, a = d.length; c < a; c++) {
	            var e = d[c];
	            if (e.filter) {
	                var b = this.getFilterCellEl(c);
	                b.innerHTML = "";
	                e.filter.render(b);
	            }
	        }
	    },
	    _doUpdateFilterRow: function() {
	        if (this._filterViewEl.firstChild) {
	            this._filterViewEl.removeChild(this._filterViewEl.firstChild);
	        }
	        var c = this.isFrozen();
	        var b = this.getVisibleColumns();
	        var a = this._createFilterRowHTML(b, 2);
	        this._filterViewEl.innerHTML = a;
	        this._doRenderFilters();
	    },
	    _createSummaryRowHTML: function(d, k) {
	    	
	        var b = this.getDataView();

	        var j = [ '<table class="kitui-grid-table" cellspacing="0" cellpadding="0" border="0">' ];
	        j.push(this._createTopRowHTML(d));
	        j[j.length] = "<tr>";
	        for (var g = 0, f = d.length; g < f; g++) {
	            var c = d[g];
	            var a = this._createSummaryCellId(c);
	            var h = this._OnDrawSummaryCell(b, c);
	            j[j.length] = '<td id="';
	            j[j.length] = a;
	            j[j.length] = '" class="kitui-grid-summaryCell ' + h.cellCls + '" style="' + h.cellStyle + ";";
	            j[j.length] = ' text-align:'+(c.align||"")+';';
	            j[j.length] = '">';
	            j[j.length] = h.cellHtml;
	            j[j.length] = "</td>";
	        }
	        j[j.length] = '</tr></table><div class="kitui-grid-scrollHeaderCell"></div>';
	        var m = j.join("");
	        return m;
	    },
	    _doUpdateSummaryRow: function() {
	        var b = this.getVisibleColumns();
	        var a = this._createSummaryRowHTML(b, 2);
	        this._summaryViewEl.innerHTML = a;
	    },
	    _doSortByField: function(b, c) {
	        if (!b) {
	            return null;
	        }
	        var a = this._columnModel._getDataTypeByField(b);
	        this._dataSource._doClientSortField(b, c, a);
	    },
	    _expandGroupOnLoad: true,
	    _GroupID: 1,
	    _groupField: "",
	    _groupDir: "",
	    groupBy: function(b, a) {
	        if (!b) {
	            return;
	        }
	        this._groupField = b;
	        if (typeof a == "string") {
	            a = a.toLowerCase();
	        }
	        this._groupDir = a;
	        this._createGroupingView();
	        this.deferUpdate();
	    },
	    clearGroup: function() {
	        this._groupField = "";
	        this._groupDir = "";
	        this._groupDataView = null;
	        this.deferUpdate();
	    },
	    setGroupField: function(a) {
	        this.groupBy(a);
	    },
	    setGroupDir: function(a) {
	        this._groupDir = field;
	        this.groupBy(this._groupField, a);
	    },
	    isGrouping: function() {
	        return this._groupField != "";
	    },
	    getGroupingView: function() {
	        return this._groupDataView;
	    },
	    _createGroupingView: function() {
	        if (this.isGrouping() == false) {
	            return;
	        }
	        this._groupDataView = null;
	        var j = this._groupField, d = this._groupDir;
	        this._doSortByField(j, "asc");
	        var f = this.getVisibleRows();
	        var c = [];
	        var h = {};
	        for (var g = 0, e = f.length; g < e; g++) {
	            var b = f[g];
	            var m = b[j];
	            var a = kitui.isDate(m) ? m.getTime() : m;
	            var k = h[a];
	            if (!k) {
	                k = h[a] = {};
	                k.field = j, k.dir = d;
	                k.value = m;
	                k.rows = [];
	                c.push(k);
	                k.id = "g" + this._GroupID++;
	                k.expanded = this._expandGroupOnLoad;
	            }
	            k.rows.push(b);
	        }
	        this._groupDataView = c;
	    },
	    _OnDrawGroup: function(b) {
	        var a = {
	            group: b,
	            rows: b.rows,
	            field: b.field,
	            dir: b.dir,
	            value: b.value,
	            cellHtml: b.field + " (" + b.rows.length + " Items)"
	        };
	        this.fire("drawgroup", a);
	        return a;
	    },
	    getRowGroup: function(b) {
	        var a = typeof b;
	        if (a == "number") {
	            return this.getGroupingView()[b];
	        }
	        if (a == "string") {
	            return this._getRowGroupById(b);
	        }
	        return b;
	    },
	    _getRowGroupByEvent: function(c) {
	        var a = kitui.findParent(c.target, "kitui-grid-groupRow");
	        if (a) {
	            var b = a.id.split("$");
	            if (b[0] != this._id) {
	                return null;
	            }
	            var d = b[b.length - 1];
	            return this._getRowGroupById(d);
	        }
	        return null;
	    },
	    _getRowGroupById: function(e) {
	        var a = this.getGroupingView();
	        for (var c = 0, b = a.length; c < b; c++) {
	            var d = a[c];
	            if (d.id == e) {
	                return d;
	            }
	        }
	        return null;
	    },
	    _createRowGroupId: function(b, a) {
	        return this._id + "$group" + a + "$" + b.id;
	    },
	    _createRowGroupRowsId: function(b, a) {
	        return this._id + "$grouprows" + a + "$" + b.id;
	    },
	    _createRowId: function(b, a) {
	        var c = this._id + "$row" + a + "$" + b._id;
	        return c;
	    },
	    _createHeaderCellId: function(b, a) {
	        var c = this._id + "$headerCell" + a + "$" + b._id;
	        return c;
	    },
	    _createCellId: function(b, a) {
	        var c = b._id + "$cell$" + a._id;
	        return c;
	    },
	    _createFilterCellId: function(a) {
	        return this._id + "$filter$" + a._id;
	    },
	    _createSummaryCellId: function(a) {
	        return this._id + "$summary$" + a._id;
	    },
	    getFilterCellEl: function(a) {
	        a = this.getColumn(a);
	        if (!a) {
	            return null;
	        }
	        return document.getElementById(this._createFilterCellId(a));
	    },
	    getSummaryCellEl: function(a) {
	        a = this.getColumn(a);
	        if (!a) {
	            return null;
	        }
	        return document.getElementById(this._createSummaryCellId(a));
	    },
	    _doVisibleEls: function() {
	        kitui.GridView.superclass._doVisibleEls.call(this);
	        this._columnsEl.style.display = this.showColumns ? "block" : "none";
	        this._filterEl.style.display = this.showFilterRow ? "block" : "none";
	        this._summaryEl.style.display = this.showSummaryRow ? "block" : "none";
	        this._bottomPagerEl.style.display = this.showPager ? "block" : "none";
	    },
	    setShowColumns: function(a) {
	        this.showColumns = a;
	        this._doVisibleEls();
	        this.deferLayout();
	    },
	    setShowFilterRow: function(a) {
	        this.showFilterRow = a;
	        this._doVisibleEls();
	        this.deferLayout();
	    },
	    setShowSummaryRow: function(a) {
	        this.showSummaryRow = a;
	        this._doVisibleEls();
	        this.deferLayout();
	    },
	    setShowPager: function(a) {
	        this.showPager = a;
	        this._doVisibleEls();
	        this.deferLayout();
	    },
	    setFitColumns: function(a) {
	        this.fitColumns = a;
	        this.deferLayout();
	    },
	    getBodyHeight: function() {
	        var a = kitui.GridView.superclass.getBodyHeight.call(this);
	        a = a - this.getColumnsHeight() - this.getFilterHeight() - this.getSummaryHeight() - this.getPagerHeight();
	        return a;
	    },
	    getColumnsHeight: function() {
	        return this.showColumns ? kitui.getHeight(this._columnsEl) : 0;
	    },
	    getFilterHeight: function() {
	        return this.showFilterRow ? kitui.getHeight(this._filterEl) : 0;
	    },
	    getSummaryHeight: function() {
	        return this.showSummaryRow ? kitui.getHeight(this._summaryEl) : 0;
	    },
	    getPagerHeight: function() {
	        return this.showPager ? kitui.getHeight(this._bottomPagerEl) : 0;
	    },
	    getGridViewBox: function(c) {
	        var b = kitui.getBox(this._columnsEl);
	        var a = kitui.getBox(this._bodyEl);
	        b.height = a.bottom - b.top;
	        b.bottom = b.top + b.height;
	        return b;
	    },
	    getSortField: function(a) {
	        return this._dataSource.sortField;
	    },
	    getSortOrder: function(a) {
	        return this._dataSource.sortOrder;
	    },
	    _createSource: function() {
	        this._dataSource = new kitui.DataTable();
	    },
	    _bindSource: function() {
	        var a = this._dataSource;
	        a.on("loaddata", this.__OnSourceLoadData, this);
	        a.on("cleardata", this.__OnSourceClearData, this);
	    },
	    __OnSourceLoadData: function(a) {
	        this._initData();
	        this.doUpdate();
	    },
	    __OnSourceClearData: function(a) {
	        this._initData();
	        this.doUpdate();
	    },
	    _initData: function() {},
	    isFrozen: function() {
	        var b = this._columnModel._frozenStartColumn, a = this._columnModel._frozenEndColumn;
	        return this._columnModel.isFrozen();
	    },
	    _createColumnModel: function() {
	        this._columnModel = new kitui.ColumnModel(this);
	    },
	    _bindColumnModel: function() {
	        this._columnModel.on("columnschanged", this.__OnColumnsChanged, this);
	    },
	    __OnColumnsChanged: function(a) {
	        this._doUpdateFilterRow();
	        this._doUpdateSummaryRow();
	        this.doUpdate();
	        this.fire("columnschanged");
	    },
	    setColumns: function(a) {
	        this._columnModel.setColumns(a);
	    },
	    getColumns: function() {
	        return this._columnModel.getColumns();
	    },
	    getBottomColumns: function() {
	        return this._columnModel.getBottomColumns();
	    },
	    getVisibleColumnsRow: function() {
	        var a = this._columnModel.getVisibleColumnsRow().clone();
	        return a;
	    },
	    getVisibleColumns: function() {
	        var a = this._columnModel.getVisibleColumns().clone();
	        return a;
	    },
	    getFrozenColumns: function() {
	        var a = this._columnModel.getFrozenColumns().clone();
	        return a;
	    },
	    getUnFrozenColumns: function() {
	        var a = this._columnModel.getUnFrozenColumns().clone();
	        return a;
	    },
	    getColumn: function(a) {
	        return this._columnModel.getColumn(a);
	    },
	    updateColumn: function(b, a) {
	        this._columnModel.updateColumn(b, a);
	    },
	    showColumn: function(a) {
	        this.updateColumn(a, {
	            visible: true
	        });
	    },
	    hideColumn: function(a) {
	        this.updateColumn(a, {
	            visible: false
	        });
	    },
	    moveColumn: function(b, a, c) {
	        this._columnModel.moveColumn(b, a, c);
	    },
	    removeColumn: function(a) {},
	    insertColumn: function(a) {},
	    setColumnWidth: function(b, a) {
	        this.updateColumn(b, {
	            width: a
	        });
	    },
	    getColumnWidth: function(a) {
	        var b = this.getColumnBox(a);
	        return b.width;
	    },
	    getParentColumn: function(a) {
	        return this._columnModel.getParentColumn(a);
	    },
	    _isCellVisible: function(b, a) {
	        return true;
	    },
	    _createDrawCellEvent: function(b, d, h, c) {
	        var f = kitui._getMap(d.field, b);
	        var g = {
	            sender: this,
	            rowIndex: h,
	            columnIndex: c,
	            record: b,
	            row: b,
	            column: d,
	            field: d.field,
	            value: f,
	            cellHtml: f,
	            rowCls: "",
	            rowStyle: null,
	            cellCls: d.cellCls || "",
	            cellStyle: d.cellStyle || "",
	            allowCellWrap: this.allowCellWrap,
	            showHGridLines: this.showHGridLines,
	            showVGridLines: this.showVGridLines,
	            cellInnerCls: "",
	            cellInnnerStyle: "",
	            autoEscape: d.autoEscape
	        };
	        g.visible = this._isCellVisible(h, c);
	        if (g.visible == true && this._mergedCellMaps) {
	            var a = this._mergedCellMaps[h + ":" + c];
	            if (a) {
	                g.rowSpan = a.rowSpan;
	                g.colSpan = a.colSpan;
	            }
	        }
	        return g;
	    },
	    _OnDrawCell: function(a, c, h, b) {
	        var g = this._createDrawCellEvent(a, c, h, b);
	        var f = g.value;
	        if (c.dateFormat) {
	            if (kitui.isDate(g.value)) {
	                g.cellHtml = kitui.formatDate(f, c.dateFormat);
	            } else {
	                g.cellHtml = f;
	            }
	        }
	        if (c.dataType == "currency") {
	            g.cellHtml = kitui.formatCurrency(g.value, c.currencyUnit);
	        }
        	if (c.type=='dictcolumn') {
               if(c.dictData){
               		var dData = kitui.decode(c.dictData);
               		if(dData.code >= 0){
               			var v = dData.data[f];
               			g.cellHtml = v;
               			a[c.name+"_text"] = v;
               		}
               }
	        }else if (c.displayField) {
	            g.cellHtml = a[c.displayField];
	        }
	        if(c.editor){
	        	if(c.editor.itype=="currency"||c.editor.itype=="number"){
	        		if (g.cellHtml&&isNaN(g.cellHtml)) {
		            	g.cellHtml = "<font color=red>数字格式错误！</font>";
		            }
	        	}
	        }
			if (c.numberFormat) {
				if(g.cellHtml==""){
					//alert(g.cellHtml)
				}
				else if(g.cellHtml!=undefined){
		            if (!isNaN(g.cellHtml)) {
		            	var r = parseFloat(g.cellHtml)
		                g.cellHtml = kitui.formatNumber(r, c.numberFormat);
		            }else{
		            	g.cellHtml = "<font color=red>数字格式错误！</font>";
		            }					
				}
	        }	        
	        if (g.autoEscape == true) {
	            g.cellHtml = kitui.htmlEncode(g.cellHtml);
	        }
	        var d = c.renderer;
	        if (d) {
	            fn = typeof d == "function" ? d : kitui._getFunctoin(d);
	            if (fn) {
	                g.cellHtml = fn.call(c, g);
	            }
	        }
	        this.fire("drawcell", g);
	        if (g.cellHtml && !!g.cellHtml.unshift && g.cellHtml.length == 0) {
	            g.cellHtml = "&nbsp;";
	        }
	        if (g.cellHtml === null || g.cellHtml === undefined || g.cellHtml === "") {
	            g.cellHtml = "&nbsp;";
	        }
	        return g;
	    },
	    _OnDrawSummaryCell: function(a, c) {
	        var g = {
	            result: this.getResultObject(),
	            sender: this,
	            data: a,
	            column: c,
	            field: c.field,
	            value: "",
	            cellHtml: "",
	            cellCls: c.cellCls || "",
	            cellStyle: c.cellStyle || "",
	            allowCellWrap: this.allowCellWrap
	        };
	        if (c.summaryType) {
	            var b = kitui.summaryTypes[c.summaryType];
	            if (b) {
	                g.value = b(a, c.field);
	            }
	        }
	        var f = g.value;
	        g.cellHtml = g.value;
	        if (g.value && parseInt(g.value) != g.value && g.value.toFixed) {
	            decimalPlaces = parseInt(c.decimalPlaces);
	            if (isNaN(decimalPlaces)) {
	                decimalPlaces = 2;
	            }
	            g.cellHtml = parseFloat(g.value.toFixed(decimalPlaces));
	        }
	        if (c.dateFormat) {
	            if (kitui.isDate(g.value)) {
	                g.cellHtml = kitui.formatDate(f, c.dateFormat);
	            } else {
	                g.cellHtml = f;
	            }
	        }
			if(c.numberFormat){
				if(kitui.isNumber(g.value)){
					g.cellHtml = kitui.formatNumber(f, c.numberFormat);
				}
				else{
					g.cellHtml = f;	
				}
			}
	        if (c.dataType == "currency") {
	            g.cellHtml = kitui.formatCurrency(g.cellHtml, c.currencyUnit);
	        }
	        var d = c.summaryRenderer;
	        if (d) {
	            b = typeof d == "function" ? d : window[d];
	            if (b) {
	                g.cellHtml = b.call(c, g);
	            }
	        }
	        c.summaryValue = g.value;
	        this.fire("drawsummarycell", g);
	        if (g.cellHtml === null || g.cellHtml === undefined || g.cellHtml === "") {
	            g.cellHtml = "&nbsp;";
	        }
	        return g;
	    },
	    getScrollTop: function() {
	        return this._rowsViewEl.scrollTop;
	    },
	    setScrollTop: function(a) {
	        this._rowsViewEl.scrollTop = a;
	    },
	    getScrollLeft: function() {
	        return this._rowsViewEl.scrollLeft;
	    },
	    setScrollLeft: function(a) {
	        this._rowsViewEl.scrollLeft = a;
	    },
	    _syncScroll: function() {
	        var a = this._rowsViewEl.scrollLeft;
	        this._filterViewEl.scrollLeft = a;
	        this._summaryViewEl.scrollLeft = a;
	        this._columnsViewEl.scrollLeft = a;
	    },
	    __OnRowViewScroll: function(a) {
	        this._syncScroll();
	    },
	    _pagers: [],
	    _createPagers: function() {
	        this._pagers = [];
	        var a = new kitui.Pager();
	        a.pgrid = this;
	        this._setBottomPager(a);
	    },
	    _setBottomPager: function(a) {
	        a = kitui.create(a);
	        if (!a) {
	            return;
	        }
	        if (this._bottomPager) {
	            this.unbindPager(this._bottomPager);
	            this._bottomPagerEl.removeChild(this._bottomPager.el);
	        }
	        this._bottomPager = a;
	        a.render(this._bottomPagerEl);
	        this.bindPager(a);
	    },
	    bindPager: function(a) {
	        this._pagers.add(a);
	    },
	    unbindPager: function(a) {
	        this._pagers.remove(a);
	    },
	    setShowEmptyText: function(a) {
	        this.showEmptyText = a;
	    },
	    getShowEmptyText: function() {
	        return this.showEmptyText;
	    },
	    setEmptyText: function(a) {
	        this.emptyText = a;
	    },
	    getEmptyText: function() {
	        return this.emptyText;
	    },
	    setShowModified: function(a) {
	        this.showModified = a;
	    },
	    getShowModified: function() {
	        return this.showModified;
	    },
	    setShowNewRow: function(a) {
	        this.showNewRow = a;
	    },
	    getShowNewRow: function() {
	        return this.showNewRow;
	    },
	    setShowHGridLines: function(a) {
	        if (this.showHGridLines != a) {
	            this.showHGridLines = a;
	            this.deferUpdate();
	        }
	    },
	    getShowHGridLines: function() {
	        return this.showHGridLines;
	    },
	    setShowVGridLines: function(a) {
	        if (this.showVGridLines != a) {
	            this.showVGridLines = a;
	            this.deferUpdate();
	        }
	    },
	    getShowVGridLines: function() {
	        return this.showVGridLines;
	    }
	});

	kitui.copyTo(kitui.GridView.prototype, kitui._DataTableApplys);

	kitui.regClass(kitui.GridView, "gridview");
	
})(jQuery);
///<jscompress sourcefile="jquery.frozengridview.js" />
(function($) {
kitui.FrozenGridView = function() {
	    kitui.FrozenGridView.superclass.constructor.call(this);
	};

	kitui.extend(kitui.FrozenGridView, kitui.GridView, {
	    isFixedRowHeight: function() {
	        return this.fixedRowHeight || this.isFrozen();
	    },
	    _create: function() {
	        kitui.FrozenGridView.superclass._create.call(this);
	        var c = this.el;
	        var b = '<div class="kitui-grid-columns-lock"></div>';
	        var e = '<div class="kitui-grid-rows-lock"><div class="kitui-grid-rows-content"></div></div>';
	        this._columnsLockEl = kitui.before(this._columnsViewEl, b);
	        this._rowsLockEl = kitui.before(this._rowsViewEl, e);
	        this._rowsLockContentEl = this._rowsLockEl.firstChild;
	        var d = '<div class="kitui-grid-filterRow-lock"></div>';
	        this._filterLockEl = kitui.before(this._filterViewEl, d);
	        var a = '<div class="kitui-grid-summaryRow-lock"></div>';
	        this._summaryLockEl = kitui.before(this._summaryViewEl, a);
	    },
	    _initEvents: function() {
	        kitui.FrozenGridView.superclass._initEvents.call(this);
	        kitui.on(this._rowsEl, "mousewheel", this.__OnMouseWheel, this);
	    },
	    _createHeaderText: function(b, a) {
	        var c = b.header;
	        if (typeof c == "function") {
	            c = c.call(this, b);
	        }
	        if (kitui.isNull(c) || c === "") {
	            c = "&nbsp;";
	        }
	        if (this.isFrozen() && a == 2) {
	            if (b.viewIndex1) {
	                c = "&nbsp;";
	            }
	        }
	        return c;
	    },
	    _createColumnColSpan: function(b, d, a) {
	        if (this.isFrozen()) {
	            var c = b["colspan" + a];
	            if (c) {
	                d[d.length] = 'colspan="' + c + '" ';
	            }
	        } else {
	            if (b.colspan) {
	                d[d.length] = 'colspan="' + b.colspan + '" ';
	            }
	        }
	    },
	    doUpdateColumns: function() {
	        var f = this.isFrozen() ? this.getFrozenColumnsRow() : [];
	        var a = this.isFrozen() ? this.getUnFrozenColumnsRow() : this.getVisibleColumnsRow();
	        var h = this.isFrozen() ? this.getFrozenColumns() : [];
	        var g = this.isFrozen() ? this.getUnFrozenColumns() : this.getVisibleColumns();
	        var c = this._createColumnsHTML(f, 1, h);
	        var b = this._createColumnsHTML(a, 2, g);
	        var e = '<div class="kitui-grid-topRightCell"></div>';
	        c += e;
	        b += e;
	        this._columnsLockEl.innerHTML = c;
	        this._columnsViewEl.innerHTML = b;
	        var d = this._columnsLockEl.firstChild;
	        d.style.width = "0px";
	    },
	    doUpdateRows: function() {
	    	var d={};
	        var d = this.getVisibleRows();
	        var f = this.getFrozenColumns();
	        var e = this.getUnFrozenColumns();
	        if (this.isGrouping()) {
	            var b = this._createGroupingHTML(f, 1);
	            var a = this._createGroupingHTML(e, 2);
	            this._rowsLockContentEl.innerHTML = b;
	            this._rowsViewContentEl.innerHTML = a;
	        } else {
	            var b = this._createRowsHTML(f, 1, this.isFrozen() ? d : []);
	            var a = this._createRowsHTML(e, 2, d);
	            this._rowsLockContentEl.innerHTML = b;
	            this._rowsViewContentEl.innerHTML = a;
	        }
	        var c = this._rowsLockContentEl.firstChild;
	        c.style.width = "0px";
	    },
	    _doUpdateFilterRow: function() {
	        if (this._filterLockEl.firstChild) {
	            this._filterLockEl.removeChild(this._filterLockEl.firstChild);
	        }
	        if (this._filterViewEl.firstChild) {
	            this._filterViewEl.removeChild(this._filterViewEl.firstChild);
	        }
	        var d = this.getFrozenColumns();
	        var c = this.getUnFrozenColumns();
	        var b = this._createFilterRowHTML(d, 1);
	        var a = this._createFilterRowHTML(c, 2);
	        this._filterLockEl.innerHTML = b;
	        this._filterViewEl.innerHTML = a;
	        this._doRenderFilters();
	    },
	    _doUpdateSummaryRow: function() {
	        var d = this.getFrozenColumns();
	        var c = this.getUnFrozenColumns();
	        var b = this._createSummaryRowHTML(d, 1);
	        var a = this._createSummaryRowHTML(c, 2);
	        this._summaryLockEl.innerHTML = b;
	        this._summaryViewEl.innerHTML = a;
	    },
	    _doSyncRowHeight: function(e, t) {
	        e.style.height = t.style.height = "auto";
	        var i = e.cells[0], n = t.cells[0], s = i.offsetHeight, o = n.offsetHeight;
	        if (s < o) {
	            s = o;
	        }
	        e.style.height = t.style.height = s + "px";
	    },	    
	    doLayout: function() {
	        if (this.canLayout() == false) {
	            return;
	        }
	        this._doLayoutScroll = false;
	        this._doEmptyText();
	        kitui.FrozenGridView.superclass.doLayout.call(this);
	        var c = this.isAutoHeight();
	        var e = this.isFrozen();
	        var a = this.getViewportWidth(true);
	        var b = this.getLockedWidth();
	        var d = a - b;
	        if (e) {
	            this._filterViewEl.style.marginLeft = b + "px";
	            this._summaryViewEl.style.marginLeft = b + "px";
	            this._columnsViewEl.style.marginLeft = b + "px";
	            this._rowsViewEl.style.marginLeft = b + "px";
	            if (kitui.isChrome || kitui.isIE6) {
	                this._filterViewEl.style.width = d + "px";
	                this._summaryViewEl.style.width = d + "px";
	                this._columnsViewEl.style.width = d + "px";
	            } else {
	                this._filterViewEl.style.width = "auto";
	                this._summaryViewEl.style.width = "auto";
	                this._columnsViewEl.style.width = "auto";
	            }
	            if (kitui.isChrome || kitui.isIE6) {
	                this._rowsViewEl.style.width = d + "px";
	            }
	            kitui.setWidth(this._filterLockEl, b);
	            kitui.setWidth(this._summaryLockEl, b);
	            kitui.setWidth(this._columnsLockEl, b);
	            kitui.setWidth(this._rowsLockEl, b);
	            this._filterLockEl.style.left = "0px";
	            this._summaryLockEl.style.left = "0px";
	            this._columnsLockEl.style.left = "0px";
	            this._rowsLockEl.style.left = "0px";
	        } else {
	            this._doClearFrozen();
	        }
	        if (c) {
	            this._rowsLockEl.style.height = "auto";
	        } else {
	            this._rowsLockEl.style.height = "100%";
	        }
	    },
	    _doEmptyText: function() {},
	    _getRowEl: function(c, a) {
	        c = this.getRecord(c);
	        var d = this._createRowId(c, a);
	        var b = document.getElementById(d);
	        return b;
	    },
	    _doClearFrozen: function() {
	        this._filterLockEl.style.left = "-10px";
	        this._summaryLockEl.style.left = "-10px";
	        this._columnsLockEl.style.left = "-10px";
	        this._rowsLockEl.style.left = "-10px";
	        this._filterLockEl.style.width = "0px";
	        this._summaryLockEl.style.width = "0px";
	        this._columnsLockEl.style.width = "0px";
	        this._rowsLockEl.style.width = "0px";
	        this._filterLockEl.style.marginLeft = "0px";
	        this._summaryLockEl.style.marginLeft = "0px";
	        this._columnsViewEl.style.marginLeft = "0px";
	        this._rowsViewEl.style.marginLeft = "0px";
	        this._filterViewEl.style.width = "auto";
	        this._summaryViewEl.style.width = "auto";
	        this._columnsViewEl.style.width = "auto";
	        this._rowsViewEl.style.width = "auto";
	        if (kitui.isChrome || kitui.isIE6) {
	            this._filterViewEl.style.width = "100%";
	            this._summaryViewEl.style.width = "100%";
	            this._columnsViewEl.style.width = "100%";
	            this._rowsViewEl.style.width = "100%";
	        }
	    },
	    frozenColumns: function(a, b) {
	        this.frozen(a, b);
	    },
	    unFrozenColumns: function() {
	        this.unFrozen();
	    },
	    frozen: function(a, b) {
	        this._doClearFrozen();
	        this._columnModel.frozen(a, b);
	    },
	    unFrozen: function() {
	        this._doClearFrozen();
	        this._columnModel.unFrozen();
	    },
	    setFrozenStartColumn: function(a) {
	        this._columnModel.setFrozenStartColumn(a);
	    },
	    setFrozenEndColumn: function(a) {
	        return this._columnModel.setFrozenEndColumn(a);
	    },
	    getFrozenStartColumn: function(a) {
	        return this._columnModel._frozenStartColumn;
	    },
	    getFrozenEndColumn: function(a) {
	        return this._columnModel._frozenEndColumn;
	    },
	    getFrozenColumnsRow: function() {
	        return this._columnModel.getFrozenColumnsRow();
	    },
	    getUnFrozenColumnsRow: function() {
	        return this._columnModel.getUnFrozenColumnsRow();
	    },
	    getLockedWidth: function() {
	        if (!this.isFrozen()) {
	            return 0;
	        }
	        var b = this._rowsLockContentEl.firstChild.firstChild;
	        var a = b ? b.offsetWidth : 0;
	        return a;
	    },
	    _canDeferSyncScroll: function() {
	        return this.isFrozen();
	    },
	    _syncScroll: function() {
	        var c = this._rowsViewEl.scrollLeft;
	        this._filterViewEl.scrollLeft = c;
	        this._summaryViewEl.scrollLeft = c;
	        this._columnsViewEl.scrollLeft = c;
	        var a = this;
	        var b = a._rowsViewEl.scrollTop;
	        a._rowsLockEl.scrollTop = b;
	        if (this._canDeferSyncScroll()) {
	            setTimeout(function() {
	                a._rowsViewEl.scrollTop = a._rowsLockEl.scrollTop;
	            }, 50);
	        }
	    },
	    __OnMouseWheel: function(c) {
	        var b = this.getScrollTop() - c.wheelDelta;
	        var a = this.getScrollTop();
	        this.setScrollTop(b);
	        if (a != this.getScrollTop()) {
	            c.preventDefault();
	        }
	    }
	})
	
	
	
	
	kitui.regClass(kitui.FrozenGridView, "FrozenGridView");
	
	
	})(jQuery);
///<jscompress sourcefile="jquery.scrollgridview.js" />
(function($) {

	kitui.ScrollGridView = function() {
	    kitui.ScrollGridView.superclass.constructor.apply(this, arguments);
	};

	kitui.extend(kitui.ScrollGridView, kitui.FrozenGridView, {
	    virtualScroll: true,
	    virtualRows: 25,
	    defaultRowHeight: 23,
	    _canDeferSyncScroll: function() {
	        return this.isFrozen() && !this.isVirtualScroll();
	    },
	    setVirtualScroll: function(e) {
	        this.virtualScroll = e;
	        this.doUpdate();
	    },
	    getVirtualScroll: function() {
	        return this.virtualScroll;
	    },
	    isFixedRowHeight: function() {
	        return this.fixedRowHeight || this.isVirtualScroll();
	    },
	    isVirtualScroll: function() {
	        if (this.virtualScroll) {
	            return false == this.isAutoHeight() && false == this.isGrouping();
	        }
	        return false;
	    },
	    _getScrollView: function() {
	        var e = this.getVisibleRows();
	        return e;
	    },
	    _getScrollViewCount: function() {
	        return this._getScrollView().length;
	    },
	    _getScrollRowHeight: function(e, t) {
	        if (t && t._height) {
	            var i = parseInt(t._height);
	            if (!isNaN(i)) {
	                return i;
	            }
	        }
	        return this.defaultRowHeight;
	    },
	    _getRangeHeight: function(e, t) {
	        for (var i = 0, n = this._getScrollView(), s = e; s < t; s++) {
	            var o = n[s], r = this._getScrollRowHeight(s, o);
	            i += r;
	        }
	        return i;
	    },
	    _getIndexByScrollTop: function(e) {
	        for (var t = 0, i = this._getScrollView(), n = this._getScrollViewCount(), s = 0, o = n; s < o; s++) {
	            var r = i[s], l = this._getScrollRowHeight(s, r);
	            t += l;
	            if (t >= e) {
	                return s;
	            }
	        }
	        return n;
	    },
	    __getScrollViewRange: function(e, t) {
	        var i = this._getScrollView();
	        return i.getRange(e, t);
	    },
	    _getViewRegion: function() {
	        var e = this._getScrollView();
	        if (false == this.isVirtualScroll()) {
	            var t = {
	                top: 0,
	                bottom: 0,
	                rows: e,
	                start: 0,
	                end: 0
	            };
	            return t;
	        }
	        for (var i = (this.defaultRowHeight, this._getViewNowRegion()), n = (this.getScrollTop(), 
	        this._vscrollEl.offsetHeight, this._getScrollViewCount()), s = i.start, o = i.end, r = 0, l = n; r < l; r += this.virtualRows) {
	            var a = r + this.virtualRows;
	            if (r <= s && s < a) {
	                s = r;
	            }
	            if (r < o && o <= a) {
	                o = a;
	            }
	        }
	        if (o > n) {
	            o = n;
	        }
	        if (0 == o) {
	            o = this.virtualRows;
	        }
	        var h = this._getRangeHeight(0, s), u = this._getRangeHeight(o, this._getScrollViewCount()), e = this.__getScrollViewRange(s, o), t = {
	            top: h,
	            bottom: u,
	            rows: e,
	            start: s,
	            end: o,
	            viewStart: s,
	            viewEnd: o
	        };
	        t.viewTop = this._getRangeHeight(0, t.viewStart);
	        t.viewBottom = this._getRangeHeight(t.viewEnd, this._getScrollViewCount());
	        return t;
	    },
	    _getViewNowRegion: function() {
	        var e = (this.defaultRowHeight, this.getScrollTop()), t = this._rowsViewEl.offsetHeight, i = this._getIndexByScrollTop(e), n = this._getIndexByScrollTop(e + t + 30), s = this._getScrollViewCount();
	        if (n > s) {
	            n = s;
	        }
	        var o = {
	            start: i,
	            end: n
	        };
	        return o;
	    },
	    _canVirtualUpdate: function() {
	        if (!this._viewRegion) {
	            return true;
	        }
	        var e = this._getViewNowRegion();
	        if (this._viewRegion.start <= e.start && e.end <= this._viewRegion.end) {
	            return false;
	        }
	        return true;
	    },
	    __OnColumnsChanged: function() {
	        this.columns = this._columnModel.columns;
	        this._doUpdateFilterRow();
	        this._doUpdateSummaryRow();
	        if (0 == this.getVisibleRows().length) {
	            this.doUpdate();
	        } else {
	            this.deferUpdate();
	        }
	        if (this.isVirtualScroll()) {
	            this.__OnVScroll();
	        }
	        this.fire("columnschanged");
	    },
	    doLayout: function() {
	        if (false == this.canLayout()) {
	            return;
	        }
	        kitui.ScrollGridView.superclass.doLayout.call(this);
	        this._layoutScroll();
	        if (kitui.isNumber(this._scrollTop) && this._vscrollEl.scrollTop != this._scrollTop) {
	            this._vscrollEl.scrollTop = this._scrollTop;
	        }
	    },
	    _createRowsHTML: function(e, t, i, n, s, o) {
	        var r = this.isVirtualScroll();
	        if (!r) {
	            return kitui.ScrollGridView.superclass._createRowsHTML.apply(this, arguments);
	        }
	        var l = (r ? this._getViewRegion() : null, [ '<table class="kitui-grid-table" cellspacing="0" cellpadding="0" border="0">' ]);
	        l.push(this._createTopRowHTML(e));
	        if (this.isVirtualScroll()) {
	            var a = 0 == n ? "display:none;" : "";
	            l.push('<tr class="kitui-grid-virtualscroll-top" style="padding:0;border:0;' + a + '"><td colspan="' + e.length + '" style="height:' + n + "px;padding:0;border:0;" + a + '"></td></tr>');
	        }
	        if (1 == t && false == this.isFrozen()) {
	            ;
	        } else {
	            for (var h = 0, u = i.length; h < u; h++) {
	                var d = i[h];
	                this._createRowHTML(d, o, e, t, l);
	                o++;
	            }
	        }
	        if (this.isVirtualScroll()) {
	            l.push('<tr class="kitui-grid-virtualscroll-bottom" style="padding:0;border:0;"><td colspan="' + e.length + '" style="height:' + s + 'px;padding:0;border:0;"></td></tr>');
	        }
	        l.push("</table>");
	        return l.join("");
	    },
	    doUpdateRows: function() {
	        if (false == this.isVirtualScroll()) {
	            kitui.ScrollGridView.superclass.doUpdateRows.call(this);
	            return;
	        }
	        var e = this._getViewRegion();
	        this._viewRegion = e;
	        var t = this.getFrozenColumns(), i = this.getUnFrozenColumns(), n = e.viewStart, s = e.start, o = e.viewEnd;
	        if (this._scrollPaging) {
	            var r = this.getPageIndex() * this.getPageSize();
	            n -= r;
	            s -= r;
	            o -= r;
	        }
	        var l = (new Date(), this._createRowsHTML(t, 1, e.rows, e.viewTop, e.viewBottom, n)), a = this._createRowsHTML(i, 2, e.rows, e.viewTop, e.viewBottom, n);
	        this._rowsLockContentEl.innerHTML = l;
	        this._rowsViewContentEl.innerHTML = a;
	        var h = this.getScrollTop();
	        if (this._rowsViewEl.scrollTop != h) {
	            this._rowsViewEl.scrollTop = h;
	        }
	    },
	    _create: function() {
	        kitui.ScrollGridView.superclass._create.call(this);
	        this._vscrollEl = kitui.append(this._rowsEl, '<div class="kitui-grid-vscroll"><div class="kitui-grid-vscroll-content"></div></div>');
	        this._vscrollContentEl = this._vscrollEl.firstChild;
	    },
	    _initEvents: function() {
	        kitui.ScrollGridView.superclass._initEvents.call(this);
	        var e = this;
	        kitui.on(this._vscrollEl, "scroll", this.__OnVScroll, this);
	        kitui._onScrollDownUp(this._vscrollEl, function() {
	            e._VScrollMouseDown = true;
	        }, function() {
	            e._VScrollMouseDown = false;
	        });
	    },
	    _layoutScroll: function() {
	        var e = this.isVirtualScroll();
	        if (e) {
	            var t = this.getScrollHeight(), i = t > this._rowsViewEl.offsetHeight;
	            if (e && i) {
	                this._vscrollEl.style.display = "block";
	                this._vscrollContentEl.style.height = t + "px";
	            } else {
	                this._vscrollEl.style.display = "none";
	            }
	            if (this._rowsViewEl.scrollWidth > this._rowsViewEl.clientWidth + 1) {
	                var n = this.getBodyHeight(true) - 18;
	                if (n < 0) {
	                    n = 0;
	                }
	                this._vscrollEl.style.height = n + "px";
	            } else {
	                this._vscrollEl.style.height = "100%";
	            }
	        } else {
	            this._vscrollEl.style.display = "none";
	        }
	    },
	    getScrollHeight: function() {
	        var e = this.getVisibleRows();
	        return this._getRangeHeight(0, e.length);
	    },
	    setScrollTop: function(e) {
	        if (this.isVirtualScroll()) {
	            this._vscrollEl.scrollTop = e;
	        } else {
	            this._rowsViewEl.scrollTop = e;
	        }
	    },
	    getScrollTop: function() {
	        if (this.isVirtualScroll()) {
	            return this._vscrollEl.scrollTop;
	        } else {
	            return this._rowsViewEl.scrollTop;
	        }
	    },
	    __OnVScroll: function() {
	        var e = this.isVirtualScroll();
	        if (e) {
	            this._scrollTop = this._vscrollEl.scrollTop;
	            var t = this;
	            setTimeout(function() {
	                t._rowsViewEl.scrollTop = t._scrollTop;
	                t.__scrollTimer = null;
	            }, 8);
	            if (this._scrollTopTimer) {
	                clearTimeout(this._scrollTopTimer);
	            }
	            this._scrollTopTimer = setTimeout(function() {
	                t._scrollTopTimer = null;
	                t._tryUpdateScroll();
	                t._rowsViewEl.scrollTop = t._scrollTop;
	            }, 80);
	        }
	    },
	    __OnMouseWheel: function(e) {
	        var t = e.wheelDelta ? e : e.originalEvent, i = t.wheelDelta || 24 * -t.detail, n = this.getScrollTop() - i, s = this.getScrollTop();
	        this.setScrollTop(n);
	        if (s != this.getScrollTop() || this.isVirtualScroll()) {}
	    },
	    _tryUpdateScroll: function() {
	        var e = this._canVirtualUpdate();
	        if (e) {
	            if (this._scrollPaging) {
	                this.reload(null, null, function() {});
	            } else {
	                new Date();
	                this.doUpdateRows();
	            }
	        }
	    }
	});

	kitui.regClass(kitui.ScrollGridView, "ScrollGridView");

	kitui._onScrollDownUp = function(e, t, i) {
	    function n(e) {
	        if (kitui.isFirefox) {
	            kitui.on(document, "mouseup", o);
	        } else {
	            kitui.on(document, "mousemove", s);
	        }
	        t(e);
	    }
	    function s(e) {
	        kitui.un(document, "mousemove", s);
	        i(e);
	    }
	    function o(e) {
	        kitui.un(document, "mouseup", o);
	        i(e);
	    }
	    kitui.on(e, "mousedown", n);
	};
	
	
})(jQuery);
///<jscompress sourcefile="jquery.datagrid.js" />
(function($) {
	


	kitui._Grid_Select = function(a) {
	    this.owner = a, el = a.el;
	    a.on("rowmousemove", this.__OnRowMouseMove, this);
	    kitui.on(a._viewportEl, "mouseout", this.__OnMouseOut, this);
	    kitui.on(a._viewportEl, "mousewheel", this.__OnMouseWheel, this);
	    a.on("cellmousedown", this.__OnCellMouseDown, this);
	    a.on("cellclick", this.__OnGridCellClick, this);
	    a.on("celldblclick", this.__OnGridCellClick, this);
	    kitui.on(a.el, "keydown", this.__OnGridKeyDown, this);
	};

	kitui._Grid_Select.prototype = {
	    __OnGridKeyDown: function(g) {
	        var a = this.owner;
	        if (kitui.isAncestor(a._filterEl, g.target) || kitui.isAncestor(a._summaryEl, g.target) || kitui.isAncestor(a._toolbarEl, g.target) || kitui.isAncestor(a._footerEl, g.target) || kitui.findParent(g.target, "kitui-grid-detailRow") || kitui.findParent(g.target, "kitui-grid-rowEdit")) {
	            return;
	        }
	        var j = a.getCurrentCell();
	        if (g.shiftKey || g.ctrlKey) {
	            return;
	        }
	        if (g.keyCode == 37 || g.keyCode == 38 || g.keyCode == 39 || g.keyCode == 40) {
	            g.preventDefault();
	        }
	        var c = a.getVisibleColumns();
	        var b = j ? j[1] : null, d = j ? j[0] : null;
	        if (!j) {
	            d = a.getCurrent();
	        }
	        var h = c.indexOf(b);
	        var i = a.indexOf(d);
	        var f = a.getData().length;
	        switch (g.keyCode) {
	          case 9:
	            if (a.allowCellEdit && a.editOnTabKey) {
	                g.preventDefault();
	                a._beginEditNextCell(g.shiftKey == false,true);
	                return;
	            }
	            break;

	          case 27:
	            break;

	          case 13:
	            if (a.allowCellEdit && a.editNextOnEnterKey) {
	                if (a.isEditingCell(j) || !b.editor) {
	                    a._beginEditNextCell(g.shiftKey == false);
	                    return;
	                }
	            }
	            if (a.allowCellEdit && j && !b.readOnly) {
	                a.beginEditCell();
	            }
	            break;

	          case 37:
	            if (b) {
	                if (h > 0) {
	                    h -= 1;
	                }
	            } else {
	                h = 0;
	            }
	            break;

	          case 38:
	            if (d) {
	                if (i > 0) {
	                    i -= 1;
	                }
	            } else {
	                i = 0;
	            }
	            if (i != 0 && a.isVirtualScroll()) {
	                if (a._viewRegion.start > i) {
	                    a._bodyEl.scrollTop -= a._rowHeight;
	                    a._tryUpdateScroll();
	                }
	            }
	            break;

	          case 39:
	            if (b) {
	                if (h < c.length - 1) {
	                    h += 1;
	                }
	            } else {
	                h = 0;
	            }
	            break;

	          case 40:
	            if (d) {
	                if (i < f - 1) {
	                    i += 1;
	                }
	            } else {
	                i = 0;
	            }
	            if (a.isVirtualScroll()) {
	                if (a._viewRegion.end < i) {
	                    a._bodyEl.scrollTop += a._rowHeight;
	                    a._tryUpdateScroll();
	                }
	            }
	            break;

	          default:
	            break;
	        }
	        b = c[h];
	        d = a.getAt(i);
	        if (b && d && a.allowCellSelect) {
	            var j = [ d, b ];
	            a.setCurrentCell(j);
	            a.scrollIntoView(d, b);
	        }
	        if (d && a.allowRowSelect) {
	            a.deselectAll();
	            a.setCurrent(d);
	            if (d) {
	                a.scrollIntoView(d);
	            }
	        }
	    },
	    __OnMouseWheel: function(b) {
	        var a = this.owner;
	        if (a.allowCellEdit) {
	            a.commitEdit();
	        }
	    },
	    __OnGridCellClick: function(d) {
	        var b = this.owner;
	        if (b.allowCellEdit == false) {
	            return;
	        }
	        if (b.cellEditAction != d.type) {
	            return;
	        }
	        var a = d.record, c = d.column;
	        if (!c.readOnly && !b.isReadOnly()) {
	            if (d.htmlEvent.shiftKey || d.htmlEvent.ctrlKey) {} else {
	                b.beginEditCell();
	            }
	        }
	    },
	    __OnCellMouseDown: function(b) {
	        var a = this;
	     //   setTimeout(function() {
	            a.__doSelect(b);
	     //   }, 1);
	    },
	    __OnRowMouseMove: function(c) {
	        var b = this.owner;
	        var a = c.record;
	        if (!b.enabled || b.enableHotTrack == false) {
	            return;
	        }
	        b.focusRow(a);
	    },
	    __OnMouseOut: function(a) {
	        this.owner.focusRow(null);
	    },
	    __doSelect: function(h) {
	        var b = h.record, f = h.column;
	        var d = this.owner;
	        if (d.allowCellSelect) {
	            var a = [ b, f ];
	            d.setCurrentCell(a);
	        }
	        if (d.onlyCheckSelection && !f._multiRowSelect) {
	            return;
	        }	        
	        if (d.allowRowSelect) {
	            var c = {
	                record: b,
	                selected: b,
	                cancel: false
	            };
	            if (b) {
	                d.fire("beforerowselect", c);
	            }
	            if (c.cancel) {
	                return;
	            }
	            if (d.getMultiSelect()) {
	                d.el.onselectstart = function() {};
	                if (h.htmlEvent.shiftKey) {
	                    d.el.onselectstart = function() {
	                        return false;
	                    };
	                    h.htmlEvent.preventDefault();
	                    var g = d.getCurrent();
	                    if (g) {
	                        d.deselectAll();
	                        d.selectRange(g, b);
	                        d.setCurrent(g);
	                    } else {
	                        d.select(b);
	                        d.setCurrent(b);
	                    }
	                } else {
	                    d.el.onselectstart = function() {};
	                    if (h.htmlEvent.ctrlKey) {
	                        d.el.onselectstart = function() {
	                            return false;
	                        };
	                        h.htmlEvent.preventDefault();
	                    }
	                    if (h.column._multiRowSelect === true || h.htmlEvent.ctrlKey || d.allowUnselect) {
	                        if (d.isSelected(b)) {
	                            d.deselect(b);
	                        } else {
	                            d.select(b);
	                            d.setCurrent(b);
	                        }
	                    } else {
	                        if (d.isSelected(b)) {} else {
	                            d.deselectAll();
	                            d.select(b);
	                            d.setCurrent(b);
	                        }
	                    }
	                }
	            } else {
	                if (!d.isSelected(b)) {
	                    d.deselectAll();
	                    d.select(b);
	                } else {
	                    if (h.htmlEvent.ctrlKey || d.allowUnselect) {
	                        d.deselectAll();
	                    }
	                }
	            }
	        }
	    }
	};

	kitui._Grid_RowGroup = function(a) {
	    this.owner = a, el = a.el;
	    kitui.on(a._bodyEl, "click", this.__OnClick, this);
	};

	kitui._Grid_RowGroup.prototype = {
	    __OnClick: function(c) {
	        var a = this.owner;
	        var b = a._getRowGroupByEvent(c);
	        if (b) {
	            a.toggleRowGroup(b);
	        }
	    }
	};

	kitui._Grid_ColumnsMenu = function(a) {
	    this.owner = a;
	    this.menu = this.createMenu();
	    kitui.on(a.el, "contextmenu", this.__OnContextMenu, this);
	};

	kitui._Grid_ColumnsMenu.prototype = {
	    createMenu: function() {
	    	var a;
	        var a = kitui.create({
	            type: "menu",
	            hideOnClick: false
	        });
	        a.on("itemclick", this.__OnItemClick, this);
	        return a;
	    },
	    updateMenu: function() {
	        var e = this.owner, h = this.menu;
	        var d = e.getBottomColumns();
	        var b = [];
	        for (var c = 0, a = d.length; c < a; c++) {
	            var f = d[c];
	            var g = {};
	            g.checked = f.visible;
	            g.checkOnClick = true;
	            g.text = e._createHeaderText(f);
	            if (g.text == "&nbsp;") {
	                if (f.type == "indexcolumn") {
	                    g.text = "序号";
	                }
	                if (f.type == "checkcolumn") {
	                    g.text = "选择";
	                }
	            }
	            b.push(g);
	            g._column = f;
	        }
	        h.setItems(b);
	    },
	    __OnContextMenu: function(b) {
	        var a = this.owner;
	        if (a.showColumnsMenu == false) {
	            return;
	        }
	        if (kitui.isAncestor(a._columnsEl, b.target) == false) {
	            return;
	        }
	        this.updateMenu();
	        this.menu.showAtPos(b.pageX, b.pageY);
	        return false;
	    },
	    __OnItemClick: function(k) {
	        var a = this.owner, b = this.menu;
	        var f = a.getBottomColumns();
	        var m = b.getItems();
	        var o = k.item, d = o._column;
	        var g = 0;
	        for (var j = 0, c = m.length; j < c; j++) {
	            var h = m[j];
	            if (h.getChecked()) {
	                g++;
	            }
	        }
	        if (g < 1) {
	            o.setChecked(true);
	        }
	        var n = o.getChecked();
	        if (n) {
	            a.showColumn(d);
	        } else {
	            a.hideColumn(d);
	        }
	    }
	};

	kitui._Grid_CellToolTip = function(a) {
	    this.owner = a;
	    kitui.on(this.owner._bodyEl, "mousemove", this.__OnGridMouseMove, this);
	};

	kitui._Grid_CellToolTip.prototype = {
	    __OnGridMouseMove: function(g) {
	        var d = this.owner;
	        var a = d._getCellByEvent(g);
	        var b = d._getCellEl(a[0], a[1]);
	        var c = d.getCellError(a[0], a[1]);
	        if (b) {
	            if (c) {
	                b.title = c.errorText;
	                return;
	            }
	            if (b.firstChild) {
	                if (kitui.hasClass(b.firstChild, "kitui-grid-cell-inner")) {
	                    b = b.firstChild;
	                }
	            }
	            if (b.scrollWidth > b.clientWidth) {
	                var f = b.innerText || b.textContent || "";
	                b.title = f.trim();
	            } else {
	                b.title = "";
	            }
	        }
	    }
	};

	kitui._Grid_Sorter = function(a) {
	    this.owner = a;
	    this.owner.on("headercellclick", this.__OnGridHeaderCellClick, this);
	    kitui.on(a._headerEl, "mousemove", this.__OnGridHeaderMouseMove, this);
	    kitui.on(a._headerEl, "mouseout", this.__OnGridHeaderMouseOut, this);
	};

	kitui._Grid_Sorter.prototype = {
	    __OnGridHeaderMouseOut: function(a) {
	        if (this._focusedColumnEl) {
	            kitui.removeClass(this._focusedColumnEl, "kitui-grid-headerCell-hover");
	        }
	    },
	    __OnGridHeaderMouseMove: function(b) {
	        var a = kitui.findParent(b.target, "kitui-grid-headerCell");
	        if (a) {
	            kitui.addClass(a, "kitui-grid-headerCell-hover");
	            this._focusedColumnEl = a;
	        }
	    },
	    __OnGridHeaderCellClick: function(d) {
	        var a = this.owner;
	        if (!kitui.hasClass(d.htmlEvent.target, "kitui-grid-column-splitter")) {
	            if (a.allowSortColumn && a.isEditing() == false) {
	                var c = d.column;
	                if (!c.columns || c.columns.length == 0) {
	                    if (c.field && c.allowSort !== false) {
	                        var b = "asc";
	                        if (a.getSortField() == c.field) {
	                            b = a.getSortOrder() == "asc" ? "desc" : "asc";
	                        }
	                        a.sortBy(c.field, b);
	                    }
	                }
	            }
	        }
	    }
	};

	kitui._Grid_ColumnMove = function(a) {
	    this.owner = a;
	    kitui.on(this.owner.el, "mousedown", this.__onGridMouseDown, this);
	};

	kitui._Grid_ColumnMove.prototype = {
	    __onGridMouseDown: function(d) {
	        var b = this.owner;
	        if (b.isEditing()) {
	            return;
	        }
	        if (kitui.hasClass(d.target, "kitui-grid-column-splitter")) {
	            return;
	        }
	        if (d.button == kitui.MouseButton.Right) {
	            return;
	        }
	        var a = kitui.findParent(d.target, b._headerCellCls);
	        if (a) {
	            this._remove();
	            var c = b._getColumnByEvent(d);
	            if (b.allowMoveColumn && c && c.allowMove) {
	                this.dragColumn = c;
	                this._columnEl = a;
	                this.getDrag().start(d);
	            }
	        }
	    },
	    getDrag: function() {
	        if (!this.drag) {
	            this.drag = new kitui.Drag({
	                capture: false,
	                onStart: kitui.createDelegate(this._OnDragStart, this),
	                onMove: kitui.createDelegate(this._OnDragMove, this),
	                onStop: kitui.createDelegate(this._OnDragStop, this)
	            });
	        }
	        return this.drag;
	    },
	    _OnDragStart: function(b) {
	        function c(d) {
	            var e = d.header;
	            if (typeof e == "function") {
	                e = e.call(a, d);
	            }
	            if (kitui.isNull(e) || e === "") {
	                e = "&nbsp;";
	            }
	            return e;
	        }
	        var a = this.owner;
	        this._dragProxy = kitui.append(document.body, '<div class="kitui-grid-columnproxy"></div>');
	        this._dragProxy.innerHTML = '<div class="kitui-grid-columnproxy-inner" style="height:26px;">' + c(this.dragColumn) + "</div>";
	        kitui.setXY(this._dragProxy, b.now[0] + 15, b.now[1] + 18);
	        kitui.addClass(this._dragProxy, "kitui-grid-no");
	        this.moveTop = kitui.append(document.body, '<div class="kitui-grid-movetop"></div>');
	        this.moveBottom = kitui.append(document.body, '<div class="kitui-grid-movebottom"></div>');
	    },
	    _OnDragMove: function(d) {
	        var a = this.owner;
	        var e = d.now[0];
	        kitui.setXY(this._dragProxy, e + 15, d.now[1] + 18);
	        this.targetColumn = this.insertAction = null;
	        var i = kitui.findParent(d.event.target, a._headerCellCls);
	        if (i) {
	            var b = a._getColumnByEvent(d.event);
	            if (b && b != this.dragColumn) {
	                var h = a.getParentColumn(this.dragColumn);
	                var f = a.getParentColumn(b);
	                if (h == f) {
	                    this.targetColumn = b;
	                    this.insertAction = "before";
	                    var g = a.getColumnBox(this.targetColumn);
	                    if (e > g.x + g.width / 2) {
	                        this.insertAction = "after";
	                    }
	                }
	            }
	        }
	        if (this.targetColumn) {
	            kitui.addClass(this._dragProxy, "kitui-grid-ok");
	            kitui.removeClass(this._dragProxy, "kitui-grid-no");
	            var c = a.getColumnBox(this.targetColumn);
	            this.moveTop.style.display = "block";
	            this.moveBottom.style.display = "block";
	            if (this.insertAction == "before") {
	                kitui.setXY(this.moveTop, c.x - 4, c.y - 9);
	                kitui.setXY(this.moveBottom, c.x - 4, c.bottom);
	            } else {
	                kitui.setXY(this.moveTop, c.right - 4, c.y - 9);
	                kitui.setXY(this.moveBottom, c.right - 4, c.bottom);
	            }
	        } else {
	            kitui.removeClass(this._dragProxy, "kitui-grid-ok");
	            kitui.addClass(this._dragProxy, "kitui-grid-no");
	            this.moveTop.style.display = "none";
	            this.moveBottom.style.display = "none";
	        }
	    },
	    _remove: function() {
	        var a = this.owner;
	        kitui.removeNode(this._dragProxy);
	        kitui.removeNode(this.moveTop);
	        kitui.removeNode(this.moveBottom);
	        this._dragProxy = this.moveTop = this.moveBottom = this.dragColumn = this.targetColumn = null;
	    },
	    _OnDragStop: function(b) {
	        var a = this.owner;
	        a.moveColumn(this.dragColumn, this.targetColumn, this.insertAction);
	        this._remove();
	    }
	};

	kitui._Grid_ColumnSplitter = function(a) {
	    this.owner = a;
	    kitui.on(a.el, "mousedown", this.__OnMouseDown, this);
	};

	kitui._Grid_ColumnSplitter.prototype = {
	    __OnMouseDown: function(d) {
	        var b = this.owner;
	        var a = d.target;
	        if (kitui.hasClass(a, "kitui-grid-column-splitter")) {
	            var c = b._getColumnById(a.id);
	            if (b.allowResizeColumn && c && c.allowResize) {
	                this.splitterColumn = c;
	                this.getDrag().start(d);
	            }
	        }
	    },
	    getDrag: function() {
	        if (!this.drag) {
	            this.drag = new kitui.Drag({
	                capture: true,
	                onStart: kitui.createDelegate(this._OnDragStart, this),
	                onMove: kitui.createDelegate(this._OnDragMove, this),
	                onStop: kitui.createDelegate(this._OnDragStop, this)
	            });
	        }
	        return this.drag;
	    },
	    _OnDragStart: function(c) {
	        var b = this.owner;
	        var a = b.getColumnBox(this.splitterColumn);
	        this.columnBox = a;
	        this._dragProxy = kitui.append(document.body, '<div class="kitui-grid-proxy"></div>');
	        var d = b.getGridViewBox();
	        d.x = a.x;
	        d.width = a.width;
	        d.right = a.right;
	        kitui.setBox(this._dragProxy, d);
	    },
	    _OnDragMove: function(c) {
	        var a = this.owner;
	        var d = kitui.copyTo({}, this.columnBox);
	        var b = d.width + (c.now[0] - c.init[0]);
	        if (b < a.columnMinWidth) {
	            b = a.columnMinWidth;
	        }
	        if (b > a.columnMaxWidth) {
	            b = a.columnMaxWidth;
	        }
	        kitui.setWidth(this._dragProxy, b);
	    },
	    _OnDragStop: function(f) {
	        var a = this.owner;
	        var e = kitui.getBox(this._dragProxy);
	        var g = this;
	        var h = a.allowSortColumn;
	        a.allowSortColumn = false;
	        setTimeout(function() {
	            jQuery(g._dragProxy).remove();
	            g._dragProxy = null;
	            a.allowSortColumn = h;
	        }, 10);
	        var d = this.splitterColumn;
	        var c = parseInt(d.width);
	        if (c + "%" != d.width) {
	            var b = a.getColumnWidth(d);
	            var i = parseInt(c / b * e.width);
	            a.setColumnWidth(d, i);
	        }
	    }
	};

	kitui._Grid_DragDrop = function(a) {
	    this.owner = a;
	    this.owner.on("CellMouseDown", this.__OnGridCellMouseDown, this);
	};

	kitui._Grid_DragDrop.prototype = {
	    __OnGridCellMouseDown: function(d) {

	        if (d.htmlEvent.button == kitui.MouseButton.Right) {
	            return;
	        }
	        var b = this.owner;
	        this.dropObj = b;
	        if (b.isReadOnly() || b.isAllowDrag(d.record, d.column) == false) {
	            return;
	        }
	        var a = d.record;
	        this.isTree = !!b.isTree;
	        this.beginRecord = a;
	        var c = this._getDrag();
	        c.start(d.htmlEvent);
	    },
	    _OnDragStart: function(c) {
	        var b = this.owner;
	        b._dragging = true;
	        var a = this.beginRecord;
	        this.dragData = b._getDragData();
	        if (this.dragData.indexOf(a) == -1) {
	            this.dragData.push(a);
	        }
	        this.feedbackEl = kitui.append(document.body, '<div class="kitui-feedback"></div>');
	        this.feedbackEl.innerHTML = b._getDragText(this.dragData);
	        this.lastFeedbackClass = "";
	        this._enableHotTrack = b.getEnableHotTrack();
	        b.setEnableHotTrack(false);
	    },
	    _getDropTargetObj: function(a) {
	        var b = kitui.findParent(a.target, "kitui-grid", 500);
	        if (b) {
	            return kitui.get(b);
	        }
	    },
	    _OnDragMove: function(d) {
	        var c = this.owner;
	        var e = this._getDropTargetObj(d.event);
	        this.dropObj = e;
	        var a = d.now[0], f = d.now[1];
	        kitui.setXY(this.feedbackEl, a + 15, f + 18);
	        if (e) {
	            this.isTree = e.isTree;
	            var b = e._getRecordByEvent(d.event);
	            this.dropRecord = b;
	            if (b) {
	                if (this.isTree) {
	                    this.dragAction = this.getFeedback(b, f, 3);
	                } else {
	                    this.dragAction = this.getFeedback(b, f, 2);
	                }
	            } else {
	                this.dragAction = "no";
	            }
	        } else {
	            this.dragAction = "no";
	        }
	        this.lastFeedbackClass = "kitui-feedback-" + this.dragAction;
	        this.feedbackEl.className = "kitui-feedback " + this.lastFeedbackClass;
	        if (this.dragAction == "no") {
	            b = null;
	        }
	        this.setRowFeedback(b, this.dragAction);
	    },
	    _OnDragStop: function(o) {
	        var a = this.owner;
	        var s = this.dropObj;
	        a._dragging = false;
	        kitui.removeNode(this.feedbackEl);
	        a.setEnableHotTrack(this._enableHotTrack);
	        this.feedbackEl = null;
	        this.setRowFeedback(null);
	        if (this.isTree) {
	            var c = [];
	            for (var n = 0, f = this.dragData.length; n < f; n++) {
	                var q = this.dragData[n];
	                var t = false;
	                for (var m = 0, h = this.dragData.length; m < h; m++) {
	                    var d = this.dragData[m];
	                    if (d != q) {
	                        t = a.isAncestor(d, q);
	                        if (t) {
	                            break;
	                        }
	                    }
	                }
	                if (!t) {
	                    c.push(q);
	                }
	            }
	            this.dragData = c;
	        }
	        if (this.dropRecord && s && this.dragAction != "no") {
	            var r = a._OnDragDrop(this.dragData, this.dropRecord, this.dragAction);
	            if (!r.cancel) {
	                var c = r.dragNodes, b = r.targetNode, g = r.action;
	                if (s.isTree) {
	                    if (a == s) {
	                        s.moveNodes(c, b, g);
	                    } else {
	                        a.removeNodes(c);
	                        s.addNodes(c, b, g);
	                    }
	                } else {
	                    var p = s.indexOf(b);
	                    if (g == "after") {
	                        p += 1;
	                    }
	                    s.moveRow(c, p);
	                }
	                var r = {
	                    dragNode: r.dragNodes[0],
	                    dropNode: r.targetNode,
	                    dragAction: r.action,
	                    dragNodes: r.dragNodes,
	                    targetNode: r.targetNode
	                };
	                s.fire("drop", r);
	            }
	        }
	        this.dropRecord = null;
	        this.dragData = null;
	    },
	    setRowFeedback: function(d, c) {
	        var e = this.owner;
	        var g = this.dropObj;
	        if (this.lastAddDomRow && g) {
	            g.removeRowCls(this.lastAddDomRow, "kitui-tree-feedback-add");
	        }
	        if (d == null || this.dragAction == "add") {
	            kitui.removeNode(this.feedbackLine);
	            this.feedbackLine = null;
	        }
	        this.lastRowFeedback = d;
	        if (d != null) {
	            if (c == "before" || c == "after") {
	                if (!this.feedbackLine) {
	                    this.feedbackLine = kitui.append(document.body, "<div class='kitui-feedback-line'></div>");
	                }
	                this.feedbackLine.style.display = "block";
	                var b = g.getRowBox(d);
	                var a = b.x, h = b.y - 1;
	                if (c == "after") {
	                    h += b.height;
	                }
	                kitui.setXY(this.feedbackLine, a, h);
	                var f = g.getBox(true);
	                kitui.setWidth(this.feedbackLine, f.width);
	            } else {
	                g.addRowCls(d, "kitui-tree-feedback-add");
	                this.lastAddDomRow = d;
	            }
	        }
	    },
	    getFeedback: function(q, m, p) {
	        var a = this.owner;
	        var n = this.dropObj;
	        var o = n.getRowBox(q);
	        var g = o.height;
	        var r = m - o.y;
	        var s = null;
	        if (this.dragData.indexOf(q) != -1) {
	            return "no";
	        }
	        var f = false;
	        if (p == 3) {
	            f = n.isLeaf(q);
	            for (var d = 0, c = this.dragData.length; d < c; d++) {
	                var j = this.dragData[d];
	                var b = n.isAncestor(j, q);
	                if (b) {
	                    s = "no";
	                    break;
	                }
	            }
	        }
	        if (s == null) {
	            if (p == 2) {
	                if (r > g / 2) {
	                    s = "after";
	                } else {
	                    s = "before";
	                }
	            } else {
	                if (f && n.allowLeafDropIn === false) {
	                    if (r > g / 2) {
	                        s = "after";
	                    } else {
	                        s = "before";
	                    }
	                } else {
	                    if (r > g / 3 * 2) {
	                        s = "after";
	                    } else {
	                        if (g / 3 <= r && r <= g / 3 * 2) {
	                            s = "add";
	                        } else {
	                            s = "before";
	                        }
	                    }
	                }
	            }
	        }
	        var k = n._OnGiveFeedback(s, this.dragData, q);
	        return k.effect;
	    },
	    _getDrag: function() {
	        if (!this.drag) {
	            this.drag = new kitui.Drag({
	                onStart: kitui.createDelegate(this._OnDragStart, this),
	                onMove: kitui.createDelegate(this._OnDragMove, this),
	                onStop: kitui.createDelegate(this._OnDragStop, this)
	            });
	        }
	        return this.drag;
	    }
	};

	kitui._Grid_Events = function(a) {
	    this.owner = a, el = a.el;
	    kitui.on(el, "click", this.__OnClick, this);
	    kitui.on(el, "dblclick", this.__OnDblClick, this);
	    kitui.on(el, "mousedown", this.__OnMouseDown, this);
	    kitui.on(el, "mouseup", this.__OnMouseUp, this);
	    kitui.on(el, "mousemove", this.__OnMouseMove, this);
	    kitui.on(el, "mouseover", this.__OnMouseOver, this);
	    kitui.on(el, "mouseout", this.__OnMouseOut, this);
	    kitui.on(el, "keydown", this.__OnKeyDown, this);
	    kitui.on(el, "keyup", this.__OnKeyUp, this);
	    kitui.on(el, "contextmenu", this.__OnContextMenu, this);
	};

	kitui._Grid_Events.prototype = {
	    __OnClick: function(a) {
	        this._fireEvent(a, "Click");
	    },
	    __OnDblClick: function(a) {
	        this._fireEvent(a, "Dblclick");
	    },
	    __OnMouseDown: function(a) {
	        this._fireEvent(a, "MouseDown");
	    },
	    __OnMouseUp: function(a) {
	        if (kitui.isAncestor(this.el, a.target)) {
	            this._fireEvent(a, "MouseUp");
	        }
	    },
	    __OnMouseMove: function(a) {
	        this._fireEvent(a, "MouseMove");
	    },
	    __OnMouseOver: function(a) {
	        this._fireEvent(a, "MouseOver");
	    },
	    __OnMouseOut: function(a) {
	        this._fireEvent(a, "MouseOut");
	    },
	    __OnKeyDown: function(a) {
	        this._fireEvent(a, "KeyDown");
	    },
	    __OnKeyUp: function(a) {
	        this._fireEvent(a, "KeyUp");
	    },
	    __OnContextMenu: function(a) {
	        this._fireEvent(a, "ContextMenu");
	    },
	    _fireEvent: function(h, b) {
	        var a = this.owner;
	        var j = a._getCellByEvent(h);
	        var f = j[0], d = j[1];
	        if (f) {
	            var g = {
	                record: f,
	                row: f,
	                htmlEvent: h
	            };
	            var i = a["_OnRow" + b];
	            if (i) {
	                i.call(a, g);
	            } else {
	                a.fire("row" + b, g);
	            }
	        }
	        if (d) {
	            var g = {
	                column: d,
	                field: d.field,
	                htmlEvent: h
	            };
	            var i = a["_OnColumn" + b];
	            if (i) {
	                i.call(a, g);
	            } else {
	                a.fire("column" + b, g);
	            }
	        }
	        if (f && d) {
	            var g = {
	                sender: a,
	                record: f,
	                row: f,
	                column: d,
	                field: d.field,
	                htmlEvent: h
	            };
	            var i = a["_OnCell" + b];
	            if (i) {
	                i.call(a, g);
	            } else {
	                a.fire("cell" + b, g);
	            }
	            if (d["onCell" + b]) {
	                d["onCell" + b].call(d, g);
	            }
	        }
	        if (!f && d) {
	            var g = {
	                column: d,
	                htmlEvent: h
	            };
	            var i = a["_OnHeaderCell" + b];
	            if (i) {
	                i.call(a, g);
	            } else {
	                var c = "onheadercell" + b.toLowerCase();
	                if (d[c]) {
	                    g.sender = a;
	                    d[c](g);
	                }
	                a.fire("headercell" + b, g);
	            }
	        }
	    }
	};

	kitui.DataGrid = function(a) {
	    kitui.DataGrid.superclass.constructor.call(this, a);
	    this._DragDrop = new kitui._Grid_DragDrop(this);
	    this._Events = new kitui._Grid_Events(this);
	    this._Select = new kitui._Grid_Select(this);
	    this._RowGroup = new kitui._Grid_RowGroup(this);
	    this._Splitter = new kitui._Grid_ColumnSplitter(this);
	    this._ColumnMove = new kitui._Grid_ColumnMove(this);
	    this._Sorter = new kitui._Grid_Sorter(this);
	    this._CellToolTip = new kitui._Grid_CellToolTip(this);
	    this._ColumnsMenu = new kitui._Grid_ColumnsMenu(this);
	    this._createPagers();
	};

	kitui.extend(kitui.DataGrid, kitui.ScrollGridView, {
	    uiCls: "kitui-datagrid",
	    selectOnLoad: false,
	    showHeader: false,
	    showPager: true,
	    onlyCheckSelection: false,
	    _$onlyCheckSelection: true,
	    allowUnselect: false,
	    allowRowSelect: true,
	    allowCellSelect: false,
	    allowCellEdit: false,
	    cellEditAction: "cellclick",
	    allowCellValid: false,
	    allowResizeColumn: true,
	    allowSortColumn: true,
	    allowMoveColumn: true,
	    showColumnsMenu: false,
	    virtualScroll: false,
	    enableHotTrack: true,
	    showLoading: true,
	    loadDataset:null,
	    gridpath:"",
	    set: function(e) {
	        if (typeof e == "string") {
	            return this;
	        }
	        var d = e.value;
	        delete e.value;
	        var a = e.url;
	        delete e.url;
	        var c = e.data;
	        delete e.data;
	        var b = e.columns;
	        delete e.columns;
	        if (!kitui.isNull(b)) {
	            this.setColumns(b);
	        }
	        kitui.DataGrid.superclass.set.call(this, e);
	        if (!kitui.isNull(c)) {
	            this.setData(c);
	        }
	        if (!kitui.isNull(a)) {
	            this.setUrl(a);
	        }
	        if (!kitui.isNull(d)) {
	            this.setValue(d);
	        }
	        return this;
	    },
	    _OnDrawCell: function() {
	        var b = kitui.DataGrid.superclass._OnDrawCell.apply(this, arguments);
	        var a = this.getCellError(b.record, b.column);
	        if (a) {
	            if (!b.cellCls) {
	                b.cellCls = "";
	            }
	            b.cellCls += " kitui-grid-cell-error ";
	        }
	        return b;
	    },
	    _bindSource: function() {
	        var a = this._dataSource;
	        a.on("beforeload", this.__OnSourceBeforeLoad, this);
	        a.on("preload", this.__OnSourcePreLoad, this);
	        a.on("load", this.__OnSourceLoadSuccess, this);
	        a.on("loaderror", this.__OnSourceLoadError, this);
	        a.on("loaddata", this.__OnSourceLoadData, this);
	        a.on("cleardata", this.__OnSourceClearData, this);
	        a.on("sort", this.__OnSourceSort, this);
	        a.on("filter", this.__OnSourceFilter, this);
	        a.on("pageinfochanged", this.__OnPageInfoChanged, this);
	        a.on("selectionchanged", this.__OnSelectionChanged, this);
	        a.on("currentchanged", function(b) {
	            this.fire("currentchanged", b);
	        }, this);
	        a.on("add", this.__OnSourceAdd, this);
	        a.on("update", this.__OnSourceUpdate, this);
	        a.on("remove", this.__OnSourceRemove, this);
	        a.on("move", this.__OnSourceMove, this);
	        a.on("beforeadd", function(b) {
	            this.fire("beforeaddrow", b);
	        }, this);
	        a.on("beforeupdate", function(b) {
	            this.fire("beforeupdaterow", b);
	        }, this);
	        a.on("beforeremove", function(b) {
	            this.fire("beforeremoverow", b);
	        }, this);
	        a.on("beforemove", function(b) {
	            this.fire("beforemoverow", b);
	        }, this);
	    },
	    _initData: function() {
	        this._mergedCellMaps = {};
	        this._mergedCells = {};
	        this._cellErrors = [];
	        this._cellMapErrors = {};
	    },
	    __OnSourceBeforeLoad: function(a) {
	        this.fire("beforeload", a);
	        if (a.cancel == true) {
	            return;
	        }
	        if (this.showLoading) {
	        	
	            this.loading();
	        }
	    },
	    __OnSourcePreLoad: function(a) {
	        this.fire("preload", a);
	    },
	    __OnSourceLoadSuccess: function(a) {
	        if (this.isGrouping()) {
	            this.groupBy(this._groupField, this._groupDir);
	        }
	        this.fire("load", a);
	        this.unmask();
	    },
	    __OnSourceLoadError: function(a) {
	        this.fire("loaderror", a);
	        this.unmask();
	    },
	    __OnSourceSort: function(a) {
	        this.deferUpdate();
	        this.fire("sort", a);
	    },
	    __OnSourceFilter: function(a) {
	        this.deferUpdate();
	        this.fire("filter", a);
	    },
	    __OnSourceAdd: function(a) {
	        this._doAddRowEl(a.record);
	        this._doUpdateSummaryRow();
	        this.fire("addrow", a);
	    },
	    __OnSourceUpdate: function(a) {
	        this._doUpdateRowEl(a.record);
	        this._doUpdateSummaryRow();
	        this.fire("updaterow", a);
	    },
	    __OnSourceRemove: function(a) {
	        this._doRemoveRowEl(a.record);
	        this._doUpdateSummaryRow();
	        this.fire("removerow", a);
	        if (this.isVirtualScroll()) {
	            this.deferUpdate();
	        }
	    },
	    __OnSourceMove: function(a) {
	        this._doMoveRowEl(a.record, a.index);
	        this._doUpdateSummaryRow();
	        this.fire("moverow", a);
	    },
	    __OnSelectionChanged: function(c) {
	        if (c.select) {
	            this.fire("rowselect", c);
	        } else {
	            this.fire("rowdeselect", c);
	        }
	        var b = this;
	        if (this._selectionTimer) {
	            clearTimeout(this._selectionTimer);
	            this._selectionTimer = null;
	        }
	        this._selectionTimer = setTimeout(function() {
	            b._selectionTimer = null;
	            b.fire("SelectionChanged", c);
	        }, 1);
	        var a = new Date();
	        this._doRowSelect(c._records, c.select);
	    },
	    __OnPageInfoChanged: function(a) {
	        this._updatePagesInfo();
	    },
	    _updatePagesInfo: function() {
	        var a = this.getPageIndex();
	        var e = this.getPageSize();
	        var d = this.getTotalCount();
	        var h = this.getTotalPage();
	        var f = this._pagers;
	        for (var g = 0, c = f.length; g < c; g++) {
	            var b = f[g];
	            b.update(a, e, d);
	        }
	    },
	    setPager: function(b) {
	        if (typeof b == "string") {
	            var a = kitui.byId(b);
	            if (!a) {
	                return;
	            }
	            kitui.parse(b);
	            b = kitui.get(b);
	        }
	        if (b) {
	            this.bindPager(b);
	        }
	    },
	    setPagerButtons: function(e) {
	        this._bottomPager.setButtons(e);
	    },	    
	    bindPager: function(a) {
	        if (!a) {
	            return;
	        }
	        this.unbindPager(a);
	        this._pagers.add(a);
	        a.on("beforepagechanged", this.__OnPageChanged, this);
	    },
	    unbindPager: function(a) {
	        if (!a) {
	            return;
	        }
	        this._pagers.remove(a);
	        a.un("pagechanged", this.__OnPageChanged, this);
	    },
	    __OnPageChanged: function(a) {
	        a.cancel = true;
	        this.gotoPage(a.pageIndex, a.pageSize);
	    },
	    _canUpdateRowEl: true,
	    _doUpdateRowEl: function(e) {
	        var t, i, n = this.getFrozenColumns();
	        var s = this.getUnFrozenColumns();
	        var o = this.indexOf(e);
	        var r = this._createRowHTML(e, o, s, 2);
	        var l = this._getRowEl(e, 2);
	        if (!l) {
	            return;
	        }
	        jQuery(l).before(r);
	        t = l.previousSibling;
	        if (l) {
	            l.parentNode.removeChild(l);
	        }
	        if (this.isFrozen()) {
	            r = this._createRowHTML(e, o, n, 1), l = this._getRowEl(e, 1);
	            jQuery(l).before(r);
	            i = l.previousSibling;
	            jQuery(l).remove();
	        }
	        this.deferLayout();
	        if (t && i) {
	            this._doSyncRowHeight(t, i);
	        }
	    },
	    _doAddRowEl: function(f) {
	        var h = this.getFrozenColumns();
	        var e = this.getUnFrozenColumns();
	        var d = this._rowsLockContentEl.firstChild;
	        var b = this._rowsViewContentEl.firstChild;
	        var g = this.indexOf(f);
	        var a = this.getAt(g + 1);
	        function c(n, k, l, j) {
	            var m = this._createRowHTML(n, g, l, k);
	            if (a) {
	                var i = this._getRowEl(a, k);
	                jQuery(i).before(m);
	            } else {
	                kitui.append(j, m);
	            }
	        }
	        c.call(this, f, 2, e, b);
	        if (this.isFrozen()) {
	            c.call(this, f, 1, h, d);
	        }
	        this.deferLayout();
	    },
	    _doRemoveRowEl: function(c) {
	        var a = this._getRowEl(c, 1);
	        var b = this._getRowEl(c, 2);
	        if (a) {
	            a.parentNode.removeChild(a);
	        }
	        if (b) {
	            b.parentNode.removeChild(b);
	        }
	        this.deferLayout();
	    },
	    _doMoveRowEl: function(b, a) {
	        this._doRemoveRowEl(b);
	        this._doAddRowEl(b);
	    },
	    _getRowGroupEl: function(c, a) {
	        var d = this._createRowGroupId(c, a);
	        var b = kitui.byId(d, this.el);
	        return b;
	    },
	    _getRowGroupRowsEl: function(c, a) {
	        var d = this._createRowGroupRowsId(c, a);
	        var b = kitui.byId(d, this.el);
	        return b;
	    },
	    _getRowEl: function(c, a) {
	        c = this.getRecord(c);
	        var d = this._createRowId(c, a);
	        var b = kitui.byId(d, this.el);
	        return b;
	    },
	    _getHeaderCellEl: function(c, a) {
	        c = this.getColumn(c);
	        var d = this._createHeaderCellId(c, a);
	        var b = kitui.byId(d, this.el);
	        return b;
	    },
	    _getCellEl: function(c, b) {
	        c = this.getRecord(c);
	        b = this.getColumn(b);
	        if (!c || !b) {
	            return null;
	        }
	        var d = this._createCellId(c, b);
	        var a = kitui.byId(d, this.el);
	        return a;
	    },
	    _getRecordByEvent: function(d) {
	        var b = kitui.findParent(d.target, this._rowCls);
	        if (!b) {
	            return null;
	        }
	        var c = b.id.split("$");
	        var a = c[c.length - 1];
	        return this._getRowByID(a);
	    },
	    _getColumnByEvent: function(c) {
	        var a = kitui.findParent(c.target, this._cellCls);
	        if (!a) {
	            a = kitui.findParent(c.target, this._headerCellCls);
	        }
	        if (a) {
	            var b = a.id.split("$");
	            var d = b[b.length - 1];
	            return this._getColumnById(d);
	        }
	        return null;
	    },
	    _getCellByEvent: function(c) {
	        var a = this._getRecordByEvent(c);
	        var b = this._getColumnByEvent(c);
	        return [ a, b ];
	    },
	    _getRowByID: function(a) {
	        return this._dataSource.getby_id(a);
	    },
	    _getColumnById: function(a) {
	        return this._columnModel._getColumnById(a);
	    },
	    addRowCls: function(d, a) {
	        var c = this._getRowEl(d, 1);
	        var b = this._getRowEl(d, 2);
	        if (c) {
	            kitui.addClass(c, a);
	        }
	        if (b) {
	            kitui.addClass(b, a);
	        }
	    },
	    removeRowCls: function(d, a) {
	        var c = this._getRowEl(d, 1);
	        var b = this._getRowEl(d, 2);
	        if (c) {
	            kitui.removeClass(c, a);
	        }
	        if (b) {
	            kitui.removeClass(b, a);
	        }
	    },
	    getCellBox: function(c, b) {
	        c = this.getRow(c);
	        b = this.getColumn(b);
	        if (!c || !b) {
	            return null;
	        }
	        var a = this._getCellEl(c, b);
	        if (!a) {
	            return null;
	        }
	        return kitui.getBox(a);
	    },
	    getColumnBox: function(b) {
	        var d = this._createHeaderCellId(b, 2);
	        var a = document.getElementById(d);
	        if (!a) {
	            d = this._createHeaderCellId(b, 1);
	            a = document.getElementById(d);
	        }
	        if (a) {
	            var c = kitui.getBox(a);
	            c.x -= 1;
	            c.left = c.x;
	            c.right = c.x + c.width;
	            return c;
	        }
	    },
	    getRowBox: function(e) {
	        var b = this._getRowEl(e, 1);
	        var d = this._getRowEl(e, 2);
	        if (!d) {
	            return null;
	        }
	        var c = kitui.getBox(d);
	        if (b) {
	            var a = kitui.getBox(b);
	            c.x = c.left = a.left;
	            c.width = c.right - c.x;
	        }
	        return c;
	    },
	    _doRowSelect: function(f, a) {
	        var e = new Date();
	        for (var d = 0, c = f.length; d < c; d++) {
	            var b = f[d];
	            if (a) {
	                this.addRowCls(b, this._rowSelectedCls);
	            } else {
	                this.removeRowCls(b, this._rowSelectedCls);
	            }
	        }
	    },
	    focusRow: function(a) {
	        if (this._focusRow == a) {
	            return;
	        }
	        if (this._focusRow) {
	            this.removeRowCls(this._focusRow, this._rowHoverCls);
	        }
	        this._focusRow = a;
	        if (a) {
	            this.addRowCls(a, this._rowHoverCls);
	        }
	    },
	    scrollIntoView: function(f, c) {
	        try {
	            if (c) {
	                var a = this._getCellEl(f, c);
	                kitui.scrollIntoView(a, this._rowsViewEl, true);
	            } else {
	                var b = this._getRowEl(f, 2);
	                kitui.scrollIntoView(b, this._rowsViewEl, false);
	            }
	        } catch (d) {}
	    },
	    setOnlyCheckSelection: function(a) {
	        this.onlyCheckSelection = a;
	    },
	    getOnlyCheckSelection: function() {
	        return this.onlyCheckSelection;
	    },	    	  	    
	    setShowLoading: function(a) {
	        this.showLoading = a;
	    },
	    getShowLoading: function() {
	        return this.showLoading;
	    },
	    setEnableHotTrack: function(a) {
	        this.enableHotTrack = a;
	    },
	    getEnableHotTrack: function() {
	        return this.enableHotTrack;
	    },
	    setAllowUnselect: function(a) {
	        this.allowUnselect = a;
	    },
	    getAllowUnselect: function() {
	        return this.allowUnselect;
	    },
	    setAllowRowSelect: function(a) {
	        this.allowRowSelect = a;
	    },
	    getAllowRowSelect: function() {
	        return this.allowRowSelect;
	    },
	    setAllowCellSelect: function(a) {
	        this.allowCellSelect = a;
	    },
	    getAllowCellSelect: function() {
	        return this.allowCellSelect;
	    },
	    setAllowCellEdit: function(a) {
	        this.allowCellEdit = a;
	    },
	    getAllowCellEdit: function() {
	        return this.allowCellEdit;
	    },
	    setCellEditAction: function(a) {
	        this.cellEditAction = a;
	    },
	    getCellEditAction: function() {
	        return this.cellEditAction;
	    },
	    setAllowCellValid: function(a) {
	        this.allowCellValid = a;
	    },
	    getAllowCellValid: function() {
	        return this.allowCellValid;
	    },
	    setAllowResizeColumn: function(a) {
	        this.allowResizeColumn = a;
	        kitui.removeClass(this.el, "kitui-grid-resizeColumns-no");
	        if (!a) {
	            kitui.addClass(this.el, "kitui-grid-resizeColumns-no");
	        }
	    },
	    getAllowResizeColumn: function() {
	        return this.allowResizeColumn;
	    },
	    setAllowSortColumn: function(a) {
	        this.allowSortColumn = a;
	    },
	    getAllowSortColumn: function() {
	        return this.allowSortColumn;
	    },
	    setAllowMoveColumn: function(a) {
	        this.allowMoveColumn = a;
	    },
	    getAllowMoveColumn: function() {
	        return this.allowMoveColumn;
	    },
	    setShowColumnsMenu: function(a) {
	        this.showColumnsMenu = a;
	    },
	    getShowColumnsMenu: function() {
	        return this.showColumnsMenu;
	    },
	    setEditNextOnEnterKey: function(a) {
	        this.editNextOnEnterKey = a;
	    },
	    getEditNextOnEnterKey: function() {
	        return this.editNextOnEnterKey;
	    },
	    setEditOnTabKey: function(a) {
	        this.editOnTabKey = a;
	    },
	    getEditOnTabKey: function() {
	        return this.editOnTabKey;
	    },
	    getEditNextRowCell: function() {
	        return this.editNextRowCell;
	    },
	    setEditNextRowCell: function(e) {
	        this.editNextRowCell = e;
	    },	    
	    setCreateOnEnter: function(a) {
	        this.createOnEnter = a;
	    },
	    getCreateOnEnter: function() {
	        return this.createOnEnter;
	    },
	    _currentCell: null,
	    _doCurrentCell: function(a) {
	        if (this._currentCell) {
	            var b = this._currentCell[0], d = this._currentCell[1];
	            var c = this._getCellEl(b, d);
	            if (c) {
	                if (a) {
	                    kitui.addClass(c, this._cellSelectedCls);
	                } else {
	                    kitui.removeClass(c, this._cellSelectedCls);
	                }
	            }
	        }
	    },
	    setCurrentCell: function(a) {
	        if (this._currentCell != a) {
	            this._doCurrentCell(false);
	            this._currentCell = a;
	            if (a) {
	                var c = this.getRow(a[0]);
	                var b = this.getColumn(a[1]);
	                if (c && b) {
	                    this._currentCell = [ c, b ];
	                } else {
	                    this._currentCell = null;
	                }
	            }
	            this._doCurrentCell(true);
	            if (a) {
	                if (this.isFrozen()) {
	                    this.scrollIntoView(a[0]);
	                } else {
	                    this.scrollIntoView(a[0], a[1]);
	                }
	            }
	            this.fire("currentcellchanged");
	        }
	    },
	    getCurrentCell: function() {
	        var a = this._currentCell;
	        if (a) {
	            if (this.indexOf(a[0]) == -1) {
	                this._currentCell = null;
	                a = null;
	            }
	        }
	        return a;
	    },
	    _editingCell: null,
	    isEditingCell: function(a) {
	        return this._editingCell && this._editingCell[0] == a[0] && this._editingCell[1] == a[1];
	    },
    _pushUpdateCallback: function(e, t, i) {
        var n = 0;
        if (this._doUpdateTimer || this._updateTimer) {
            n = 20;
        }
        if (0 == n) {
            e.apply(t, i);
        } else {
            setTimeout(function() {
                e.apply(t, i);
            }, n);
        }
    },	    
    beginEditCell: function(e, t) {
        function i(e, t) {
            new Date();
            e = this.getRow(e);
            t = this.getColumn(t);
            var i = [ e, t ];
            if (e && t) {
                this.setCurrentCell(i);
            }
            i = this.getCurrentCell();
            if (this._editingCell && i) {
                if (this._editingCell[0] == i[0] && this._editingCell[1] == i[1]) {
                    return;
                }
            }
            if (this._editingCell) {
                this.commitEdit();
            }
            if (i) {
                var e = i[0], t = i[1];
                if ("inline" != t.editMode) {
                    var n = this._OnCellBeginEdit(e, t, this.getCellEditor(t));
                    if (false !== n) {
                        this.scrollIntoView(e, t, false);
                        this._editingCell = i;
                        this.Ol1Ol0(e, t);
                    }
                }
            }
        }
        this._pushUpdateCallback(i, this, [ e, t ]);
    },
	    cancelEdit: function() {
	        if (this.allowCellEdit) {
	            if (this._editingCell) {
	                this._OnCellEndEdit();
	            }
	        } else {
	            if (this.isEditing()) {
	                this._allowLayout = false;
	                var c = this.getDataView();
	                for (var b = 0, a = c.length; b < a; b++) {
	                    var d = c[b];
	                    if (d._editing == true) {
	                        this.cancelEditRow(b);
	                    }
	                }
	                this._allowLayout = true;
	                this.doLayout();
	            }
	        }
	    },
	    commitEdit: function() {
	        if (this.allowCellEdit) {
	            if (this._editingCell) {
	                this._OnCellCommitEdit(this._editingCell[0], this._editingCell[1]);
	                this._OnCellEndEdit();
	            }
	        } else {
	            if (this.isEditing()) {
	                this._allowLayout = false;
	                var c = this.getDataView();
	                for (var b = 0, a = c.length; b < a; b++) {
	                    var d = c[b];
	                    if (d._editing == true) {
	                        this.commitEditRow(b);
	                    }
	                }
	                this._allowLayout = true;
	                this.doLayout();
	            }
	        }
	    },
	    getCellEditor: function(b, c) {
	        b = this.getColumn(b);
	        if (!b) {
	            return;
	        }
	        if (this.allowCellEdit) {
	            var a = b.__editor;
	            if (!a) {
	                a = kitui.getAndCreate(b.editor);
	            }
	            if (a && a != b.editor) {
	                b.editor = a;
	            }
	            return a;
	        } else {
	            c = this.getRow(c);
	            b = this.getColumn(b);
	            if (!c) {
	                c = this.getEditingRow();
	            }
	            if (!c || !b) {
	                return null;
	            }
	            var d = this.uid + "$" + c._uid + "$" + b._id + "$editor";
	            return kitui.get(d);
	        }
	    },
	    Ol1Ol0: function(e, t) {
	        if (!this._editingControl) {
	            return false;
	        }
	        var i = this.getCellBox(e, t);
	        if (i) {
	            var n = document.body.scrollWidth;
	            if (i.right > n) {
	                i.width = n - i.left;
	                if (i.width < 10) {
	                    i.width = 10;
	                }
	                i.right = i.left + i.width;
	            }
	        }
	        var s = {
	            sender: this,
	            rowIndex: this.indexOf(e),
	            record: e,
	            row: e,
	            column: t,
	            field: t.field,
	            cellBox: i,
	            editor: this._editingControl
	        };
	        this.fire("cellshowingedit", s);
	        var o = s.editor;
	        if (o && o.setIsValid) {
	            o.setIsValid(true);
	        }
	        if (i) {
	            this._getEditWrap(o);
	            this._editWrap.style.zIndex = kitui.getMaxZIndex();
	            this._setEditorBox(o, i);
	            kitui.on(document, "mousedown", this.__OnBodyMouseDown, this);
	            if (t.autoShowPopup && o.showPopup) {
	                o.showPopup();
	            }
	        }
	        if (o) {
	            o.keyNavEnabled = !this.navEditMode;
	        }
	    },
	    _setEditorBox: function(e, t) {
	        if (e.setWidth) {
	            var i = t.width;
	            if (i < 20) {
	                i = 20;
	            }
	            e.setWidth(i);
	        }
	        if (e.setHeight && "textarea" == e.type) {
	            var n = t.height - 1;
	            if (e.minHeight && n < e.minHeight) {
	                n = e.minHeight;
	            }
	            e.setHeight(n);
	        }
	        if (e.setWidth) {
	            i = t.width - 1;
	            if (e.minWidth && i < e.minWidth) {
	                i = e.minWidth;
	            }
	            e.setWidth(i);
	        }
	        var s = t, o = e.getHeight(), r = s.y;
	        if (o < s.height) {
	            r = Math.round(s.y + s.height / 2 - o / 2);
	        }
	        kitui.setXY(this._editWrap, s.x, r);
	        kitui.setWidth(this._editWrap, s.width);
	        var l = document.body.scrollWidth;
	        if (s.x > l) {
	            kitui.setX(this._editWrap, -1e3);
	        }
	    },    	    
	    _OnCellBeginEdit: function(b, d, c) {
	        var f = kitui._getMap(d.field, b);
	        var h = {
	            sender: this,
	            rowIndex: this.indexOf(b),
	            row: b,
	            record: b,
	            column: d,
	            field: d.field,
	            editor: c,
	            value: f,
	            cancel: false
	        };
	        this.fire("cellbeginedit", h);
	        if (!kitui.isNull(d.defaultValue) && (kitui.isNull(h.value) || h.value === "")) {
	            var a = d.defaultValue;
	            var g = kitui.clone({
	                d: a
	            });
	            h.value = g.d;
	        }
	        var c = h.editor;
	        f = h.value;
	        if (h.cancel) {
	            return false;
	        }
	        if (!c) {
	            return false;
	        }
	        if (kitui.isNull(f)) {
	            f = "";
	        }
	        if (c.setValue) {
	            c.setValue(f);
	        }
	        c.ownerRowID = b._uid;
	        if (d.displayField && c.setText) {
	            var i = kitui._getMap(d.displayField, b);
	            if (!kitui.isNull(d.defaultText) && (kitui.isNull(i) || i === "")) {
	                var g = kitui.clone({
	                    d: d.defaultText
	                });
	                i = g.d;
	            }
	            c.setText(i);
	        }
	        if (this.allowCellEdit) {
	            this._editingControl = h.editor;
	        }
	        return true;
	    },
	    _OnCellCommitEdit: function(e, t, i, n) {
	        var s = {
	            sender: this,
	            rowIndex: this.indexOf(e),
	            record: e,
	            row: e,
	            column: t,
	            field: t.field,
	            editor: n ? n : this.getCellEditor(t),
	            value: kitui.isNull(i) ? "" : i,
	            text: "",
	            cancel: false
	        };
	        if (s.editor && s.editor.getValue) {
	            try {
	                s.editor.blur();
	            } catch (o) {}
	            s.value = s.editor.getValue();
	        }
	        if (s.editor && s.editor.getText) {
	            s.text = s.editor.getText();
	        }
	        var r = kitui._getMap(t.field, e), l = s.value;
	        s.oldValue = r;
	        if (r!=undefined && kitui.isEquals(r, l)) {     //对于可输入的combobox，允许输入不在范围内的数值
	           	return s;
	        }
	        this.fire("cellcommitedit", s);
	        if (false == s.cancel) {
	            if (this.allowCellEdit) {
	                var a = {};
	                a[t.field] = s.value;
	                if (t.displayField) {
	                    a[t.displayField] = s.text;
	                }
			        if(s.editor){
			        	if(s.editor.itype=="currency"||s.editor.itype=="number"){
			        		if (s.value&&isNaN(s.value)) {
				            	i[t.field]=""
				            }
			        	}
			        }	                	                
	                this.updateRow(e, a);
	            }
	        }
	        return s;
	    },
	    _OnCellEndEdit: function() {
	        if (!this._editingCell) {
	            return;
	        }
	        var a = this._editingCell[0];
	        var f = this._editingCell[1];
	        var g = {
	            sender: this,
	            rowIndex: this.indexOf(a),
	            record: a,
	            row: a,
	            column: f,
	            field: f.field,
	            editor: this._editingControl,
	            value: a[f.field]
	        };
	        this.fire("cellendedit", g);
	        if (this.allowCellEdit) {
	            var d = g.editor;
	            if (d && d.setIsValid) {
	                d.setIsValid(true);
	            }
	            if (this._editWrap) {
	                this._editWrap.style.display = "none";
	            }
	            var h = this._editWrap.childNodes;
	            for (var b = h.length - 1; b >= 0; b--) {
	                var c = h[b];
	                this._editWrap.removeChild(c);
	            }
	            if (d && d.hidePopup) {
	                d.hidePopup();
	            }
	            if (d && d.setValue) {
	                d.setValue("");
	            }
	            this._editingControl = null;
	            this._editingCell = null;
	            if (this.allowCellValid) {
	                this.validateRow(a);
	            }
	        }
	    },
	   _OnCellShowingEdit: function(e) {
	        var t = this._editingControl;
	        if (13 == e.keyCode && t && "textarea" == t.type) {
	            return;
	        }
	        if (13 == e.keyCode) {
	            var i = this._editingCell;
	            if (i && i[1] && false === i[1].enterCommit) {
	                return;
	            }
	            this.commitEdit();
	            this.focus();
	            if (this.editNextOnEnterKey) {
	                this.fire("celleditenter", {
	                    record: i[0],
	                    column: i[1]
	                });
	                this._beginEditNextCell(false == e.shiftKey);
	            }
	        } else {
	            if (27 == e.keyCode) {
	                this.cancelEdit();
	                this.focus();
	            } else {
	                if (9 == e.keyCode) {
	                    this.commitEdit();
	                    if (this.editOnTabKey) {
	                        e.preventDefault();
	                        this.commitEdit();
	                        this._beginEditNextCell(false == e.shiftKey, true);
	                    }
	                }
	            }
	        }
	        if (this.navEditMode) {
	            i = this._editingCell;
	            if (i) {
	                var n = i[1];
	                if (n && false === n.navUpdown) {
	                    if (t && (38 == e.keyCode || 40 == e.keyCode)) {
	                        return;
	                    }
	                }
	            }
	            switch (e.keyCode) {
	              case 37:
	                this.focus();
	                e.preventDefault();
	                this.commitEdit();
	                this._beginEditNextCell(false !== e.shiftKey);
	                break;
	
	              case 39:
	                this.focus();
	                this.commitEdit();
	                if (this.editOnTabKey) {
	                    e.preventDefault();
	                    this.commitEdit();
	                    this._beginEditNextCell(false == e.shiftKey, true);
	                }
	                break;
	
	              case 38:
	                this.focus();
	                e.preventDefault();
	                i = this._editingCell;
	                this.commitEdit();
	                var s = i[0], n = i[1];
	                if (s) {
	                    var o = this.indexOf(s);
	                    if (o > 0) {
	                        o -= 1;
	                    }
	                } else {
	                    return;
	                }
	                var r = this.getRow(o), l = [ r, n ];
	                this.setCurrentCell(l);
	                this.beginEditCell();
	                break;
	
	              case 40:
	                this.focus();
	                e.preventDefault();
	                i = this._editingCell;
	                this.commitEdit();
	                s = i[0], n = i[1];
	                if (s) {
	                    var o = this.indexOf(s), a = this.getData().length;
	                    if (o < a - 1) {
	                        o += 1;
	                    }
	                } else {
	                    return;
	                }
	                r = this.getRow(o), l = [ r, n ];
	                this.setCurrentCell(l);
	                this.beginEditCell();
	            }
	        }
	    },
	    __OnBodyMouseDown: function(f) {
	        if (this._editingControl) {
	            var a = this._getCellByEvent(f);
	            if (this._editingCell && a) {
	                if (this._editingCell[0] == a.record && this._editingCell[1] == a.column) {
	                    return false;
	                }
	            }
	            var b = false;
	            if (this._editingControl.within) {
	                b = this._editingControl.within(f);
	            } else {
	                b = kitui.isAncestor(this._editWrap, f.target);
	            }
	            if (b == false) {
	                var d = this;
	                if (kitui.isAncestor(this._bodyEl, f.target) == false) {
	                    setTimeout(function() {
	                        d.commitEdit();
	                    }, 1);
	                } else {
	                    var c = d._editingCell;
	                    setTimeout(function() {
	                        var e = d._editingCell;
	                        if (c == e) {
	                            d.commitEdit();
	                        }
	                    }, 70);
	                }
	                kitui.un(document, "mousedown", this.__OnBodyMouseDown, this);
	            }
	        }
	    },
	    _getEditWrap: function(e) {
	        if (!this._editWrap) {
	            this._editWrap = kitui.append(document.body, '<div class="kitui-grid-editwrap" style="position:absolute;"></div>');
	            kitui.on(this._editWrap, "keydown", this._OnCellShowingEdit, this);
	        }
	        this._editWrap.style.zIndex = 1e9;
	        this._editWrap.style.display = "block";
	        if (e.render) {
	            e.render(this._editWrap);
	            setTimeout(function() {
	                e.focus();
	                if (e.selectText) {
	                    setTimeout(function() {
	                        e.selectText();
	                    }, 11);
	                }
	            }, 50);
	            if (e.setVisible) {
	                e.setVisible(true);
	            }
	        } else {
	            if (e.el) {
	                this._editWrap.appendChild(e.el);
	                setTimeout(function() {
	                    try {
	                        e.el.focus();
	                    } catch (t) {}
	                }, 50);
	            }
	        }
	        return this._editWrap;
	    },
	    ___OnEditControlKeyDown: function(c) {
	        var b = this._editingControl;
	        if (c.keyCode == 13 && b && b.type == "textarea") {
	            return;
	        }
	        if (c.keyCode == 13) {
	            var a = this._editingCell;
	            if (a && a[1] && a[1].enterCommit === false) {
	                return;
	            }
	            this.commitEdit();
	            this.focus();
	            if (this.editNextOnEnterKey) {
	                this._beginEditNextCell(c.shiftKey == false);
	            } else {}
	        } else {
	            if (c.keyCode == 27) {
	                this.cancelEdit();
	                this.focus();
	            } else {
	                if (c.keyCode == 9) {
	                    this.commitEdit();
	                    if (this.editOnTabKey) {
	                        c.preventDefault();
	                        this.commitEdit();
	                        this._beginEditNextCell(c.shiftKey == false,true);
	                    } else {}
	                }
	            }
	        }
	    },
	    editNextOnEnterKey: false,
	    editNextRowCell: false,
	    editOnTabKey: true,
	    createOnEnter: false,
	    _beginEditNextCell: function(e, t) {
	        var i = this, n = this.getCurrentCell();
	        if (!n) {
	            return;
	        }
	        this.focus();
	        var s = i.getVisibleColumns(), o = n ? n[1] : null, r = n ? n[0] : null;
	        function l(e) {
	            return i.getVisibleRows()[e];
	        }
	        function a(e) {
	            return i.getVisibleRows().indexOf(e);
	        }
	        function h() {
	            return i.getVisibleRows().length;
	        }
	        var u = s.indexOf(o), d = a(r), c = h();
	        if (false === e) {
	            if (this.skipReadOnlyCell) {
	                var f = this, m = p();
	                function p() {
	                    for (var e = 0, t = u - 1 === 0 ? s.length : u - 1; t > e; t--) {
	                        o = s[t];
	                        var i = f.isCellCanEdit(r, o);
	                        if (i) {
	                            return o;
	                        }
	                    }
	                }
	                if (!m || 0 == u) {
	                    u = s.length;
	                    var g = p();
	                    _();
	                }
	            } else {
	                u -= 1;
	                o = s[u];
	                if (!o) {
	                    o = s[s.length - 1];
	                    _();
	                }
	            }
	            function _() {
	                r = l(d - 1);
	                if (!r) {
	                    return;
	                }
	            }
	        } else {
	            if (this.editNextRowCell && !t) {
	                if (d + 1 < c) {
	                    r = l(d + 1);
	                }
	            } else {
	                function v() {
	                    r = i.getAt(d + 1);
	                    if (!r) {
	                        if (this.createOnEnter) {
	                            r = {};
	                            this.addRow(r);
	                        } else {
	                            return;
	                        }
	                    }
	                }
	                function y() {
	                    for (var e = u + 1 == w ? 0 : u + 1; e < w; e++) {
	                        o = s[e];
	                        var t = f.isCellCanEdit(r, o);
	                        if (t) {
	                            return o;
	                        }
	                    }
	                }
	                if (this.skipReadOnlyCell) {
	                    var f = this, w = s.length, m = y();
	                    if (!m || u + 1 == w) {
	                        u = 0;
	                        g = y();
	                        v();
	                    }
	                } else {
	                    u += 1;
	                    o = s[u];
	                    if (!o) {
	                        o = s[0];
	                        v();
	                    }
	                }
	            }
	        }
	        n = [ r, o ];
	        i.setCurrentCell(n);
	        if (!i.onlyCheckSelection) {
	            if (i.getCurrent() != r) {
	                i.deselectAll();
	                i.setCurrent(r);
	            }
	        }
	        i.scrollIntoView(r, o);
	        if (i.isReadOnly() || o.readOnly) {
	            return false;
	        }
	        i.beginEditCell();
	    },
	    getEditorOwnerRow: function(b) {
	        var a = b.ownerRowID;
	        return this.getRowByUID(a);
	    },
    beginEditRow: function(row) {
        if (this.allowCellEdit) {
            return;
        }
        function beginEdit(row) {
            var sss = new Date();
            row = this.getRow(row);
            if (!row) {
                return;
            }
            var rowEl = this._getRowEl(row, 2);
            if (!rowEl) {
                return;
            }
            row._editing = true;
            this._doUpdateRowEl(row);
            rowEl = this._getRowEl(row, 2);
            kitui.addClass(rowEl, "kitui-grid-rowEdit");
            for (var columns = this.getVisibleColumns(), i = 0, l = columns.length; i < l; i++) {
                var column = columns[i], value = row[column.field], cellEl = this._getCellEl(row, column);
                if (!cellEl) {
                    continue;
                }
                if ("string" == typeof column.editor) {
                    column.editor = eval("(" + column.editor + ")");
                }
                var editorConfig = kitui.copyTo({}, column.editor);
                editorConfig.id = this.uid + "$" + row._uid + "$" + column._id + "$editor";
                var editor = kitui.create(editorConfig);
                if (this._OnCellBeginEdit(row, column, editor)) {
                    if (editor) {
                        kitui.addClass(cellEl, "kitui-grid-cellEdit");
                        cellEl.innerHTML = "";
                        cellEl.appendChild(editor.el);
                        kitui.addClass(editor.el, "kitui-grid-editor");
                    }
                }
            }
            this.doLayout();
        }
        this._pushUpdateCallback(beginEdit, this, [ row ]);
    },
	    cancelEditRow: function(k) {
	        if (this.allowCellEdit) {
	            return;
	        }
	        k = this.getRow(k);
	        if (!k || !k._editing) {
	            return;
	        }
	        delete k._editing;
	        var f = this._getRowEl(k);
	        var e = this.getVisibleColumns();
	        for (var h = 0, g = e.length; h < g; h++) {
	            var d = e[h];
	            var a = this._createCellId(k, e[h]);
	            var b = document.getElementById(a);
	            var c = b.firstChild;
	            var j = kitui.get(c);
	            if (!j) {
	                continue;
	            }
	            j.destroy();
	        }
	        this._doUpdateRowEl(k);
	        this.doLayout();
	    },
	    commitEditRow: function(b) {
	        if (this.allowCellEdit) {
	            return;
	        }
	        b = this.getRow(b);
	        if (!b || !b._editing) {
	            return;
	        }
	        var a = this.getEditRowData(b);
	        this._canUpdateRowEl = false;
	        this.updateRow(b, a);
	        this._canUpdateRowEl = true;
	        this.cancelEditRow(b);
	    },
	    isEditing: function() {
	        var c = this.getDataView();
	        for (var b = 0, a = c.length; b < a; b++) {
	            var d = c[b];
	            if (d._editing == true) {
	                return true;
	            }
	        }
	        return false;
	    },
	    isEditingRow: function(a) {
	        a = this.getRow(a);
	        if (!a) {
	            return false;
	        }
	        return !!a._editing;
	    },
	    isNewRow: function(a) {
	        return a._state == "added";
	    },
	    getEditingRows: function() {
	        var d = [];
	        var c = this.getDataView();
	        for (var b = 0, a = c.length; b < a; b++) {
	            var e = c[b];
	            if (e._editing == true) {
	                d.push(e);
	            }
	        }
	        return d;
	    },
	    getEditingRow: function() {
	        var a = this.getEditingRows();
	        return a[0];
	    },
	    getEditData: function(c) {
	        var e = [];
	        var e = this.getDataView();
	        for (var b = 0, a = e.length; b < a; b++) {
	            var f = e[b];
	            if (f._editing == true) {
	                var d = this.getEditRowData(b, c);
	                d._index = b;
	                e.push(d);
	            }
	        }
	        return e;
	    },
	    getEditRowData: function(t, r) {
	        t = this.getRow(t);
	        if (!t || !t._editing) {
	            return null;
	        }
	        var a = this.getIdField();
	        var g = {};
	        var j = this.getVisibleColumns();
	        for (var m = 0, k = j.length; m < k; m++) {
	            var h = j[m];
	            var c = this._createCellId(t, j[m]);
	            var d = document.getElementById(c);
	            var p = null;
	            if (h.type == "checkboxcolumn") {
	                var s = h.getCheckBoxEl(t);
	                var q = s.checked ? h.trueValue : h.falseValue;
	                p = this._OnCellCommitEdit(t, h, q);
	            } else {
	                var f = d.firstChild;
	                var n = kitui.get(f);
	                if (!n) {
	                    continue;
	                }
	                p = this._OnCellCommitEdit(t, h, null, n);
	            }
	            kitui._setMap(h.field, p.value, g);
	            if (h.displayField) {
	                kitui._setMap(h.displayField, p.text, g);
	            }
	        }
	        g[a] = t[a];
	        if (r) {
	            var b = kitui.copyTo({}, t);
	            g = kitui.copyTo(b, g);
	        }
	        return g;
	    },
	    collapseGroups: function() {
	        if (!this.isGrouping()) {
	            return;
	        }
	        this._allowLayout = false;
	        var a = this.getGroupingView();
	        for (var c = 0, b = a.length; c < b; c++) {
	            var d = a[c];
	            this.collapseRowGroup(d);
	        }
	        this._allowLayout = true;
	        this.doLayout();
	    },
	    expandGroups: function() {
	        if (!this.isGrouping()) {
	            return;
	        }
	        this._allowLayout = false;
	        var a = this.getGroupingView();
	        for (var c = 0, b = a.length; c < b; c++) {
	            var d = a[c];
	            this.expandRowGroup(d);
	        }
	        this._allowLayout = true;
	        this.doLayout();
	    },
	    toggleRowGroup: function(a) {
	        if (a.expanded) {
	            this.collapseRowGroup(a);
	        } else {
	            this.expandRowGroup(a);
	        }
	    },
	    collapseRowGroup: function(d) {
	        d = this.getRowGroup(d);
	        if (!d) {
	            return;
	        }
	        d.expanded = false;
	        var b = this._getRowGroupEl(d, 1);
	        var c = this._getRowGroupRowsEl(d, 1);
	        var a = this._getRowGroupEl(d, 2);
	        var e = this._getRowGroupRowsEl(d, 2);
	        if (c) {
	            c.style.display = "none";
	        }
	        if (e) {
	            e.style.display = "none";
	        }
	        if (b) {
	            kitui.addClass(b, "kitui-grid-group-collapse");
	        }
	        if (a) {
	            kitui.addClass(a, "kitui-grid-group-collapse");
	        }
	        this.doLayout();
	    },
	    expandRowGroup: function(d) {
	        d = this.getRowGroup(d);
	        if (!d) {
	            return;
	        }
	        d.expanded = true;
	        var b = this._getRowGroupEl(d, 1);
	        var c = this._getRowGroupRowsEl(d, 1);
	        var a = this._getRowGroupEl(d, 2);
	        var e = this._getRowGroupRowsEl(d, 2);
	        if (c) {
	            c.style.display = "";
	        }
	        if (e) {
	            e.style.display = "";
	        }
	        if (b) {
	            kitui.removeClass(b, "kitui-grid-group-collapse");
	        }
	        if (a) {
	            kitui.removeClass(a, "kitui-grid-group-collapse");
	        }
	        this.doLayout();
	    },
	    showAllRowDetail: function() {
	        this._allowLayout = false;
	        var c = this.getDataView();
	        for (var b = 0, a = c.length; b < a; b++) {
	            var d = c[b];
	            this.showRowDetail(d);
	        }
	        this._allowLayout = true;
	        this.doLayout();
	    },
	    hideAllRowDetail: function() {
	        this._allowLayout = false;
	        var c = this.getDataView();
	        for (var b = 0, a = c.length; b < a; b++) {
	            var d = c[b];
	            this.hideRowDetail(d);
	        }
	        this._allowLayout = true;
	        this.doLayout();
	    },
	    isShowRowDetail: function(a) {
	        a = this.getRow(a);
	        if (!a) {
	            return false;
	        }
	        return !!a._showDetail;
	    },
	    toggleRowDetail: function(a) {
	        a = this.getRow(a);
	        if (!a) {
	            return;
	        }
	        if (grid.isShowRowDetail(a)) {
	            grid.hideRowDetail(a);
	        } else {
	            grid.showRowDetail(a);
	        }
	    },
	    showRowDetail: function(d) {
	        d = this.getRow(d);
	        if (!d || d._showDetail == true) {
	            return;
	        }
	        d._showDetail = true;
	        var b = this._getRowDetailEl(d, 1, true);
	        var e = this._getRowDetailEl(d, 2, true);
	        if (b) {
	            b.style.display = "";
	        }
	        if (e) {
	            e.style.display = "";
	        }
	        var a = this._getRowEl(d, 1);
	        var c = this._getRowEl(d, 2);
	        if (a) {
	            kitui.addClass(a, "kitui-grid-expandRow");
	        }
	        if (c) {
	            kitui.addClass(c, "kitui-grid-expandRow");
	        }
	        this.fire("showrowdetail", {
	            record: d
	        });
	        this.doLayout();
	    },
	    hideRowDetail: function(d) {
	        d = this.getRow(d);
	        if (!d || d._showDetail !== true) {
	            return;
	        }
	        d._showDetail = false;
	        var b = this._getRowDetailEl(d, 1);
	        var e = this._getRowDetailEl(d, 2);
	        if (b) {
	            b.style.display = "none";
	        }
	        if (e) {
	            e.style.display = "none";
	        }
	        var a = this._getRowEl(d, 1);
	        var c = this._getRowEl(d, 2);
	        if (a) {
	            kitui.removeClass(a, "kitui-grid-expandRow");
	        }
	        if (c) {
	            kitui.removeClass(c, "kitui-grid-expandRow");
	        }
	        this.fire("hiderowdetail", {
	            record: d
	        });
	        this.doLayout();
	    },
	    _getRowDetailEl: function(d, a, c) {
	        d = this.getRow(d);
	        if (!d) {
	            return null;
	        }
	        var e = this._createRowDetailId(d, a);
	        var b = document.getElementById(e);
	        if (!b && c === true) {
	            b = this._createRowDetail(d, a);
	        }
	        return b;
	    },
	    _createRowDetail: function(e, a) {
	        var h = this.getFrozenColumns();
	        var d = this.getUnFrozenColumns();
	        var g = h.length;
	        if (a == 2) {
	            g = d.length;
	        }
	        var c = this._getRowEl(e, a);
	        if (!c) {
	            return null;
	        }
	        var f = this._createRowDetailId(e, a);
	        var b = '<tr id="' + f + '" class="kitui-grid-detailRow"><td class="kitui-grid-detailCell" colspan="' + g + '"></td></tr>';
	        jQuery(c).after(b);
	        return document.getElementById(f);
	    },
	    _createRowDetailId: function(b, a) {
	        return this._id + "$detail" + a + "$" + b._id;
	    },
	    getRowDetailCellEl: function(c, a) {
	        if (!a) {
	            a = 2;
	        }
	        var b = this._getRowDetailEl(c, a);
	        if (b) {
	            return b.cells[0];
	        }
	    },
	    autoHideRowDetail: true,
	    setAutoHideRowDetail: function(a) {
	        this.autoHideRowDetail = a;
	    },
	    getAutoHideRowDetail: function() {
	        return this.autoHideRowDetail;
	    },
	    mergeColumns: function(d) {
	        if (d && kitui.isArray(d) == false) {
	            d = [ d ];
	        }
	        var a = this;
	        var b = a.getVisibleColumns();
	        if (!d) {
	            d = b;
	        }
	        var f = a.getDataView();
	        f.push({});
	        var h = [];
	        for (var g = 0, e = d.length; g < e; g++) {
	            var c = d[g];
	            c = a.getColumn(c);
	            if (!c) {
	                continue;
	            }
	            var k = j(c);
	            h.addRange(k);
	        }
	        function j(m) {
	            if (!m.field) {
	                return;
	            }
	            var v = [];
	            var r = -1, q = 1, p = b.indexOf(m);
	            var u = null;
	            for (var o = 0, n = f.length; o < n; o++) {
	                var w = f[o];
	                var s = kitui._getMap(m.field, w);
	                if (r == -1 || s != u) {
	                    if (q > 1) {
	                        var t = {
	                            rowIndex: r,
	                            columnIndex: p,
	                            rowSpan: q,
	                            colSpan: 1
	                        };
	                        v.push(t);
	                    }
	                    r = o;
	                    q = 1;
	                    u = s;
	                } else {
	                    q++;
	                }
	            }
	            return v;
	        }
	        a.mergeCells(h);
	    },
	    mergeCells: function(c) {
	        if (!kitui.isArray(c)) {
	            return;
	        }
	        this._mergedCells = c;
	        var e = this._mergedCellMaps = {};
	        function f(r, p, q, o, s) {
	            for (var n = r, g = r + q; n < g; n++) {
	                for (var m = p, h = p + o; m < h; m++) {
	                    if (n == r && m == p) {
	                        e[n + ":" + m] = s;
	                    } else {
	                        e[n + ":" + m] = true;
	                    }
	                }
	            }
	        }
	        var c = this._mergedCells;
	        if (c) {
	            for (var d = 0, b = c.length; d < b; d++) {
	                var a = c[d];
	                if (!a.rowSpan) {
	                    a.rowSpan = 1;
	                }
	                if (!a.colSpan) {
	                    a.colSpan = 1;
	                }
	                f(a.rowIndex, a.columnIndex, a.rowSpan, a.colSpan, a);
	            }
	        }
	        this.deferUpdate();
	    },
	    margeCells: function(a) {
	        this.mergeCells(a);
	    },
	    _isCellVisible: function(c, b) {
	        if (!this._mergedCellMaps) {
	            return true;
	        }
	        var a = this._mergedCellMaps[c + ":" + b];
	        return !(a === true);
	    },
	    _getCellEls: function(n, h, m, g) {
	        var p = [];
	        if (!kitui.isNumber(n)) {
	            return [];
	        }
	        if (!kitui.isNumber(h)) {
	            return [];
	        }
	        var b = this.getVisibleColumns();
	        var e = this.getDataView();
	        for (var f = n, a = n + m; f < a; f++) {
	            for (var d = h, c = h + g; d < c; d++) {
	                var o = this._getCellEl(f, d);
	                if (o) {
	                    p.push(o);
	                }
	            }
	        }
	        return p;
	    },
	    _getDragData: function() {
	        return this.getSelecteds().clone();
	    },
	    _getDragText: function(a) {
	        return "Records " + a.length;
	    },
	    allowDrag: false,
	    allowDrop: false,
	    allowLeafDropIn: false,
	    setAllowLeafDropIn: function(a) {
	        this.allowLeafDropIn = a;
	    },
	    getAllowLeafDropIn: function() {
	        return this.allowLeafDropIn;
	    },
	    setAllowDrag: function(a) {
	        this.allowDrag = a;
	    },
	    getAllowDrag: function() {
	        return this.allowDrag;
	    },
	    setAllowDrop: function(a) {
	        this.allowDrop = a;
	    },
	    getAllowDrop: function() {
	        return this.allowDrop;
	    },
	    isAllowDrag: function(b, a) {
	        if (this.isReadOnly() || this.enabled == false) {
	            return false;
	        }
	        if (!this.allowDrag || !a.allowDrag) {
	            return false;
	        }
	        if (b.allowDrag === false) {
	            return false;
	        }
	        var c = this._OnDragStart(b, a);
	        return !c.cancel;
	    },
	    _OnDragStart: function(b, a) {
	        var c = {
	            node: b,
	            column: a,
	            cancel: false
	        };
	        this.fire("dragstart", c);
	        return c;
	    },
	    _OnGiveFeedback: function(c, b, a) {
	        var d = {};
	        d.effect = c;
	        d.nodes = b;
	        d.node = d.nodes[0];
	        d.targetNode = a;
	        d.dragNodes = b;
	        d.dragNode = d.dragNodes[0];
	        d.dropNode = d.targetNode;
	        d.dragAction = d.action;
	        this.fire("givefeedback", d);
	        return d;
	    },
	    _OnDragDrop: function(c, b, a) {
	        c = c.clone();
	        var d = {
	            dragNodes: c,
	            targetNode: b,
	            action: a,
	            cancel: false
	        };
	        d.dragNode = d.dragNodes[0];
	        d.dropNode = d.targetNode;
	        d.dragAction = d.action;
	        this.fire("beforedrop", d);
	        this.fire("dragdrop", d);
	        return d;
	    },
	    moveUp: function(b) {
	        if (!kitui.isArray(b)) {
	            return;
	        }
	        var f = this;
	        b = b.sort(function(h, g) {
	            var j = f.indexOf(h);
	            var i = f.indexOf(g);
	            if (j > i) {
	                return 1;
	            }
	            return -1;
	        });
	        for (var d = 0, a = b.length; d < a; d++) {
	            var e = b[d];
	            var c = this.indexOf(e);
	            this.moveRow(e, c - 1);
	        }
	    },
	    moveDown: function(b) {
	        if (!kitui.isArray(b)) {
	            return;
	        }
	        var f = this;
	        b = b.sort(function(h, g) {
	            var j = f.indexOf(h);
	            var i = f.indexOf(g);
	            if (j > i) {
	                return 1;
	            }
	            return -1;
	        });
	        b.reverse();
	        for (var d = 0, a = b.length; d < a; d++) {
	            var e = b[d];
	            var c = this.indexOf(e);
	            this.moveRow(e, c + 2);
	        }
	    },
	    setAjaxAsync: function(a) {
	        this._dataSource.ajaxAsync = a;
	        this.ajaxAsync = a;
	    },
	    getAjaxAsync: function() {
	        return this._dataSource.ajaxAsync;
	    },
	    setAjaxMethod: function(a) {
	        this._dataSource.ajaxMethod = a;
	        this.ajaxMethod = a;
	    },
	    getAjaxMethod: function() {
	        return this._dataSource.ajaxMethod;
	    },
	    setAjaxOptions: function(a) {
	        this._dataSource.setAjaxOptions(a);
	    },
	    getAjaxOptions: function() {
	        return this._dataSource.getAjaxOptions();
	    },
	    setAutoLoad: function(a) {
	        this._dataSource.setAutoLoad(a);
	    },
	    getAutoLoad: function() {
	        return this._dataSource.getAutoLoad();
	    },
	    setLoadParams: function(a) {
	        this._dataSource.setLoadParams(a);
	    },
	    getLoadParams: function() {
	        return this._dataSource.getLoadParams();
	    },	    
	    setUrl: function(a) {
	        this._dataSource.setUrl(a);
	        this.url = a;
	    },
	    getUrl: function() {
	        return this._dataSource.getUrl();
	    },
	    load: function(d, c, b, a) {
	    	this._dataSource.setShowPager(this.showPager);
	        this._dataSource.load(d, c, b, a);
	    },
	    reload: function(c, b, a) {
	        this.accept();
	        this._dataSource.reload(c, b, a);
	    },
	    gotoPage: function(a, b) {
	        this._dataSource.gotoPage(a, b);
	    },
	    sortBy: function(b, c) {
	        if (!b) {
	            return null;
	        }
	        if (this._dataSource.sortMode == "server") {
	            this._dataSource.sortBy(b, c);
	        } else {
	            var a = this._columnModel._getDataTypeByField(b);
	            this._dataSource._doClientSortField(b, c, a);
	        }
	    },
	    setCheckSelectOnLoad: function(a) {
	        this._dataSource.setCheckSelectOnLoad(a);
	        this.checkSelectOnLoad = a;
	    },
	    getCheckSelectOnLoad: function() {
	        return this._dataSource.getCheckSelectOnLoad();
	    },
	    setSelectOnLoad: function(a) {
	        this._dataSource.setSelectOnLoad(a);
	        this.selectOnLoad = a;
	    },
	    getSelectOnLoad: function() {
	        return this._dataSource.getSelectOnLoad();
	    },
	    setSortMode: function(a) {
	        this._dataSource.setSortMode(a);
	        this.sortMode = a;
	    },
	    getSortMode: function() {
	        return this._dataSource.getSortMode();
	    },
	    setPageIndex: function(a) {
	        this._dataSource.setPageIndex(a);
	        this.pageIndex = a;
	    },
	    getPageIndex: function() {
	        return this._dataSource.getPageIndex();
	    },
	    setPageSize: function(a) {
	        this._dataSource.setPageSize(a);
	        this._virtualRows = a;
	        this.pageSize = a;
	    },
	    getPageSize: function() {
	        return this._dataSource.getPageSize();
	    },
	    setTotalCount: function(a) {
	        this._dataSource.setTotalCount(a);
	        this.totalCount = a;
	    },
	    setShowPager: function(a) {
	        this._dataSource.setShowPager(a);
	        this.showPager = a;
	    },	    
	    getTotalCount: function() {
	        return this._dataSource.getTotalCount();
	    },
	    getTotalPage: function() {
	        return this._dataSource.getTotalPage();
	    },
	    setSortField: function(a) {
	        this._dataSource.setSortField(a);
	        this.sortField = a;
	    },
	    getSortField: function() {
	        return this._dataSource.sortField;
	    },
	    setSortOrder: function(a) {
	        this._dataSource.setSortOrder(a);
	        this.sortOrder = a;
	    },
	    getSortOrder: function() {
	        return this._dataSource.sortOrder;
	    },
	    setPageIndexField: function(a) {
	        this._dataSource.pageIndexField = a;
	        this.pageIndexField = a;
	    },
	    getPageIndexField: function() {
	        return this._dataSource.pageIndexField;
	    },
	    setPageSizeField: function(a) {
	        this._dataSource.pageSizeField = a;
	        this.pageSizeField = a;
	    },
	    getPageSizeField: function() {
	        return this._dataSource.pageSizeField;
	    },
	    setSortFieldField: function(a) {
	        this._dataSource.sortFieldField = a;
	        this.sortFieldField = a;
	    },
	    getSortFieldField: function() {
	        return this._dataSource.sortFieldField;
	    },
	    setSortOrderField: function(a) {
	        this._dataSource.sortOrderField = a;
	        this.sortOrderField = a;
	    },
	    getSortOrderField: function() {
	        return this._dataSource.sortOrderField;
	    },
	    setTotalField: function(a) {
	        this._dataSource.totalField = a;
	        this.totalField = a;
	    },
	    getTotalField: function() {
	        return this._dataSource.totalField;
	    },
	    setDataField: function(a) {
	        this._dataSource.dataField = a;
	        this.dataField = a;
	    },
	    getDataField: function() {
	        return this._dataSource.dataField;
	    },
	    setShowReloadButton: function(a) {
	        this._bottomPager.setShowReloadButton(a);
	    },
	    getShowReloadButton: function() {
	        return this._bottomPager.getShowReloadButton();
	    },
	    setShowFilterButton: function(a) {
	        this._bottomPager.setShowFilterButton(a);
	    },
	    getShowFilterButton: function() {
	        return this._bottomPager.getShowFilterButton();
	    },
	    setShowExpButton: function(a) {
	        this._bottomPager.setShowExpButton(a);
	    },
	    getShowExpButton: function() {
	        return this._bottomPager.getShowExpButton();
	    },
	    setShowPageInfo: function(a) {
	        this._bottomPager.setShowPageInfo(a);
	    },
	    getShowPageInfo: function() {
	        return this._bottomPager.getShowPageInfo();
	    },
	    setSizeList: function(a) {
	        if (!kitui.isArray(a)) {
	            return;
	        }
	        this._bottomPager.setSizeList(a);
	    },
	    getSizeList: function() {
	        return this._bottomPager.getSizeList();
	    },
	    setShowPageSize: function(a) {
	        this._bottomPager.setShowPageSize(a);
	    },
	    getShowPageSize: function() {
	        return this._bottomPager.getShowPageSize();
	    },
	    setShowPageIndex: function(a) {
	        this.showPageIndex = a;
	        this._bottomPager.setShowPageIndex(a);
	    },
	    getShowPageIndex: function() {
	        return this._bottomPager.getShowPageIndex();
	    },
	    setShowTotalCount: function(a) {
	        this._bottomPager.setShowTotalCount(a);
	    },
	    getShowTotalCount: function() {
	        return this._bottomPager.getShowTotalCount();
	    },
	    setPagerStyle: function(a) {
	        this.pagerStyle = a;
	        kitui.setStyle(this._bottomPager.el, a);
	    },
	    setPagerCls: function(a) {
	        this.pagerCls = a;
	        kitui.addClass(this._bottomPager.el, a);
	    },
	    _beforeOpenContentMenu: function(c, b) {
	        var a = this._getRecordByEvent(b.htmlEvent);
	        if (a) {
	            c.fire("BeforeOpen", b);
	        } else {
	            b.cancel = true;
	        }
	    },
	    setLoadDataset : function(ds){
			this._dataSource.setLoadDataset(ds);
	        this.loadDataset = ds;
	    },  
	    __OnHtmlContextMenu: function(b) {
	        var a = {
	            popupEl: this.el,
	            htmlEvent: b,
	            cancel: false
	        };
	        if (kitui.isAncestor(this._columnsEl, b.target)) {
	            if (this.headerContextMenu) {
	                this.headerContextMenu.fire("BeforeOpen", a);
	                if (a.cancel == true) {
	                    return;
	                }
	                this.headerContextMenu.fire("opening", a);
	                if (a.cancel == true) {
	                    return;
	                }
	                this.headerContextMenu.showAtPos(b.pageX, b.pageY);
	                this.headerContextMenu.fire("Open", a);
	            }
	        } else {
	            var c = kitui.findParent(b.target, "kitui-grid-detailRow");
	            if (c && kitui.isAncestor(this.el, c)) {
	                return;
	            }
	            if (this.contextMenu) {
	                this._beforeOpenContentMenu(this.contextMenu, a);
	                if (a.cancel == true) {
	                    return;
	                }
	                this.contextMenu.fire("opening", a);
	                if (a.cancel == true) {
	                    return;
	                }
	                this.contextMenu.showAtPos(b.pageX, b.pageY);
	                this.contextMenu.fire("Open", a);
	            }
	        }
	        return false;
	    },
	    headerContextMenu: null,
	    setHeaderContextMenu: function(b) {
	        var a = this._getContextMenu(b);
	        if (!a) {
	            return;
	        }
	        if (this.headerContextMenu !== a) {
	            this.headerContextMenu = a;
	            this.headerContextMenu.owner = this;
	            kitui.on(this.el, "contextmenu", this.__OnHtmlContextMenu, this);
	        }
	    },
	    setContextMenu: function(e) {
	        var t = this._getContextMenu(e);
	        if (!t) {
	            return;
	        }
	        if (this.contextMenu !== t) {
	            this.contextMenu = t;
	            this.contextMenu.owner = this;
	            kitui.on(this.el, "contextmenu", this.__OnHtmlContextMenu, this);
	        }
	    },	
	    _getContextMenu: function(e) {
	        var t = e;
	        if ("string" == typeof e) {
	            t = kitui.get(e);
	            if (!t) {
	                kitui.parse(e);
	                t = kitui.get(e);
	            }
	        } else {
	            if (kitui.isArray(e)) {
	                t = {
	                    type: "menu",
	                    items: e
	                };
	            } else {
	                if (!kitui.isControl(e)) {
	                    t = kitui.create(e);
	                }
	            }
	        }
	        return t;
	    },	        
	    getHeaderContextMenu: function() {
	        return this.headerContextMenu;
	    },
	    _get_originals: function() {
	        return this._dataSource._originals;
	    },
	    _set_originals: function(a) {
	        this._dataSource._originals = a;
	    },
	    _set_clearOriginals: function(a) {
	        this._dataSource._clearOriginals = a;
	    },
	    _set_originalIdField: function(a) {
	        this._dataSource._originalIdField = a;
	    },
	    _set_autoCreateNewID: function(a) {
	        this._dataSource._autoCreateNewID = a;
	    },
	    getAttrs: function(el) {
	        var attrs = kitui.DataGrid.superclass.getAttrs.call(this, el);
	        var cs = kitui.getChildNodes(el);
	        for (var i = 0, l = cs.length; i < l; i++) {
	            var node = cs[i];
	            var property = jQuery(node).attr("property");
	            if (!property) {
	                continue;
	            }
	            property = property.toLowerCase();
	            if (property == "columns") {
	                attrs.columns = kitui._ParseColumns(node);
	                kitui.removeNode(node);
	            } else {
	                if (property == "data") {
	                    attrs.data = node.innerHTML;
	                    kitui.removeNode(node);
	                }
	            }
	        }
	       //kitui._ParseString(el, attrs, [ "url", "sizeList", "bodyCls", "bodyStyle", "footerCls", "footerStyle", "pagerCls", "pagerStyle", "onheadercellclick", "onheadercellmousedown", "onheadercellcontextmenu", "onrowdblclick", "onrowclick", "onrowmousedown", "onrowcontextmenu", "oncellclick", "oncellmousedown", "oncellcontextmenu", "onbeforeload", "onpreload", "onloaderror", "onload", "ondrawcell", "oncellbeginedit", "onselectionchanged", "ondrawgroup", "onshowrowdetail", "onhiderowdetail", "idField", "valueField", "pager", "oncellcommitedit", "oncellendedit", "headerContextMenu", "loadingMsg", "emptyText", "cellEditAction", "sortMode", "oncellvalidation", "onsort", "ondrawsummarycell", "ondrawgroupsummarycell", "onresize", "oncolumnschanged", "ajaxMethod", "ajaxOptions", "onaddrow", "onupdaterow", "onremoverow", "onmoverow", "onbeforeaddrow", "onbeforeupdaterow", "onbeforeremoverow", "onbeforemoverow", "pageIndexField", "pageSizeField", "sortFieldField", "sortOrderField", "totalField", "dataField", "sortField", "sortOrder" ]);
	        //kitui._ParseBool(el, attrs, [ "showColumns", "showFilterRow", "showSummaryRow", "showPager", "showFooter", "showHGridLines", "showVGridLines", "allowSortColumn", "allowMoveColumn", "allowResizeColumn", "fitColumns", "showLoading", "multiSelect", "allowAlternating", "resultAsData", "allowRowSelect", "allowUnselect", "enableHotTrack", "showPageIndex", "showPageSize", "showTotalCount", "checkSelectOnLoad", "allowResize", "autoLoad", "autoHideRowDetail", "allowCellSelect", "allowCellEdit", "allowCellWrap", "allowHeaderWrap", "selectOnLoad", "virtualScroll", "collapseGroupOnLoad", "showGroupSummary", "showEmptyText", "allowCellValid", "showModified", "showColumnsMenu", "showPageInfo", "showReloadButton", "showNewRow", "editNextOnEnterKey", "createOnEnter", "ajaxAsync", "allowDrag", "allowDrop", "allowLeafDropIn" ]);
	        //kitui._ParseInt(el, attrs, [ "frozenStartColumn", "frozenEndColumn", "pageIndex", "pageSize" ]);
	        if (typeof attrs.ajaxOptions == "string") {
	            attrs.ajaxOptions = eval("(" + attrs.ajaxOptions + ")");
	        }
	        if (typeof attrs.sizeList == "string") {
	            attrs.sizeList = eval("(" + attrs.sizeList + ")");
	        }
	        if (!attrs.idField && attrs.valueField) {
	            attrs.idField = attrs.valueField;
	        }
	        return attrs;
	    }
	});

	kitui.regClass(kitui.DataGrid, "datagrid");

	kitui_DataGrid_CellValidator_Prototype = {
	    getCellErrors: function() {
	        var h = this._cellErrors.clone();
	        var e = this.getDataView();
	        for (var c = 0, a = h.length; c < a; c++) {
	            var b = h[c];
	            var f = b.record;
	            var d = b.column;
	            if (e.indexOf(f) == -1) {
	                var g = f[this._rowIdField] + "$" + d._id;
	                delete this._cellMapErrors[g];
	                this._cellErrors.remove(b);
	            }
	        }
	        return this._cellErrors;
	    },
	    getCellError: function(b, a) {
	        b = this.getNode ? this.getNode(b) : this.getRow(b);
	        a = this.getColumn(a);
	        if (!b || !a) {
	            return;
	        }
	        var c = b[this._rowIdField] + "$" + a._id;
	        return this._cellMapErrors[c];
	    },
	    isValid: function() {
	        return this.getCellErrors().length == 0;
	    },
	    validate: function() {
	        var c = this.getDataView();
	        for (var b = 0, a = c.length; b < a; b++) {
	            var d = c[b];
	            this.validateRow(d);
	        }
	    },
	    validateRow: function(e) {
	        var c = this.getBottomColumns();
	        for (var b = 0, a = c.length; b < a; b++) {
	            var d = c[b];
	            this.validateCell(e, d);
	        }
	    },
	    validateCell: function(n, c) {
	        n = this.getNode ? this.getNode(n) : this.getRow(n);
	        c = this.getColumn(c);
	        if (!n || !c) {
	            return;
	        }
	        var h = {
	            record: n,
	            row: n,
	            node: n,
	            column: c,
	            field: c.field,
	            value: n[c.field],
	            isValid: true,
	            errorText: ""
	        };
	        if (c.vtype) {
	            kitui._ValidateVType(c.vtype, h.value, h, c);
	        }
	        if (h.isValid == true && c.unique && c.field) {
	            var j = {};
	            var f = this.data, k = c.field;
	            for (var g = 0, d = f.length; g < d; g++) {
	                var a = f[g];
	                var m = a[k];
	                if (kitui.isNull(m) || m === "") {} else {
	                    var b = j[m];
	                    if (b && a == n) {
	                        h.isValid = false;
	                        h.errorText = kitui._getErrorText(c, "uniqueErrorText");
	                        this.setCellIsValid(b, c, h.isValid, h.errorText);
	                        break;
	                    }
	                    j[m] = a;
	                }
	            }
	        }
	        this.fire("cellvalidation", h);
	        this.setCellIsValid(n, c, h.isValid, h.errorText);
	    },
	    setIsValid: function(d) {
	        if (d) {
	            var e = this._cellErrors.clone();
	            for (var c = 0, a = e.length; c < a; c++) {
	                var b = e[c];
	                this.setCellIsValid(b.record, b.column, true);
	            }
	        }
	    },
	    _removeRowError: function(f) {
	        var d = this.getColumns();
	        for (var c = 0, a = d.length; c < a; c++) {
	            var e = d[c];
	            var g = f[this._rowIdField] + "$" + e._id;
	            var b = this._cellMapErrors[g];
	            if (b) {
	                delete this._cellMapErrors[g];
	                this._cellErrors.remove(b);
	            }
	        }
	    },
	    setCellIsValid: function(f, d, e, a) {
	        f = this.getRow(f);
	        d = this.getColumn(d);
	        if (!f || !d) {
	            return;
	        }
	        var g = f[this._rowIdField] + "$" + d._id;
	        var b = this._getCellEl(f, d);
	        var c = this._cellMapErrors[g];
	        delete this._cellMapErrors[g];
	        this._cellErrors.remove(c);
	        if (e === true) {
	            if (b && c) {
	                kitui.removeClass(b, "kitui-grid-cell-error");
	            }
	        } else {
	            c = {
	                record: f,
	                column: d,
	                isValid: e,
	                errorText: a
	            };
	            this._cellMapErrors[g] = c;
	            this._cellErrors.add(c);
	            if (b) {
	                kitui.addClass(b, "kitui-grid-cell-error");
	            }
	        }
	    }
	};

	kitui.copyTo(kitui.DataGrid.prototype, kitui_DataGrid_CellValidator_Prototype);
	
	
})(jQuery);


kitui.copyTo(kitui.DataGrid.prototype, {
	getData:function(){
		var rtn = []
		var l = this.getDataView().length
		for(var i=0;i<l;i++){
			var row=this.getRow(i);
			rtn.push(row)
		}
		return rtn;
	},
	getColumnByField:function(cname){
		for(var i=0;i<this.getBottomColumns().length;i++){
			var column = this.getBottomColumns()[i];
			if(column.field==cname){
				return column;
			}
		}
	},
	exportData:function(cols,allpage,conO){
		if(!cols){
			cols = []
			for(var i=0,k=0;i<this.getBottomColumns().length;i++){
				var column = this.getBottomColumns()[i];
				if(column.type=="checkcolumn"||column.type=="indexcolumn"){
					continue;
				}
				var fmt = column.numberFormat;
				if(!fmt) fmt="";
				var c = { header: column.header, field: column.field,numberFormat:fmt };
				cols[k]=c
				k++
			}			
		}
		if(conO == '1')
			this._dataSource.exportData(cols,allpage,this.getFilterParams());
		else
			this._dataSource.exportData(cols,allpage,false);
		
		
	},
	printData:function(printtype,cols,allpage){
//		if(!cols){
//			cols = []
//			for(var i=0,k=0;i<this.getBottomColumns().length;i++){
//				var column = this.getBottomColumns()[i];
//				if(column.type=="checkcolumn"){
//					continue;
//				}				
//				var fmt = column.numberFormat;
//				if(!fmt) fmt="";
//				var c = { header: column.header, field: column.field,numberFormat:fmt };
//				cols[k]=c;
//				k++;
//			}			
//		}
//		this._dataSource.printData(cols,allpage);
		if(!cols){
			cols = []
			for(var i=0,k=0;i<this.getBottomColumns().length;i++){
				var column = this.getBottomColumns()[i];
				if(column.type=="checkcolumn"||column.type=="indexcolumn"){
					continue;
				}		
				cols[k]=column.id;
				k++;
			}		
		}
		var url = "tt_grid_export?isPrint=1&parameter=" + encodeURI(kitui.encode(this._dataSource.loadParams));
		url+="&cols="+cols.join(",");
		url+="&path="+this._dataSource.loadDataset.options.pagepath;
		url+="&dataset="+this._dataSource.loadDataset.options.dataset;
		url+="&action="+this._dataSource.loadDataset.options.action;
		url+="&gridpath="+this.gridpath+".page";
		url+="&gridid="+this.id;
		kitui.print([url],printtype);
	},	
	preExport:function(opt){
		var w = "550px"
		var h = "300px"
		var repeatItem = "5";
		if(opt){
			w = opt.w||"550px";
			h = opt.h||"300px";
			repeatItem = opt.repeatItem||"5";		
		}

		kitui.openWin(
			{
				 title: '导出',
				 url:'jarview?path=common/views/preExport&id='+this.id+"&repeatItem="+repeatItem,
				 //url:'view?path=app/common/views/preExport&id='+this.id+"&repeatItem="+repeatItem,
				 showModal:true,
				 showCloseButton:true,
				 showMaxButton:true,
				 openMode:'',
				 width:w,
				 height:h
			}
		)
	}	
});
///<jscompress sourcefile="jquery.treegrid.js" />
(function($) {
	kitui._DataTreeApplys = {
		    addRow: null,
		    removeRow: null,
		    removeRows: null,
		    removeRowAt: null,
		    moveRow: null,
		    setExpandOnLoad: function(a) {
		        this._dataSource.setExpandOnLoad(a);
		    },
		    getExpandOnLoad: function() {
		        return this._dataSource.getExpandOnLoad();
		    },
		    selectNode: function(a) {
		        if (a) {
		            this._dataSource.select(a);
		        } else {
		            this._dataSource.deselect(this.getSelectedNode());
		        }
		    },
		    getSelectedNode: function() {
		        return this.getSelected();
		    },
		    getSelectedNodes: function() {
		        return this.getSelecteds();
		    },
		    updateNode: function(a, c, b) {
		        this._dataSource.updateRecord(a, c, b);
		    },
		    addNode: function(b, c, a) {
		        return this._dataSource.insertNode(b, c, a);
		    },
		    removeNodeAt: function(b, a) {
		        return this._dataSource.removeNodeAt(b, a);
		    },
		    removeNode: function(a) {
		        return this._dataSource.removeNode(a);
		    },
		    moveNode: function(a, b, c) {
		        this._dataSource.moveNode(a, b, c);
		    },
		    addNodes: function(b, a, c) {
		        return this._dataSource.addNodes(b, a, c);
		    },
		    insertNodes: function(b, c, a) {
		        return this._dataSource.insertNodes(c, b, a);
		    },
		    moveNodes: function(a, c, b) {
		        this._dataSource.moveNodes(a, c, b);
		    },
		    removeNodes: function(a) {
		        return this._dataSource.removeNodes(a);
		    },
		    expandOnLoad: false,
		    checkRecursive: true,
		    autoCheckParent: false,
		    showFolderCheckBox: true,
		    idField: "id",
		    parentField: "pid",
		    nodesField: "children",
		    resultAsTree: true,
		    setShowFolderCheckBox: function(a) {
		        this._dataSource.setShowFolderCheckBox(a);
		        if (this.doUpdate) {
		            this.doUpdate();
		        }
		        this.showFolderCheckBox = a;
		    },
		    getShowFolderCheckBox: function() {
		        return this._dataSource.getShowFolderCheckBox();
		    },
		    setCheckRecursive: function(a) {
		        this._dataSource.setCheckRecursive(a);
		        this.checkRecursive = a;
		    },
		    getCheckRecursive: function() {
		        return this._dataSource.getCheckRecursive();
		    },
		    setResultAsTree: function(a) {
		        this._dataSource.setResultAsTree(a);
		    },
		    getResultAsTree: function(a) {
		        return this._dataSource.resultAsTree;
		    },
		    setParentField: function(a) {
		        this._dataSource.setParentField(a);
		        this.parentField = a;
		    },
		    getParentField: function() {
		        return this._dataSource.parentField;
		    },
		    setNodesField: function(a) {
		        this._dataSource.setNodesField(a);
		        this.nodesField = a;
		    },
		    getNodesField: function() {
		        return this._dataSource.nodesField;
		    },
		    findNodes: function(b, a) {
		        return this._dataSource.findRecords(b, a);
		    },
		    getLevel: function(a) {
		        return this._dataSource.getLevel(a);
		    },
		    isVisibleNode: function(a) {
		        return this._dataSource.isVisibleNode(a);
		    },
		    isExpandedNode: function(a) {
		        return this._dataSource.isExpandedNode(a);
		    },
		    isCheckedNode: function(a) {
		        return this._dataSource.isCheckedNode(a);
		    },
		    isLeaf: function(a) {
		        return this._dataSource.isLeafNode(a);
		    },
		    hasChildren: function(a) {
		        return this._dataSource.hasChildren(a);
		    },
		    isAncestor: function(b, a) {
		        return this._dataSource.isAncestor(b, a);
		    },
		    getNode: function(a) {
		        return this._dataSource.getRecord(a);
		    },
		    getRootNode: function() {
		        return this._dataSource.getRootNode();
		    },
		    getParentNode: function(a) {
		        return this._dataSource.getParentNode.apply(this._dataSource, arguments);
		    },
		    getAncestors: function(a) {
		        return this._dataSource.getAncestors(a);
		    },
		    getAllChildNodes: function(a) {
		        return this._dataSource.getAllChildNodes.apply(this._dataSource, arguments);
		    },
		    getChildNodes: function(b, a) {
		        return this._dataSource.getChildNodes.apply(this._dataSource, arguments);
		    },
		    getChildNodeAt: function(a, b) {
		        return this._dataSource.getChildNodeAt.apply(this._dataSource, arguments);
		    },
		    indexOfNode: function(a) {
		        return this._dataSource.indexOfNode.apply(this._dataSource, arguments);
		    },
		    hasChildNodes: function(a) {
		        return this._dataSource.hasChildNodes.apply(this._dataSource, arguments);
		    },
		    isFirstNode: function(a) {
		        return this._dataSource.isFirstNode.apply(this._dataSource, arguments);
		    },
		    isLastNode: function(a) {
		        return this._dataSource.isLastNode.apply(this._dataSource, arguments);
		    },
		    getNextNode: function(a) {
		        return this._dataSource.getNextNode.apply(this._dataSource, arguments);
		    },
		    getPrevNode: function(a) {
		        return this._dataSource.getPrevNode.apply(this._dataSource, arguments);
		    },
		    getFirstNode: function(a) {
		        return this._dataSource.getFirstNode.apply(this._dataSource, arguments);
		    },
		    getLastNode: function(a) {
		        return this._dataSource.getLastNode.apply(this._dataSource, arguments);
		    },
		    toggleNode: function(a) {
		        this._dataSource.toggle(a);
		    },
		    collapseNode: function(b, a) {
		        this._dataSource.collapse(b, a);
		    },
		    expandNode: function(b, a) {
		        this._dataSource.expand(b, a);
		    },
		    collapseAll: function() {
		        this._dataSource.collapseAll();
		    },
		    expandAll: function() {
		        this._dataSource.expandAll();
		    },
		    expandLevel: function(a) {
		        this._dataSource.expandLevel(a);
		    },
		    collapseLevel: function(a) {
		        this._dataSource.collapseLevel(a);
		    },
		    expandPath: function(a) {
		        this._dataSource.expandPath(a);
		    },
		    collapsePath: function(a) {
		        this._dataSource.collapsePath(a);
		    },
		    loadNode: function(b, a) {
		        this._dataSource.loadNode(b, a);
		    },
		    setCheckModel: function(a) {
		        this._dataSource.setCheckModel(a);
		    },
		    getCheckModel: function() {
		        return this._dataSource.getCheckModel();
		    },
		    setOnlyLeafCheckable: function(a) {
		        this._dataSource.setOnlyLeafCheckable(a);
		    },
		    getOnlyLeafCheckable: function() {
		        return this._dataSource.getOnlyLeafCheckable();
		    },
		    setAutoCheckParent: function(a) {
		        this._dataSource.setAutoCheckParent(a);
		    },
		    getAutoCheckParent: function() {
		        this._dataSource.getAutoCheckParent(value);
		    },
		    checkNode: function(a) {
		        this._dataSource.checkNode(a);
		    },
		    uncheckNode: function(a) {
		        this._dataSource.uncheckNode(a);
		    },
		    checkNodes: function(a) {
		        this._dataSource.checkNodes(a);
		    },
		    uncheckNodes: function(a) {
		        this._dataSource.uncheckNodes(a);
		    },
		    checkAllNodes: function() {
		        this._dataSource.checkAllNodes();
		    },
		    uncheckAllNodes: function() {
		        this._dataSource.uncheckAllNodes();
		    },
		    getCheckedNodes: function() {
		        return this._dataSource.getCheckedNodes.apply(this._dataSource, arguments);
		    },
		    getCheckedNodesId: function() {
		        return this._dataSource.getCheckedNodesId.apply(this._dataSource, arguments);
		    },
		    getCheckedNodesText: function() {
		        return this._dataSource.getCheckedNodesText.apply(this._dataSource, arguments);
		    },
		    isChecked: function(a) {
		        return this._dataSource.isChecked.apply(this._dataSource, arguments);
		    },
		    getCheckState: function(a) {
		        return this._dataSource.getCheckState.apply(this._dataSource, arguments);
		    },
		    setCheckable: function(b, a) {
		        this._dataSource.setCheckable.apply(this._dataSource, arguments);
		    },
		    getCheckable: function(a) {
		        return this._dataSource.getCheckable.apply(this._dataSource, arguments);
		    },
		    bubbleParent: function(c, b, a) {
		        this._dataSource.bubbleParent.apply(this._dataSource, arguments);
		    },
		    cascadeChild: function(c, b, a) {
		        this._dataSource.cascadeChild.apply(this._dataSource, arguments);
		    },
		    eachChild: function(c, b, a) {
		        this._dataSource.eachChild.apply(this._dataSource, arguments);
		    }
		};

	kitui.TreeGrid = function(a) {
	    kitui.TreeGrid.superclass.constructor.call(this, a);
	    kitui.addClass(this.el, "kitui-tree");
	    this.setAjaxAsync(false);
	    //this.setAutoLoad(true);
	    if (this.showTreeLines == true) {
	        kitui.addClass(this.el, "kitui-tree-treeLine");
	    }
	    this._AsyncLoader = new kitui._Tree_AsyncLoader(this);
	    this._Expander = new kitui._Tree_Expander(this);
	};

	kitui.copyTo(kitui.TreeGrid.prototype, kitui._DataTreeApplys);

	kitui.extend(kitui.TreeGrid, kitui.DataGrid, {
	    isTree: true,
	    uiCls: "kitui-treegrid",
	    showPager: false,
	    showNewRow: false,
	    showCheckBox: false,
	    showTreeIcon: true,
	    showExpandButtons: true,
	    showTreeLines: false,
	    showArrow: false,
	    expandOnDblClick: true,
	    expandOnNodeClick: false,
	    loadOnExpand: true,
	    _checkBoxType: "checkbox",
	    iconField: "iconCls",
	    _treeColumn: null,
	    leafIconCls: "kitui-tree-leaf",
	    folderIconCls: "kitui-tree-folder",
	    fixedRowHeight: false,
	    _checkBoxCls: "kitui-tree-checkbox",
	    _expandNodeCls: "kitui-tree-expand",
	    _collapseNodeCls: "kitui-tree-collapse",
	    _eciconCls: "kitui-tree-node-ecicon",
	    _inNodeCls: "kitui-tree-nodeshow",
	    imgPath: "",
    	imgField: "img",
	    _initEvents: function() {
	        kitui.TreeGrid.superclass._initEvents.call(this);
	        this.on("nodedblclick", this.__OnNodeDblClick, this);
	        this.on("nodeclick", this.__OnNodeClick, this);
	        this.on("cellclick", function(a) {
	            a.node = a.record;
	            a.isLeaf = this.isLeaf(a.node);
	            this.fire("nodeclick", a);
	        }, this);
	        this.on("cellmousedown", function(a) {
	            a.node = a.record;
	            a.isLeaf = this.isLeaf(a.node);
	            this.fire("nodemousedown", a);
	        }, this);
	        this.on("celldblclick", function(a) {
	            a.node = a.record;
	            a.isLeaf = this.isLeaf(a.node);
	            this.fire("nodedblclick", a);
	        }, this);
	        this.on("beforerowselect", function(a) {
	            a.node = a.selected;
	            a.isLeaf = this.isLeaf(a.node);
	            this.fire("beforenodeselect", a);
	        }, this);
	        this.on("rowselect", function(a) {
	            a.node = a.selected;
	            a.isLeaf = this.isLeaf(a.node);
	            this.fire("nodeselect", a);
	        }, this);
	    },
	    getImgField: function() {
	        return this.imgField;
	    },
	    setImgField: function(e) {
	        this.imgField = e;
	    },
	    getImgPath: function() {
	        return this.imgPath;
	    },
	    setImgPath: function(e) {
	        this.imgPath = e;
	    },	    
	    setValue: function(c) {
	        if (kitui.isNull(c)) {
	            c = "";
	        }
	        c = String(c);
	        if (this.getValue() != c) {
	            var a = this.getCheckedNodes();
	            this.uncheckNodes(a);
	            this.value = c;
	            if (this.showCheckBox) {
	                var b = String(c).split(",");
	                this._dataSource.doCheckNodes(b, true, true);
	            } else {
	                this.selectNode(c);
	            }
	        }
	    },
	    getValue: function(a) {
	        if (this.showCheckBox) {
	            return this._dataSource.getCheckedNodesId(a);
	        } else {
	            return this._dataSource.getSelectedsId();
	        }
	    },
	    isGrouping: function() {
	        return false;
	    },
	    _createSource: function() {
	        this._dataSource = new kitui.DataTree();
	    },
	    _bindSource: function() {
	        kitui.TreeGrid.superclass._bindSource.call(this);
	        var a = this._dataSource;
	        a.on("expand", this.__OnTreeExpand, this);
	        a.on("collapse", this.__OnTreeCollapse, this);
	        a.on("checkchanged", this.__OnCheckChanged, this);
	        a.on("addnode", this.__OnSourceAddNode, this);
	        a.on("removenode", this.__OnSourceRemoveNode, this);
	        a.on("movenode", this.__OnSourceMoveNode, this);
	        a.on("beforeloadnode", this.__OnBeforeLoadNode, this);
	        a.on("loadnode", this.__OnLoadNode, this);
	    },
	    __OnBeforeLoadNode: function(a) {
	        this.__showLoading = this.showLoading;
	        this.showLoading = false;
	        this.addNodeCls(a.node, "kitui-tree-loading");
	        this.fire("beforeloadnode", a);
	    },
	    __OnLoadNode: function(a) {
	        this.showLoading = this.__showLoading;
	        this.removeNodeCls(a.node, "kitui-tree-loading");
	        this.fire("loadnode", a);
	    },
	    __OnSourceAddNode: function(a) {
	        this._doAddNodeEl(a.node);
	    },
	    __OnSourceRemoveNode: function(c) {
	        this._doRemoveNodeEl(c.node);
	        var a = this.getParentNode(c.node);
	        var b = this.getChildNodes(a);
	        if (b.length == 0) {
	            this._doUpdateTreeNodeEl(a);
	        }
	    },
	    __OnSourceMoveNode: function(a) {
	        this._doMoveNodeEl(a.node);
	    },
	    _doAddNodeEl: function(c) {
	        var g = this.getFrozenColumns();
	        var e = this.getUnFrozenColumns();
	        var a = this.getParentNode(c);
	        var f = this.indexOf(c);
	        var b = false;
	        function d(m, k, j) {
	            var l = this._createRowHTML(m, f, k, j);
	            var i = this.indexOfNode(m) + 1;
	            var n = this.getChildNodeAt(i, a);
	            if (n) {
	                var o = this._getNodeEl(n, j);
	                jQuery(o).before(l);
	            } else {
	                var h = this._getNodesEl(a, j);
	                if (h) {
	                    kitui.append(h.firstChild, l);
	                } else {
	                    b = true;
	                }
	            }
	        }
	        d.call(this, c, e, 2);
	        d.call(this, c, g, 1);
	        if (b) {
	            this._doUpdateTreeNodeEl(a);
	        }
	    },
	    _doRemoveNodeEl: function(c) {
	        this._doRemoveRowEl(c);
	        var a = this._getNodesEl(c, 1);
	        var b = this._getNodesEl(c, 2);
	        if (a) {
	            a.parentNode.removeChild(a);
	        }
	        if (b) {
	            b.parentNode.removeChild(b);
	        }
	    },
	    _doMoveNodeEl: function(b) {
	        this._doRemoveNodeEl(b);
	        var a = this.getParentNode(b);
	        this._doUpdateTreeNodeEl(a);
	    },
	    _doUpdateNodeTitle: function(a) {
	        this._doUpdateTreeNodeEl(a, false);
	    },
	    _doUpdateTreeNodeEl: function(e, f) {
	        f = f !== false;
	        var d = this.getRootNode();
	        if (d == e) {
	            this.doUpdate();
	            return;
	        }
	        var l = e;
	        var a = this.getFrozenColumns();
	        var c = this.getUnFrozenColumns();
	        var j = this._createNodeHTML(e, a, 1, null, f);
	        var h = this._createNodeHTML(e, c, 2, null, f);
	        var n = this._getNodeEl(e, 1);
	        var m = this._getNodeEl(e, 2);
	        var k = this._getNodesTr(e, 1);
	        var i = this._getNodesTr(e, 2);
	        var g = kitui.createElements(j);
	        var e = g[0];
	        var b = g[1];
	        if (n) {
	            kitui.before(n, e);
	            if (f) {
	                kitui.before(n, b);
	            }
	            kitui.removeNode(n);
	            if (f) {
	                kitui.removeNode(k);
	            }
	        }
	        var g = kitui.createElements(h);
	        var e = g[0];
	        var b = g[1];
	        if (m) {
	            kitui.before(m, e);
	            if (f) {
	                kitui.before(m, b);
	            }
	            kitui.removeNode(m);
	            if (f) {
	                kitui.removeNode(i);
	            }
	        }
	        if (e.checked != true && !this.isLeaf(e)) {
	            this._doCheckNodeEl(l);
	        }
	    },
	    addNodeCls: function(b, a) {
	        this.addRowCls(b, a);
	    },
	    removeNodeCls: function(b, a) {
	        this.removeRowCls(b, a);
	    },
	    doUpdate: function() {
	        kitui.TreeGrid.superclass.doUpdate.apply(this, arguments);
	    },
	    setData: function(a) {
	        if (!a) {
	            a = [];
	        }
	        this._dataSource.setData(a);
	    },
	    loadList: function(c, b, d) {
	        b = b || this.getIdField();
	        d = d || this.getParentField();
	        var a = kitui.listToTree(c, this.getNodesField(), b, d);
	        this.setData(a);
	    },
	    _OnDrawNode: function(b) {
	        b.no;
	        var c = this.showCheckBox;
	        if (c && this.hasChildren(node)) {
	            c = this.showFolderCheckBox;
	        }
	        var a = this.getItemText(node);
	        var b = {
	            isLeaf: this.isLeaf(node),
	            node: node,
	            nodeHtml: a,
	            nodeCls: "",
	            nodeStyle: "",
	            showCheckBox: c,
	            iconCls: this.getNodeIcon(node),
	            showTreeIcon: this.showTreeIcon
	        };
	        this.fire("drawnode", b);
	        if (b.nodeHtml === null || b.nodeHtml === undefined || b.nodeHtml === "") {
	            b.nodeHtml = "&nbsp;";
	        }
	        return b;
	    },
	    _createDrawCellEvent: function(a, c, f, b) {
	        var d = kitui.TreeGrid.superclass._createDrawCellEvent.call(this, a, c, f, b);
	        if (this._treeColumn && this._treeColumn == c.name) {
	            d.isTreeCell = true;
	            d.node = d.record;
	            d.img = a[this.imgField];
	            d.isLeaf = this.isLeaf(d.node);
	            d.iconCls = this._getNodeIcon(a);
	            d.nodeCls = "";
	            d.nodeStyle = "";
	            d.nodeHtml = "";
	            d.showTreeIcon = this.showTreeIcon;
	            d.checkBoxType = this._checkBoxType;
	            d.showCheckBox = this.showCheckBox;
	            if (this.getOnlyLeafCheckable() && !this.isLeaf(a)) {
	                d.showCheckBox = false;
	            }
	        }
	        return d;
	    },
	    _OnDrawCell: function(a, c, f, b) {
	        var d = kitui.TreeGrid.superclass._OnDrawCell.call(this, a, c, f, b);
	        if (this._treeColumn && this._treeColumn == c.name) {
	            this.fire("drawnode", d);
	            if (d.nodeStyle) {
	                d.cellStyle = d.nodeStyle;
	            }
	            if (d.nodeCls) {
	                d.cellCls = d.nodeCls;
	            }
	            if (d.nodeHtml) {
	                d.cellHtml = d.nodeHtml;
	            }
	            this._createTreeColumn(d);
	        }
	        return d;
	    },
	    _isViewFirstNode: function(b) {
	        if (this._viewNodes) {
	            var c = this.getParentNode(b);
	            var a = this._getViewChildNodes(c);
	            return a[0] === b;
	        } else {
	            return this.isFirstNode(b);
	        }
	    },
	    _isViewLastNode: function(b) {
	        if (this._viewNodes) {
	            var c = this.getParentNode(b);
	            var a = this._getViewChildNodes(c);
	            return a[a.length - 1] === b;
	        } else {
	            return this.isLastNode(b);
	        }
	    },
	    _isInViewLastNode: function(f, h) {
	        if (this._viewNodes) {
	            var g = null;
	            var d = this.getAncestors(f);
	            for (var e = 0, c = d.length; e < c; e++) {
	                var b = d[e];
	                if (this.getLevel(b) == h) {
	                    g = b;
	                }
	            }
	            if (!g || g == this.root) {
	                return false;
	            }
	            return this._isViewLastNode(g);
	        } else {
	            return this.isInLastNode(f, h);
	        }
	    },
	    isInLastNode: function(f, h) {
	        var g = null;
	        var d = this.getAncestors(f);
	        for (var e = 0, c = d.length; e < c; e++) {
	            var b = d[e];
	            if (this.getLevel(b) == h) {
	                g = b;
	            }
	        }
	        if (!g || g == this.root) {
	            return false;
	        }
	        return this.isLastNode(g);
	    },
	    _createNodeTitle: function(e, t, i) {
	        var n = !t;
	        if (!t) {
	            t = [];
	        }
	        var s = this.isLeaf(e), o = this.getLevel(e), r = i.nodeCls;
	        if (!s) {
	            r = this.isExpandedNode(e) ? this._expandNodeCls : this._collapseNodeCls;
	        }
	        if (false === e.enabled) {
	            r += " kitui-disabled";
	        }
	        if (!s) {
	            r += " kitui-tree-parentNode";
	        }
	        var l = this.getChildNodes(e);
	        l && l.length > 0;
	        t[t.length] = '<div class="kitui-tree-nodetitle ' + r + '" >';
	        for (var a = this.getParentNode(e), h = 0, u = h; u <= o; u++) {
	            if (u == o) {
	                continue;
	            }
	            if (s) {
	                if (u > o - 1) {
	                    continue;
	                }
	            }
	            var d = "";
	            if (this._isInViewLastNode(e, u)) {
	                d = "background:none";
	            }
	            t[t.length] = '<span class="kitui-tree-indent " style="' + d + '"></span>';
	        }
	        var c = "";
	        if (this._isViewFirstNode(e) && 0 == o) {
	            c = "kitui-tree-node-ecicon-first";
	        } else {
	            if (this._isViewLastNode(e)) {
	                c = "kitui-tree-node-ecicon-last";
	            }
	        }
	        if (this._isViewFirstNode(e) && this._isViewLastNode(e)) {
	            c = "kitui-tree-node-ecicon-firstAndlast";
	            if (a == this.root) {
	                c = "kitui-tree-node-ecicon-firstLast";
	            }
	        }
	        if (!s) {
	            t[t.length] = '<a class="' + this._eciconCls + " " + c + '" style="' + (this.showExpandButtons ? "" : "display:none") + '" ' + (kitui.isChrome ? "" : 'href="javascript:void(0);"') + ' onclick="return false;" hidefocus></a>';
	        } else {
	            t[t.length] = '<span class="' + this._eciconCls + " " + c + '" style="' + (this.showExpandButtons ? "" : "display:none") + '"></span>';
	        }
	        t[t.length] = '<span class="kitui-tree-nodeshow">';
	        if (i.showTreeIcon) {
	            if (i.img) {
	                var f = this.imgPath + i.img;
	                t[t.length] = '<span class="kitui-tree-icon kitui-iconfont" style="background-image:url(' + f + ');"></span>';
	            } else {
	                t[t.length] = '<span class="' + i.iconCls + ' kitui-tree-icon kitui-iconfont"></span>';
	            }
	        }
	        if (i.showRadioButton && !i.showCheckBox) {
	            t[t.length] = '<span class="kitui-tree-radio" ></span>';
	        }
	        if (i.showCheckBox) {
	            var m = this._createCheckNodeId(e), g = this.isCheckedNode(e), p = false === i.enabled ? "disabled" : "";
	            if (false !== i.enabled) {
	                p = false === i.checkable ? "disabled" : "";
	            }
	            t[t.length] = '<span id="' + m + '" class="' + this._checkBoxCls + " " + (g ? "kitui-tree-checkbox-checked" : "") + '"></span>';
	        }
	        t[t.length] = '<span class="kitui-tree-nodetext">';
	        if (this._editingNode == e) {
	            var _ = this._id + "$edit$" + e._id, v = i.value;
	            t[t.length] = '<input id="' + _ + '" type="text" class="kitui-tree-editinput" value="' + v + '"/>';
	        } else {
	            t[t.length] = i.cellHtml;
	        }
	        t[t.length] = "</span>";
	        t[t.length] = "</span>";
	        t[t.length] = "</div>";
	        if (n) {
	            return t.join("");
	        }
	    },
	    _createTreeColumn: function(f) {
	        var d = f.record, c = f.column;
	        f.headerCls += " kitui-tree-treecolumn";
	        f.cellCls += " kitui-tree-treecell";
	        f.cellStyle += ";padding:0;vertical-align:top;";
	        var a = this.isLeaf(d);
	        f.cellHtml = this._createNodeTitle(d, null, f);
	        if (d.checked != true && !a) {
	            var b = this.getCheckState(d);
	            if (b == "indeterminate") {
	                this._renderCheckState(d);
	            }
	        }
	    },
	    _createCheckNodeId: function(a) {
	        return this._id + "$checkbox$" + a._id;
	    },
	    _renderCheckState: function(b) {
	        if (!this._renderCheckStateNodes) {
	            this._renderCheckStateNodes = [];
	        }
	        this._renderCheckStateNodes.push(b);
	        if (this._renderCheckStateTimer) {
	            return;
	        }
	        var a = this;
	        this._renderCheckStateTimer = setTimeout(function() {
	            a._renderCheckStateTimer = null;
	            var d = a._renderCheckStateNodes;
	            a._renderCheckStateNodes = null;
	            for (var e = 0, c = d.length; e < c; e++) {
	                a._doCheckNodeEl(d[e]);
	            }
	        }, 1);
	    },
	    _createNodeHTML: function(c, e, l, i, d) {
	        var h = !i;
	        if (!i) {
	            i = [];
	        }
	        var a = this._dataSource;
	        var j = a.getDataView().indexOf(c);
	        this._createRowHTML(c, j, e, l, i);
	        if (d !== false) {
	            var g = a.getChildNodes(c);
	            if (g && g.length > 0) {
	                var f = this.isExpandedNode(c);
	                if (f == true) {
	                    var b = f ? "" : "display:none";
	                    var k = this._createNodesId(c, l);
	                    i[i.length] = '<tr class="kitui-tree-nodes-tr" style="';
	                    if (kitui.isIE) {
	                        i[i.length] = b;
	                    }
	                    i[i.length] = '" ><td class="kitui-tree-nodes-td" colspan="';
	                    i[i.length] = e.length;
	                    i[i.length] = '" >';
	                    i[i.length] = '<div class="kitui-tree-nodes" id="';
	                    i[i.length] = k;
	                    i[i.length] = '" style="';
	                    i[i.length] = b;
	                    i[i.length] = '">';
	                    this._createNodesHTML(g, e, l, i);
	                    i[i.length] = "</div>";
	                    i[i.length] = "</td></tr>";
	                }
	            }
	        }
	        if (h) {
	            return i.join("");
	        }
	    },
	    _createNodesHTML: function(c, f, e, h) {
	        if (!c) {
	            return "";
	        }
	        var a = !h;
	        if (!h) {
	            h = [];
	        }
	        h.push('<table class="kitui-grid-table" cellspacing="0" cellpadding="0" border="0">');
	        h.push(this._createTopRowHTML(f));
	        if (f.length > 0) {
	            for (var d = 0, b = c.length; d < b; d++) {
	                var g = c[d];
	                this._createNodeHTML(g, f, e, h);
	            }
	        }
	        h.push("</table>");
	        if (a) {
	            return h.join("");
	        }
	    },
	    _createRowsHTML: function(e, d) {
	        if (this.isVirtualScroll()) {
	            return kitui.TreeGrid.superclass._createRowsHTML.apply(this, arguments);
	        }
	        var g = this._dataSource, f = this;
	        var h = [];
	        var c = [];
	        var b = g.getRootNode();
	        if (this._useEmptyView !== true) {
	            c = g.getChildNodes(b);
	        }
	        var a = d == 2 ? this._rowsViewEl.firstChild : this._rowsLockEl.firstChild;
	        a.id = this._createNodesId(b, d);
	        this._createNodesHTML(c, e, d, h);
	        return h.join("");
	    },
	    _createNodesId: function(b, a) {
	        var c = this._id + "$nodes" + a + "$" + b._id;
	        return c;
	    },
	    _getNodeEl: function(b, a) {
	        return this._getRowEl(b, a);
	    },
	    _getNodesEl: function(b, a) {
	        b = this.getNode(b);
	        var c = this._createNodesId(b, a);
	        return document.getElementById(c);
	    },
	    _getNodesTr: function(c, a) {
	        var b = this._getNodesEl(c, a);
	        if (b) {
	            return b.parentNode.parentNode;
	        }
	    },
	    setTreeColumn: function(a) {
	        this._treeColumn = a;
	        this.deferUpdate();
	    },
	    getTreeColumn: function() {
	        return this._treeColumn;
	    },
	    setShowTreeIcon: function(a) {
	        this.showTreeIcon = a;
	        this.deferUpdate();
	    },
	    getShowTreeIcon: function() {
	        return this.showTreeIcon;
	    },
    getShowRadioButton: function() {
        return this.showRadioButton;
    },
    setShowRadioButton: function(e) {
        this.showRadioButton = e;
        this.deferUpdate();
    },	    
	    setShowCheckBox: function(a) {
	        this.showCheckBox = a;
	        this.deferUpdate();
	    },
	    getShowCheckBox: function() {
	        return this.showCheckBox;
	    },
	    setCheckBoxType: function(a) {
	        this._checkBoxType = a;
	        this._doUpdateCheckState();
	    },
	    getCheckBoxType: function() {
	        return this._checkBoxType;
	    },
	    setIconsField: function(a) {
	        this._iconsField = a;
	    },
	    getIconsField: function() {
	        return this._iconsField;
	    },
	    _getNodeIcon: function(b) {
	        var a = b[this.iconField];
	        if (!a) {
	            if (this.isLeaf(b)) {
	                a = this.leafIconCls;
	            } else {
	                a = this.folderIconCls;
	            }
	        }
	        return a;
	    },
	    _getCheckBoxEl: function(e) {
	        if (false == this.isVisibleNode(e)) {
	            return null;
	        }
	        var t = this._id + "$checkbox$" + e._id;
	        var ck = kitui.byId(t, this.el);
	        if(!ck){
	        	if(kitui_useCrossFrame){
	        		ck = kitui._getTopWindow().kitui.byId(t, this.el);	  
	        		//ck = kitui.byId(t, this.el);
	        	}
	        }
	        return ck;
	    },	    
	    _doExpandCollapseNode: function(e) {
	        var d = new Date();
	        if (this.isVirtualScroll() == true) {
	            this.doUpdateRows();
	            this.deferLayout(50);
	            return;
	        }
	        function c() {
	            this._doUpdateTreeNodeEl(e);
	            this.deferLayout(20);
	        }
	        if (false || kitui.isIE6) {
	            c.call(this);
	        } else {
	            var a = this.isExpandedNode(e);
	            function f(n, j, m) {
	                var g = this._getNodesEl(n, j);
	                if (g) {
	                    var k = kitui.getHeight(g);
	                    g.style.overflow = "hidden";
	                    g.style.height = "0px";
	                    var i = {
	                        height: k + "px"
	                    };
	                    var l = this;
	                    l._inAniming = true;
	                    var o = jQuery(g);
	                    o.animate(i, 180, function() {
	                        g.style.height = "auto";
	                        l._inAniming = false;
	                        kitui.repaint(g);
	                    });
	                } else {}
	            }
	            function b(n, j, m) {
	                var g = this._getNodesEl(n, j);
	                if (g) {
	                    var k = kitui.getHeight(g);
	                    var i = {
	                        height: 0 + "px"
	                    };
	                    var l = this;
	                    l._inAniming = true;
	                    var o = jQuery(g);
	                    o.animate(i, 180, function() {
	                        g.style.height = "auto";
	                        l._inAniming = false;
	                        if (m) {
	                            m.call(l);
	                        }
	                        kitui.repaint(g);
	                    });
	                } else {
	                    if (m) {
	                        m.call(this);
	                    }
	                }
	            }
	            if (a) {
	                c.call(this);
	                f.call(this, e, 2);
	                f.call(this, e, 1);
	            } else {
	                b.call(this, e, 2, c);
	                b.call(this, e, 1);
	            }
	        }
	    },
	    __OnTreeCollapse: function(a) {
	        this._doExpandCollapseNode(a.node);
	    },
	    __OnTreeExpand: function(a) {
	        this._doExpandCollapseNode(a.node);
	    },
	    _doCheckNodeEl: function(e) {
	        var t = this._getCheckBoxEl(e);
	        if (t) {
	            var i = this.getCheckModel();
	            kitui.removeClass(t, "kitui-tree-checkbox-indeterminate");
	            var n = e.indeterminate && !e.checked;
	            if ("cascade" == i || n) {
	                var s = n ? "indeterminate" : this.getCheckState(e);
	                if ("indeterminate" == s) {
	                    kitui.addClass(t, "kitui-tree-checkbox-indeterminate");
	                } else {
	                    kitui.removeClass(t, "kitui-tree-checkbox-indeterminate");
	                }
	            }
	            if (e.checked) {
	                kitui.addClass(t, "kitui-tree-checkbox-checked");
	            } else {
	                kitui.removeClass(t, "kitui-tree-checkbox-checked");
	            }
	        }
	    },
	    __OnCheckChanged: function(f) {
	        for (var b = 0, a = f._nodes.length; b < a; b++) {
	            var d = f._nodes[b];
	            this._doCheckNodeEl(d);
	        }
	        if (this._checkChangedTimer) {
	            clearTimeout(this._checkChangedTimer);
	            this._checkChangedTimer = null;
	        }
	        var c = this;
	        this._checkChangedTimer = setTimeout(function() {
	            c._checkChangedTimer = null;
	            c.fire("checkchanged");
	        }, 1);
	    },
	    _tryToggleCheckNode: function(c) {
	        var a = this.getCheckable(c);
	        if (a == false) {
	            return;
	        }
	        var b = this.isCheckedNode(c);
	        var d = {
	            node: c,
	            cancel: false,
	            checked: b
	        };
	        this.fire("beforenodecheck", d);
	        if (d.cancel) {
	            return;
	        }
	        this._dataSource.doCheckNodes(c, !b, true);
	        this.fire("nodecheck", d);
	    },
	    _tryToggleNode: function(a) {
	        var c = this.isExpandedNode(a);
	        var b = {
	            node: a,
	            cancel: false
	        };
	        if (c) {
	            this.fire("beforecollapse", b);
	            if (b.cancel == true) {
	                return;
	            }
	            this.collapseNode(a);
	            this.fire("collapse", b);
	        } else {
	            this.fire("beforeexpand", b);
	            if (b.cancel == true) {
	                return;
	            }
	            this.expandNode(a);
	            this.fire("expand", b);
	        }
	    },
	    _OnCellMouseDown: function(a) {
	        if (kitui.findParent(a.htmlEvent.target, this._eciconCls)) {} else {
	            if (kitui.findParent(a.htmlEvent.target, "kitui-tree-checkbox")) {} else {
	                this.fire("cellmousedown", a);
	            }
	        }
	    },
	    _OnCellClick: function(a) {
	        if (kitui.findParent(a.htmlEvent.target, "kitui-tree-checkbox")) {
	            this._tryToggleCheckNode(a.record);
	        } else {
	            this.fire("cellclick", a);
	        }
	    },
	    __OnNodeDblClick: function(a) {},
	    __OnNodeClick: function(a) {},
	    setIconField: function(a) {
	        this.iconField = a;
	    },
	    getIconField: function() {
	        return this.iconField;
	    },
	    setAllowSelect: function(a) {
	        this.setAllowRowSelect(a);
	    },
	    getAllowSelect: function() {
	        return this.getAllowRowSelect();
	    },
	    setShowExpandButtons: function(a) {
	        if (this.showExpandButtons != a) {
	            this.showExpandButtons = a;
	            this.doUpdate();
	        }
	    },
	    getShowExpandButtons: function() {
	        return this.showExpandButtons;
	    },
	    setShowTreeLines: function(a) {
	        this.showTreeLines = a;
	        if (a == true) {
	            kitui.addClass(this.el, "kitui-tree-treeLine");
	        } else {
	            kitui.removeClass(this.el, "kitui-tree-treeLine");
	        }
	    },
	    getShowTreeLines: function() {
	        return this.showTreeLines;
	    },
	    setShowArrow: function(a) {
	        this.showArrow = a;
	        if (a == true) {
	            kitui.addClass(this.el, "kitui-tree-showArrow");
	        } else {
	            kitui.removeClass(this.el, "kitui-tree-showArrow");
	        }
	    },
	    getShowArrow: function() {
	        return this.showArrow;
	    },
	    setLeafIcon: function(a) {
	        this.leafIcon = a;
	    },
	    getLeafIcon: function() {
	        return this.leafIcon;
	    },
	    setFolderIcon: function(a) {
	        this.folderIcon = a;
	    },
	    getFolderIcon: function() {
	        return this.folderIcon;
	    },
	    getExpandOnDblClick: function() {
	        return this.expandOnDblClick;
	    },
	    setExpandOnNodeClick: function(a) {
	        this.expandOnNodeClick = a;
	        if (a) {
	            kitui.addClass(this.el, "kitui-tree-nodeclick");
	        } else {
	            kitui.removeClass(this.el, "kitui-tree-nodeclick");
	        }
	    },
	    getExpandOnNodeClick: function() {
	        return this.expandOnNodeClick;
	    },
	    setLoadOnExpand: function(a) {
	        this.loadOnExpand = a;
	    },
	    getLoadOnExpand: function() {
	        return this.loadOnExpand;
	    },
	    getAttrs: function(c) {
	        var i = kitui.TreeGrid.superclass.getAttrs.call(this, c);
	        //kitui._ParseString(c, i, [ "value", "url", "idField", "textField", "iconField", "nodesField", "parentField", "valueField", "leafIcon", "folderIcon", "ondrawnode", "onbeforenodeselect", "onnodeselect", "onnodemousedown", "onnodeclick", "onnodedblclick", "onbeforenodecheck", "onnodecheck", "onbeforeexpand", "onexpand", "onbeforecollapse", "oncollapse", "dragGroupName", "dropGroupName", "onendedit", "expandOnLoad", "onbeforedrop", "ondrop", "ongivefeedback", "treeColumn" ]);
	        //kitui._ParseBool(c, i, [ "allowSelect", "showCheckBox", "showExpandButtons", "showTreeIcon", "showTreeLines", "checkRecursive", "enableHotTrack", "showFolderCheckBox", "resultAsTree", "allowDrag", "allowDrop", "showArrow", "expandOnDblClick", "removeOnCollapse", "autoCheckParent", "loadOnExpand", "expandOnNodeClick" ]);
	        if (i.expandOnLoad) {
	            var a = parseInt(i.expandOnLoad);
	            if (kitui.isNumber(a)) {
	                i.expandOnLoad = a;
	            } else {
	                i.expandOnLoad = i.expandOnLoad == "true" ? true : false;
	            }
	        }
	       
	        var b = i.idField || this.getIdField();
	        var e = i.textField ;
	        var d = i.iconField || this.getIconField();
	      
	        var h = i.nodesField ;
	        function g(j) {
	            var r = [];
	            for (var s = 0, q = j.length; s < q; s++) {
	                var n = j[s];
	                var t = kitui.getChildNodes(n);
	                var u = t[0];
	                var z = t[1];
	                if (!u || !z) {
	                    u = n;
	                }
	                var x = jQuery(u);
	                var m = {};
	                var k = m[b] = u.getAttribute("value");
	                m[d] = x.attr("iconCls");
	                m[e] = u.innerHTML;
	                r.add(m);
	                var w = x.attr("expanded");
	                if (w) {
	                    m.expanded = w == "false" ? false : true;
	                }
	                var p = x.attr("allowSelect");
	                if (p) {
	                    m.allowSelect = p == "false" ? false : true;
	                }
	                if (!z) {
	                    continue;
	                }
	                var v = kitui.getChildNodes(z);
	                var y = g(v);
	                if (y.length > 0) {
	                    m[h] = y;
	                }
	            }
	            return r;
	        }
	        var f = g(kitui.getChildNodes(c));
	        if (f.length > 0) {
	            i.data = f;
	        }
	        if (!i.idField && i.valueField) {
	            i.idField = i.valueField;
	        }
	        return i;
	    }
	});

	kitui.regClass(kitui.TreeGrid, "TreeGrid");


})(jQuery);
///<jscompress sourcefile="jquery.tree.js" />
(function($) {
	
	
	
	
kitui.Tree = function() {
    kitui.Tree.superclass.constructor.call(this);
   
    var columns = [ {
        name: "node",
        header: "",
        field: this.getTextField(),
        width: "auto",
        allowDrag: true,
        editor: {
            type: "textbox"
        }
    } ];
    this._columnModel.setColumns(columns);
    this._column = this._columnModel.getColumn("node");
    kitui.removeClass(this.el, "kitui-treegrid");
    kitui.addClass(this.el, "kitui-tree-nowrap");
    this.setBorderStyle("border:0");
};

kitui.extend(kitui.Tree, kitui.TreeGrid, {
    setTextField: function(a) {
        this._dataSource.setTextField(a);
        this._columnModel.updateColumn("node", {
            field: a
        });
    },
    uiCls: "kitui-tree",
    _rowHoverCls: "kitui-tree-node-hover",
    _rowSelectedCls: "kitui-tree-selectedNode",
    _getRecordByEvent: function(a, c) {
        var b = kitui.Tree.superclass._getRecordByEvent.call(this, a);
        if (c === false) {
            return b;
        }
        if (b && kitui.findParent(a.target, "kitui-tree-nodeshow")) {
            return b;
        }
        return null;
    },
    _treeColumn: "node",
    defaultRowHeight: 21,
    showHeader: false,
    showTopbar: false,
    showFooter: false,
    showColumns: false,
    showHGridLines: false,
    showVGridLines: false,
    showTreeLines: true,
    setTreeColumn: null,
    setColumns: null,
    getColumns: null,
    frozen: null,
    unFrozen: null,
    textField:"text",
    showAllNode:false,
    setShowAllNode:function(a){
	     this._dataSource.setShowAllNode(a);
    },
    setNodeText: function(a, b) {
        a = this.getNode(a);
        if (!a) {
            return;
        }
        a[this.getTextField()] = b;
        this._doUpdateNodeTitle(a);
    },
    setNodeIconCls: function(b, a) {
        b = this.getNode(b);
        if (!b) {
            return;
        }
        b[this.iconField] = a;
        this._doUpdateNodeTitle(b);
    },
    _OnCellMouseDown: function(a) {
        if (this._editInput) {
            this._editInput.blur();
        }
        this.fire("cellmousedown", a);
    },
    isEditingNode: function(a) {
        return this._editingNode == a;
    },
    beginEdit: function(a) {
        a = this.getNode(a);
        if (!a) {
            return;
        }
        this._editingNode = a;
        this._doUpdateNodeTitle(a);
        var b = this._id + "$edit$" + a._id;
        this._editInput = document.getElementById(b);
        this._editInput.focus();
        kitui.selectRange(this._editInput, 0, 1e3);
        kitui.on(this._editInput, "keydown", this.__OnEditInputKeyDown, this);
        kitui.on(this._editInput, "blur", this.__OnEditInputBlur, this);
    },
    cancelEdit: function() {
        var a = this._editingNode;
        this._editingNode = null;
        if (a) {
            this._doUpdateNodeTitle(a);
            kitui.un(this._editInput, "keydown", this.__OnEditInputKeyDown, this);
            kitui.un(this._editInput, "blur", this.__OnEditInputBlur, this);
        }
        this._editInput = null;
    },
    __OnEditInputKeyDown: function(b) {
        if (b.keyCode == 13) {
            var a = this._editingNode;
            var c = this._editInput.value;
            this.setNodeText(a, c);
            this.cancelEdit();
            this.fire("endedit", {
                node: a,
                text: c
            });
        } else {
            if (b.keyCode == 27) {
                this.cancelEdit();
            }
        }
    },
    __OnEditInputBlur: function(b) {
        var a = this._editingNode;
        if (a) {
            var c = this._editInput.value;
            this.cancelEdit();
            this.setNodeText(a, c);
            this.fire("endedit", {
                node: a,
                text: c
            });
        }
    },
    addRowCls: function(d, a) {
        var c = this._getRowEl(d, 1);
        var b = this._getRowEl(d, 2);
        if (c) {
            kitui.addClass(c.firstChild, a);
        }
        if (b) {
            kitui.addClass(b.firstChild, a);
        }
    },
    removeRowCls: function(d, a) {
        var c = this._getRowEl(d, 1);
        var b = this._getRowEl(d, 2);
        if (c) {
            kitui.removeClass(c.firstChild, a);
        }
        if (b) {
        	kitui.removeClass(b, a);
            kitui.removeClass(b.firstChild, a);
        }
    }/*,
    setTextField:function(a){
    	alert(a)
    	 this.textField = a;
    	
    },
    getTextField:function(){
    	
    	return this.textField;
    	
    }*/
});

kitui.regClass(kitui.Tree, "Tree");

kitui._Tree_Expander = function(a) {
    this.owner = a;
    kitui.on(a.el, "click", this.__OnClick, this);
    kitui.on(a.el, "dblclick", this.__OnDblClick, this);
};

kitui._Tree_Expander.prototype = {
    _canToggle: function() {
        return !this.owner._dataSource._isNodeLoading();
    },
    __OnClick: function(d) {
        var a = this.owner;
        var c = a._getRecordByEvent(d, false);
        if (!c) {
            return;
        }
        var b = a.isLeaf(c);
        if (kitui.findParent(d.target, a._eciconCls)) {
            if (this._canToggle() == false) {
                return;
            }
            a._tryToggleNode(c);
        } else {
            if (a.expandOnNodeClick && !b && !a._inAniming) {
                if (this._canToggle() == false) {
                    return;
                }
                a._tryToggleNode(c);
            }
        }
    },
    __OnDblClick: function(d) {
        var a = this.owner;
        var c = a._getRecordByEvent(d, false);
        if (!c) {
            return;
        }
        var b = a.isLeaf(c);
        if (a._inAniming) {
            return;
        }
        if (kitui.findParent(d.target, a._eciconCls)) {
            return;
        }
        if (a.expandOnNodeClick) {
            return;
        }
        if (a.expandOnDblClick && !b) {
            if (this._canToggle() == false) {
                return;
            }
            a._tryToggleNode(c);
        }
    }
};

kitui._Tree_AsyncLoader = function(a) {
    this.owner = a;
    a.on("beforeexpand", this.__OnBeforeNodeExpand, this);
};

kitui._Tree_AsyncLoader.prototype = {
    __OnBeforeNodeExpand: function(f) {
        var a = this.owner;
        var d = f.node;
        var b = a.isLeaf(d);
        var c = d[a.getNodesField()];
        if (!b && (!c || c.length == 0)) {
            if (a.loadOnExpand && d.asyncLoad !== false) {
                f.cancel = true;
                a.loadNode(d);
            }
        }
    }
};


})(jQuery);
///<jscompress sourcefile="jquery.treeselect.js" />
(function($) {
	kitui.TreeSelect = function() {
	    this.data = [];
	    kitui.TreeSelect.superclass.constructor.call(this);
	};

	kitui.extend(kitui.TreeSelect, kitui.PopupEdit, {
	    valueFromSelect: false,
	    text: "",
	    value: "",
	    autoCheckParent: false,
	    expandOnLoad: false,
	    valueField: "id",
	    textField: "text",
	    nodesField: "children",
	    dataField: "",
	    delimiter: ",",
	    multiSelect: false,
	    data: [],
	    url: "",
	    allowInput: false,
	    showTreeIcon: false,
	    showTreeLines: true,
	    resultAsTree: false,
	    parentField: "pid",
	    checkRecursive: false,
	    showFolderCheckBox: false,
	    popupHeight: 200,
	    popupWidth: "100%",
	    popupMaxHeight: 250,
	    popupMinWidth: 100,
	    loadParams:{},
	    showAllNode:false,  
	    set: function(d) {
	        if (typeof d == "string") {
	            return this;
	        }
	        var c = d.value;
	        delete d.value;
	        var e = d.text;
	        delete d.text;
	        var a = d.url;
	        delete d.url;
	        var b = d.data;
	        delete d.data;
	        kitui.TreeSelect.superclass.set.call(this, d);
	        if (!kitui.isNull(b)) {
	            this.setData(b);
	        }
	        if (!kitui.isNull(a)) {
	            this.setUrl(a);
	        }
	        if (!kitui.isNull(c)) {
	            this.setValue(c);
	        }
	        if (!kitui.isNull(e)) {
	            this.setText(e);
	        }
	        return this;
	    },
	    uiCls: "kitui-treeselect",
	    setLoadDataset:function(a){
	    	this.tree.setLoadDataset(a);
	    },
	    _createPopup: function() {
	        kitui.TreeSelect.superclass._createPopup.call(this);
	        this.tree = new kitui.Tree();
	        this.tree.setShowTreeIcon(true);
	        this.tree.setStyle("border:0;width:100%;height:100%;overflow:hidden;");
	        this.tree.setResultAsTree(this.resultAsTree);
	        this.tree.render(this.popup._contentEl);
	        this.tree.setCheckRecursive(this.checkRecursive);
	        this.tree.setShowFolderCheckBox(this.showFolderCheckBox);
	        this.tree.on("nodeclick", this.__OnNodeClick, this);
	        this.tree.on("nodecheck", this.__OnCheckedChanged, this);
	        this.tree.on("expand", this.__OnTreeExpand, this);
	        this.tree.on("collapse", this.__OnTreeCollapse, this);
	        this.tree.on("beforenodecheck", this.__OnTreeBeforeNodeCheck, this);
	        this.tree.on("beforenodeselect", this.__OnTreeBeforeNodeSelect, this);
	        this.tree.allowAnim = false;
	        var a = this;
	        this.tree.on("beforeload", function(b) {
	            a.fire("beforeload", b);
	        }, this);
	        this.tree.on("load", function(b) {
	            a.fire("load", b);
	        }, this);
	        this.tree.on("loaderror", function(b) {
	            a.fire("loaderror", b);
	        }, this);
	    },
	    __OnTreeBeforeNodeCheck: function(a) {
	        a.tree = a.sender;
	        this.fire("beforenodecheck", a);
	    },
	    __OnTreeBeforeNodeSelect: function(a) {
	        a.tree = a.sender;
	        this.fire("beforenodeselect", a);
	        if (a.cancel) {
	            this._nohide = true;
	        }	        
	    },
	    __OnTreeExpand: function(a) {},
	    __OnTreeCollapse: function(a) {},
	    setShowAllNode:function(a){
		     this.tree.setShowAllNode(a);
	    },	  	    
	    getSelectedNode: function() {
	        return this.tree.getSelectedNode();
	    },
	    getCheckedNodes: function(a) {
	        return this.tree.getCheckedNodes(a);
	    },
	    getSelectedNodes: function() {
	        return this.tree.getSelectedNodes();
	    },
	    getParentNode: function(a) {
	        return this.tree.getParentNode(a);
	    },
	    getChildNodes: function(a) {
	        return this.tree.getChildNodes(a);
	    },
	    setLoadParams:function(loadparams){
	    	this.tree.setLoadParams(loadparams);
	    },
	    getLoadParams:function(loadparams){
	    	return this.tree.loadparams;
	    },	    
	    showPopup: function() {
	        var a = {
	            cancel: false
	        };
	        this.fire("beforeshowpopup", a);
	        if (a.cancel == true) {
	            return;
	        }
	        var b = this.popup.el.style.height;
	        kitui.TreeSelect.superclass.showPopup.call(this);
	        this.tree.setValue(this.value);
	        
	        this._nohide = false;
	    },
	    __OnPopupHide: function(a) {
	        this.tree.clearFilter();
	        this.fire("hidepopup");
	    },
	    getItem: function(a) {
	        return typeof a == "object" ? a : this.data[a];
	    },
	    indexOf: function(a) {
	        return this.data.indexOf(a);
	    },
	    getAt: function(a) {
	        return this.data[a];
	    },
	    loadList: function(b, a, c) {
	        this.tree.loadList(b, a, c);
	        this.data = this.tree.getData();
	    },
	    getList: function() {
	        return this.tree.getList();
	    },
	    load: function(a) {
	        this.tree.load(a);
	    },
	    setData: function(a) {
	        this.tree.setData(a);
	        this.data = this.tree.data;
	    },
	    getData: function() {
	        return this.data;
	    },
	    setUrl: function(a) {
	        this.getPopup();
	        this.tree.setUrl(a);
	        this.url = this.tree.url;
	    },
	    getUrl: function() {
	        return this.url;
	    },
	    setTextField: function(a) {
	        if (this.tree) {
	            this.tree.setTextField(a);
	        }
	        this.textField = a;
	    },
	    getTextField: function() {
	        return this.textField;
	    },
	    setNodesField: function(a) {
	        if (this.tree) {
	            this.tree.setNodesField(a);
	        }
	        this.nodesField = a;
	    },
	    getNodesField: function() {
	        return this.nodesField;
	    },
	    setDataField: function(a) {
	        if (this.tree) {
	            this.tree.setDataField(a);
	        }
	        this.dataField = a;
	    },
	    getDataField: function() {
	        return this.dataField;
	    },
	    setValue: function(b) {
	    	b = String(b);
	        var a = this.tree.getValueAndText(b);
			if(!a[0]&&!a[1]){
					this.value = a[0];
					this._valueEl.value = a[0];
					this.text = this._textEl.value = a[1];
					this.on("load",function(){
						var _v = this.tree.getValueAndText(b);
						this.value = b;
						this._valueEl.value = this.value;
			            this.text = this._textEl.value = _v[1];
			            this._doEmpty();	
			            this.tree.setValue(this.value);		
					});
			}else{
					if (a[1] == "" && !this.valueFromSelect) {
			            a[0] = b;
				        a[1] = b;
			        }
			        this.value = b;
			        this._valueEl.value = b;
			        this.text = this._textEl.value = a[1];
			        this._doEmpty();
			        this.tree.setValue(this.value);
			}	        
	    },
	    setValue1: function(e) {
	    	e = String(e);
	        var t = this.tree.getValueAndText(e);
	        if ("" == t[1] && !this.valueFromSelect) {
	            t[0] = e;
	            t[1] = e;
	        }
	        this.value = e;
	        this._valueEl.value = e;
	        this.text = this._textEl.value = t[1];
	        this._doEmpty();
	    },	    
	    setMultiSelect: function(a) {
	        if (this.multiSelect != a) {
	            this.multiSelect = a;
	            this.tree.setShowCheckBox(a);
	            this.tree.setAllowSelect(!a);
	            this.tree.setEnableHotTrack(!a);
	        }
	    },
	    getMultiSelect: function() {
	        return this.multiSelect;
	    },
	    __OnNodeClick: function(f) {
	        if (this.multiSelect) {
	            return;
	        }
	        var b = this.tree.getSelectedNode();
	        var d = this.tree.getValueAndText(b);
	        var a = d[0];
	        var c = this.getValue();
	        this.setValue(a);
	        if (c != this.getValue()) {
	            this._OnValueChanged();
	        }
	        if (true !== this._nohide) {
	            this.hidePopup();
	            this.focus();
	        }
			this._nohide = false;
	        this.fire("nodeclick", {
	            node: f.node
	        });
	    },
	    __OnCheckedChanged: function(c) {
	        if (!this.multiSelect) {
	            return;
	        }
	        var a = this.tree.getValue();
	        var b = this.getValue();
	        this.setValue(a);
	        if (b != this.getValue()) {
	            this._OnValueChanged();
	        }
	    },
	    __OnInputKeyDown: function(b) {
	        this.fire("keydown", {
	            htmlEvent: b
	        });
	        if (b.keyCode == 8 && (this.isReadOnly() || this.allowInput == false)) {
	            return false;
	        }
	        if (b.keyCode == 9) {
	            if (this.isShowPopup()) {
	                this.hidePopup();
	            }
	            return;
	        }
	        if (this.isReadOnly()) {
	            return;
	        }
	        switch (b.keyCode) {
	          case 27:
	            if (this.isShowPopup()) {
	                b.stopPropagation();
	            }
	            this.hidePopup();
	            break;

	          case 13:
	            break;

	          case 37:
	            break;

	          case 38:
	            b.preventDefault();
	            break;

	          case 39:
	            break;

	          case 40:
	            b.preventDefault();
	            this.showPopup();
	            break;

	          default:
	            var a = this;
	            setTimeout(function() {
	                a._doQuery();
	            }, 10);
	            break;
	        }
	    },
	    _doQuery: function() {
	        var b = this.textField;
	        var a = this._textEl.value.toLowerCase();
	        this.tree.filter(function(c) {
	            var d = String(c[b] ? c[b] : "").toLowerCase();
	            if (d.indexOf(a) != -1) {
	                return true;
	            } else {
	                return false;
	            }
	        });
	        this.tree.expandAll();
	        this.showPopup();
	    },
	    setCheckRecursive: function(a) {
	        this.checkRecursive = a;
	        if (this.tree) {
	            this.tree.setCheckRecursive(a);
	        }
	    },
	    getCheckRecursive: function() {
	        return this.checkRecursive;
	    },
	    setResultAsTree: function(a) {
	        this.resultAsTree = a;
	        if (this.tree) {
	            this.tree.setResultAsTree(a);
	        }
	    },
	    getResultAsTree: function() {
	        return this.resultAsTree;
	    },
	    setParentField: function(a) {
	        this.parentField = a;
	        if (this.tree) {
	            this.tree.setParentField(a);
	        }
	    },
	    getParentField: function() {
	        return this.parentField;
	    },
	    setValueField: function(a) {
	        if (this.tree) {
	            this.tree.setIdField(a);
	        }
	        this.valueField = a;
	    },
	    getValueField: function() {
	        return this.valueField;
	    },
	    setShowTreeIcon: function(a) {
	        this.showTreeIcon = a;
	        if (this.tree) {
	            this.tree.setShowTreeIcon(a);
	        }
	    },
	    getShowTreeIcon: function() {
	        return this.showTreeIcon;
	    },
	    setShowTreeLines: function(a) {
	        this.showTreeLines = a;
	        if (this.tree) {
	            this.tree.setShowTreeLines(a);
	        }
	    },
	    getShowTreeLines: function() {
	        return this.showTreeLines;
	    },
	    setShowFolderCheckBox: function(a) {
	        this.showFolderCheckBox = a;
	        if (this.tree) {
	            this.tree.setShowFolderCheckBox(a);
	        }
	    },
	    getShowFolderCheckBox: function() {
	        return this.showFolderCheckBox;
	    },
	    setAutoCheckParent: function(a) {
	        this.autoCheckParent = a;
	        if (this.tree) {
	            this.tree.setAutoCheckParent(a);
	        }
	    },
	    getAutoCheckParent: function() {
	        return this.autoCheckParent;
	    },
	    setExpandOnLoad: function(a) {
	        this.expandOnLoad = a;
	        if (this.tree) {
	            this.tree.setExpandOnLoad(a);
	        }
	    },
	    getExpandOnLoad: function() {
	        return this.expandOnLoad;
	    },
	    setValueFromSelect: function(a) {
	        this.valueFromSelect = a;
	    },
	    getValueFromSelect: function() {
	        return this.valueFromSelect;
	    },
	    setAjaxData: function(a) {
	        this.ajaxData = a;
	        this.tree.setAjaxData(a);
	    },
	    getAttrs: function(b) {
	        var a = kitui.ComboBox.superclass.getAttrs.call(this, b);
	        //kitui._ParseString(b, a, [ "url", "data", "textField", "valueField", "nodesField", "parentField", "onbeforenodecheck", "onbeforenodeselect", "expandOnLoad", "onnodeclick", "onbeforeload", "onload", "onloaderror" ]);
	        //kitui._ParseBool(b, a, [ "multiSelect", "resultAsTree", "checkRecursive", "showTreeIcon", "showTreeLines", "showFolderCheckBox", "autoCheckParent", "valueFromSelect" ]);
	        if (a.expandOnLoad) {
	            var c = parseInt(a.expandOnLoad);
	            if (kitui.isNumber(c)) {
	                a.expandOnLoad = c;
	            } else {
	                a.expandOnLoad = a.expandOnLoad == "true" ? true : false;
	            }
	        }
	        return a;
	    }
	});

	kitui.regClass(kitui.TreeSelect, "TreeSelect");
})(jQuery);
///<jscompress sourcefile="jquery.fit.js" />
(function($) {
kitui.Fit = function() {
    kitui.Fit.superclass.constructor.call(this);
};

kitui.extend(kitui.Fit, kitui.Container, {
    style: "",
    _clearBorder: false,
    uiCls: "kitui-fit",
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "kitui-fit";
        this._bodyEl = this.el;
    },
    overflow:"hidden",
    _initEvents: function() {},
    isFixedSize: function() {
        return false;
    },
    doLayout: function() {
        if (!this.canLayout()) {
            return;
        }
        var k = this.el.parentNode;
        var p = kitui.getChildNodes(k);
        if (k == document.body) {
            this.el.style.height = "0px";
        }
        var q = kitui.getHeight(k, true);
        for (var g = 0, c = p.length; g < c; g++) {
            var b = p[g];
            var a = b.tagName ? b.tagName.toLowerCase() : "";
            if (b == this.el || a == "style" || a == "script") {
                continue;
            }
            var n = kitui.getStyle(b, "position");
            if (n == "absolute" || n == "fixed") {
                continue;
            }
            var j = kitui.getHeight(b);
            var f = kitui.getMargins(b);
            q = q - j - f.top - f.bottom;
        }
        var d = kitui.getBorders(this.el);
        var o = kitui.getPaddings(this.el);
        var f = kitui.getMargins(this.el);
        q = q - f.top - f.bottom;
        if (jQuery.boxModel) {
            q = q - o.top - o.bottom - d.top - d.bottom;
        }
        if (q < 0) {
            q = 0;
        }
		this.el.style.height = q + "px";
        if(this.overflow!="hidden"){
        	 if($(k).closest("table").height()>$(k).closest("body").height()){
        	 	this.el.style.height=($(k).closest("body").height()-$(k.parentNode).prev().height()-$(k.parentNode).next().height())+"px"
        	 }else{
        	 	this.el.style.height=kitui.getHeight(this.el.parentNode, true)
        	 }
        	 this.el.style.overflow=this.overflow
        }
        try {
            p = kitui.getChildNodes(this.el);
            for (var g = 0, c = p.length; g < c; g++) {
                var b = p[g];
                kitui.layout(b);
            }
        } catch (m) {}
    },
    setOverflow:function(b){
    	this.overflow=b
    },
    set_bodyParent: function(b) {
        if (!b) {
            return;
        }
        var a = this._bodyEl;
        var d = b;
        while (d.firstChild) {
            try {
                a.appendChild(d.firstChild);
            } catch (c) {}
        }
        this.doLayout();
    },
    getAttrs: function(b) {
        var a = kitui.Fit.superclass.getAttrs.call(this, b);
        a._bodyParent = b;
        return a;
    }
});

kitui.regClass(kitui.Fit, "fit");

})(jQuery);
///<jscompress sourcefile="jquery.radiobox.js" />
(function($) {
	kitui.RadioBox = function() {
	    kitui.RadioBox.superclass.constructor.call(this);
	};

	kitui.extend(kitui.RadioBox, kitui.CheckBox, {
	    uiCls: "kitui-radiobox",
	    _checkType: "radio"
	    
	});

	kitui.regClass(kitui.RadioBox, "radiobox");

})(jQuery);
///<jscompress sourcefile="jquery.radiobuttonlist.js" />
(function($) {
	kitui.RadioButtonList = function() {
	    kitui.RadioButtonList.superclass.constructor.call(this);
	};

	kitui.extend(kitui.RadioButtonList, kitui.CheckBoxList, {
	    multiSelect: false,
	    _itemCls: "kitui-radiobuttonlist-item",
	    _itemHoverCls: "kitui-radiobuttonlist-item-hover",
	    _itemSelectedCls: "kitui-radiobuttonlist-item-selected",
	    _tableCls: "kitui-radiobuttonlist-table",
	    _tdCls: "kitui-radiobuttonlist-td",
	    _checkType: "radio",
	    uiCls: "kitui-radiobuttonlist"
	});

	kitui.regClass(kitui.RadioButtonList, "radiobuttonlist");

})(jQuery);
///<jscompress sourcefile="jquery.layout.js" />
(function($) {
kitui.Layout = function() {
    this.regions = [];
    this.regionMap = {};
    kitui.Layout.superclass.constructor.apply(this, arguments);
};

kitui.extend(kitui.Layout, kitui.Control, {
    floatable: true,
    regions: [],
    splitSize: 5,
    collapseWidth: 28,
    collapseHeight: 25,
    regionWidth: 150,
    regionHeight: 80,
    regionMinWidth: 50,
    regionMinHeight: 25,
    regionMaxWidth: 2e3,
    regionMaxHeight: 2e3,
    splitToolTip: "",
    uiCls: "kitui-layout",
    hoverProxyEl: null
});

kitui.copyTo(kitui.Layout.prototype, {
    onButtonMouseDown: function(e, t) {
        this.on("buttonmousedown", e, t);
    },
    onButtonClick: function(e, t) {
        this.on("buttonclick", e, t);
    },
    __OnMouseOut: function() {
        if (this.hoverProxyEl) {
            kitui.removeClass(this.hoverProxyEl, "kitui-layout-proxy-hover");
        }
        this.hoverProxyEl = null;
    },
    __OnMouseOver: function(e) {
        var t = this._getProxyElByEvent(e);
        if (t) {
            kitui.addClass(t, "kitui-layout-proxy-hover");
            this.hoverProxyEl = t;
        }
    },
    _OnButtonMouseDown: function(e, t, i) {
        this.fire("buttonmousedown", {
            htmlEvent: i,
            region: e,
            button: t,
            index: this.buttons.indexOf(t),
            name: t.name
        });
    },
    _OnButtonClick: function(e, t, i) {
        this.fire("buttonclick", {
            htmlEvent: i,
            region: e,
            button: t,
            index: this.buttons.indexOf(t),
            name: t.name
        });
    },
    __onClick: function(e) {
        if (this._inAniming) {
            return;
        }
        var t = this._getProxyElByEvent(e);
        if (t) {
            var i = t.id, n = kitui.findParent(e.target, "kitui-tools-collapse");
            if (n) {
                this._tryToggleRegion(i);
            } else {
                this._VirtualToggle(i);
            }
        }
        var s = this._getRegionElByEvent(e);
        if (s && kitui.findParent(e.target, "kitui-layout-region-header")) {
            i = s.id, n = kitui.findParent(e.target, "kitui-tools-collapse");
            if (n) {
                this._tryToggleRegion(i);
            }
            var o = kitui.findParent(e.target, "kitui-tools-close");
            if (o) {
                this.updateRegion(i, {
                    visible: false
                });
            }
        }
        if (kitui.hasClass(e.target, "kitui-layout-spliticon")) {
            i = e.target.parentNode.id;
            this._tryToggleRegion(i);
        }
    },
    __onmoveClick: function(e) {
    	if (this._inAniming) {
            return;
        }
        var t = this._getProxyElByEvent(e);
        if (t) {
        	
            var i = t.id, n = kitui.findParent(e.target, "kitui-tools-collapse");
            if (n) {
             
            } else {
               // this._VirtualToggle(i);
                if (!this.floatable) {
                    return;
                }
                
                i = this.getRegion(i);
                if (true === i._Expanded) {
                    
                } else {
                    this._VirtualExpand(i);
                }
            	
            }
        }
      
      
    },
    _getRegionElByEvent: function(e) {
        var t = kitui.findParent(e.target, "kitui-layout-region");
        return t;
    },
    _getProxyElByEvent: function(e) {
        var t = kitui.findParent(e.target, "kitui-layout-proxy");
        return t;
    },
    _tryToggleRegion: function(e) {
        e = this.getRegion(e);
        var t = {
            region: e,
            cancel: false
        };
        if (e.expanded) {
            this.fire("BeforeCollapse", t);
            if (false == t.cancel) {
                this.collapseRegion(e);
            }
        } else {
            this.fire("BeforeExpand", t);
            if (false == t.cancel) {
                this.expandRegion(e);
            }
        }
    },
    isVisibleRegion: function(e) {
        e = this.getRegion(e);
        if (!e) {
            return null;
        }
        return e.visible;
    },
    isExpandRegion: function(e) {
        e = this.getRegion(e);
        if (!e) {
            return null;
        }
        return e.expanded;
    },
    hideRegion: function(e) {
        e = this.getRegion(e);
        if (!e) {
            return;
        }
        e.visible = false;
        this.doUpdate();
    },
    showRegion: function(e) {
        e = this.getRegion(e);
        if (!e) {
            return;
        }
        e.visible = true;
        this.doUpdate();
    },
    toggleRegion: function(e) {
        e = this.getRegion(e);
        if (!e) {
            return;
        }
        if (e.expanded) {
            this.collapseRegion(e);
        } else {
            this.expandRegion(e);
        }
    },
    collapseRegion: function(e) {
        e = this.getRegion(e);
        if (!e) {
            return;
        }
        e.expanded = false;
        this.doUpdate();
    },
    expandRegion: function(e) {
        e = this.getRegion(e);
        if (!e) {
            return;
        }
        e.expanded = true;
        $("#__layout_frame").remove()
        this.doUpdate();
    },
    updateRegion: function(e, t) {
        e = this.getRegion(e);
        if (!e) {
            return;
        }
        if (t) {
            delete t.region;
        }
        kitui.copyTo(e, t);
        this._measureRegion(e);
        this.doUpdate();
    },
    _measureRegion: function(e) {
        var t = this._getButton(e, "close");
        t.visible = e.showCloseButton;
        t = this._getButton(e, "collapse");
        t.visible = e.showCollapseButton;
        if (e.width < e.minWidth) {
            e.width = kitui.minWidth;
        }
        if (e.width > e.maxWidth) {
            e.width = kitui.maxWidth;
        }
        if (e.height < e.minHeight) {
            e.height = kitui.minHeight;
        }
        if (e.height > e.maxHeight) {
            e.height = kitui.maxHeight;
        }
    },
    moveRegion: function(e, t) {
        var e = this.getRegion(e);
        if (!e) {
            return;
        }
        var i = this.regions[t];
        if (!i || i == e) {
            return;
        }
        this.regions.remove(e);
        var t = this.region.indexOf(i);
        this.regions.insert(t, e);
        this.doUpdate();
    },
    removeRegion: function(e) {
        var e = this.getRegion(e);
        if (!e) {
            return;
        }
        this.regions.remove(e);
        delete this.regionMap[e.region];
        jQuery(e._el).remove();
        jQuery(e._split).remove();
        jQuery(e._proxy).remove();
        this.doUpdate();
    },
    addRegion: function(e, t) {
        var i = e;
        e = this._createRegion(e);
        if (!e.region) {
            e.region = "center";
        }
        e.region = e.region.toLowerCase();
        if ("center" == e.region && i && !i.showHeader) {
            e.showHeader = false;
        }
        if ("north" == e.region || "south" == e.region) {
            if (!i.collapseSize) {
                e.collapseSize = this.collapseHeight;
            }
        }
        this._measureRegion(e);
        if ("number" != typeof t) {
            t = this.regions.length;
        }
        var n = this.regionMap[e.region];
        if (n) {
            return;
        }
        this.regions.insert(t, e);
        this.regionMap[e.region] = e;
        this._CreateRegionEl(e);
        var s = this.getRegionBodyEl(e), o = e.body;
        delete e.body;
        if (o) {
            if (!kitui.isArray(o)) {
                o = [ o ];
            }
            for (var r = 0, l = o.length; r < l; r++) {
                kitui.append(s, o[r]);
            }
        }
        if (e.bodyParent) {
            var a = e.bodyParent;
            while (a.firstChild) {
                var h = a.firstChild;
                s.appendChild(h);
            }
        }
        delete e.bodyParent;
        if (e.controls) {
            this.setRegionControls(e, e.controls);
            delete e.controls;
        }
        this.doUpdate();
    },
    setRegions: function(e) {
        if (!kitui.isArray(e)) {
            return;
        }
        for (var t = 0, i = e.length; t < i; t++) {
            this.addRegion(e[t]);
        }
    },
    setRegionControls: function(e, t) {
        var e = this.getRegion(e);
        if (!e) {
            return;
        }
        var i = this.getRegionBodyEl(e);
        __kitui_setControls(t, i, this);
    },
    _CreateRegionEl: function(e) {
        var e = this.getRegion(e);
        if (!e) {
            return;
        }
        kitui.append(this._borderEl, '<div id="' + e.region + '" class="kitui-layout-region"><div class="kitui-layout-region-header" style="' + e.headerStyle + '"></div><div class="kitui-layout-region-body ' + e.bodyCls + '" style="' + e.bodyStyle + '"></div></div>');
        e._el = this._borderEl.lastChild;
        e._header = e._el.firstChild;
        e._body = e._el.lastChild;
        if (e.cls) {
            kitui.addClass(e._el, e.cls);
        }
        if (e.style) {
            kitui.setStyle(e._el, e.style);
        }
        if (e.headerCls) {
            kitui.addClass(e._el.firstChild, e.headerCls);
        }
        kitui.addClass(e._el, "kitui-layout-region-" + e.region);
        if ("center" != e.region) {
            kitui.append(this._borderEl, '<div uid="' + this.uid + '" id="' + e.region + '" class="kitui-layout-split"><div class="kitui-layout-spliticon" title="' + e.splitToolTip + '"></div></div>');
            e._split = this._borderEl.lastChild;
            kitui.addClass(e._split, "kitui-layout-split-" + e.region);
        }
        if ("center" != e.region) {
            kitui.append(this._borderEl, '<div id="' + e.region + '" class="kitui-layout-proxy"></div>');
            e._proxy = this._borderEl.lastChild;
            kitui.addClass(e._proxy, "kitui-layout-proxy-" + e.region);
        }
    },
    _createRegion: function(e) {
        var t = kitui.copyTo({
            region: "",
            title: "",
            iconCls: "",
            iconStyle: "",
            showCloseButton: false,
            showCollapseButton: true,
            buttons: [ {
                name: "close",
                cls: "kitui-tools-close",
                html: "",
                visible: false
            }, {
                name: "collapse",
                cls: "kitui-tools-collapse",
                html: "",
                visible: true
            } ],
            showSplitIcon: false,
            showSplit: true,
            splitToolTip: "",
            showHeader: true,
            splitSize: this.splitSize,
            collapseSize: this.collapseWidth,
            width: this.regionWidth,
            height: this.regionHeight,
            minWidth: this.regionMinWidth,
            minHeight: this.regionMinHeight,
            maxWidth: this.regionMaxWidth,
            maxHeight: this.regionMaxHeight,
            allowResize: true,
            cls: "",
            style: "",
            headerCls: "",
            headerStyle: "",
            bodyCls: "",
            bodyStyle: "",
            visible: true,
            expanded: true
        }, e);
        return t;
    },
    _getButton: function(e, t) {
        for (var i = e.buttons, n = 0, s = i.length; n < s; n++) {
            var o = i[n];
            if (o.name == t) {
                return o;
            }
        }
    },
    getRegion: function(e) {
        if ("string" == typeof e) {
            return this.regionMap[e];
        }
        return e;
    },
    getRegionBox: function(e) {
        var t = this.getRegionEl(e);
        if (t) {
            return kitui.getBox(t);
        }
        return null;
    },
    getRegionProxyEl: function(e) {
        var e = this.getRegion(e);
        if (!e) {
            return null;
        }
        return e._proxy;
    },
    getRegionSplitEl: function(e) {
        var e = this.getRegion(e);
        if (!e) {
            return null;
        }
        return e._split;
    },
    getRegionBodyEl: function(e) {
        var e = this.getRegion(e);
        if (!e) {
            return null;
        }
        return e._body;
    },
    getRegionHeaderEl: function(e) {
        var e = this.getRegion(e);
        if (!e) {
            return null;
        }
        return e._header;
    },
    getRegionEl: function(e) {
        var e = this.getRegion(e);
        if (!e) {
            return null;
        }
        return e._el;
    },
    _initEvents: function() {
        kitui._BindEvents(function() {
            kitui.on(this.el, "click", this.__onClick, this);
            kitui.on(this.el, "mousedown", this.__OnMouseDown, this);
            kitui.on(this.el, "mouseover", this.__OnMouseOver, this);
            kitui.on(this.el, "mouseout", this.__OnMouseOut, this);
            kitui.on(document, "mousedown", this.__OnDocMouseDown, this);
            
            kitui.on(this.el, "mouseover", this.__onmoveClick, this);
            kitui.on(this.el, "mouseover", this.__OnDocMouseDown, this);
        }, this);
    },
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "kitui-layout";
        this.el.innerHTML = '<div class="kitui-layout-border"></div>';
        this._borderEl = this.el.firstChild;
        this.doUpdate();
    }
});

kitui.copyTo(kitui.Layout.prototype, {
    _createHeader: function(e, t) {
        var i = '<div class="kitui-tools">';
        if (t) {
            i += '<span class="kitui-tools-collapse"></span>';
        } else {
            for (var n = e.buttons.length - 1; n >= 0; n--) {
                var s = e.buttons[n];
                i += '<span class="' + s.cls + '" style="';
                i += s.style + ";" + (s.visible ? "" : "display:none;") + '">' + s.html + "</span>";
            }
        }
        i += "</div>";
        i += '<div class="kitui-layout-region-icon ' + e.iconCls + '" style="' + e.iconStyle + ";" + (e.iconStyle || e.iconCls ? "" : "display:none;") + '"></div>';
        i += '<div class="kitui-layout-region-title">' + e.title + "</div>";
        return i;
    },
    doUpdate: function() {
        for (var e = 0, t = this.regions.length; e < t; e++) {
            var i = this.regions[e], n = (i.region, i._el), s = i._split;
            i._proxy;
            if (i.cls) {
                kitui.addClass(n, i.cls);
            }
            if (i.headerCls) {
                kitui.addClass(n.firstChild, i.headerCls);
            }
            i._header.style.display = i.showHeader ? "" : "none";
            i._header.innerHTML = this._createHeader(i);
            if (i._proxy) {
                var o = this._createHeader(i, true);
                if (i.showProxyText) {
                    if ("west" == i.region || "east" == i.region) {
                        o += '<div class="kitui-layout-proxy-text" >' + i.title + "</div>";
                    }
                }
                i._proxy.innerHTML = o;
            }
            if (s) {
                kitui.removeClass(s, "kitui-layout-split-nodrag");
                if (false == i.expanded || !i.allowResize) {
                    kitui.addClass(s, "kitui-layout-split-nodrag");
                }
            }
        }
        this.doLayout();
    },
    doLayout: function() {
        if (!this.canLayout()) {
            return;
        }
        if (this._inAniming) {
            return;
        }
        var e = kitui.getHeight(this.el, true), t = kitui.getWidth(this.el, true), i = {
            x: 0,
            y: 0,
            width: t,
            height: e
        };
        kitui.setHeight(this._borderEl, e);
        var n = this.regions.clone(), s = this.getRegion("center");
        n.remove(s);
        if (s) {
            n.push(s);
        }
        for (var o = 0, r = n.length; o < r; o++) {
            var l = n[o];
            l._Expanded = false;
            kitui.removeClass(l._el, "kitui-layout-popup");
            var a = l.region, h = l._el, u = l._split, d = l._proxy;
            if (false == l.visible) {
                h.style.display = "none";
                if ("center" != a) {
                    u.style.display = d.style.display = "none";
                }
                continue;
            }
            h.style.display = "";
            if ("center" != a) {
                u.style.display = d.style.display = "";
            }
            var c = i.x, f = i.y, t = i.width, e = i.height, m = l.width, p = l.height;
            if (!l.expanded) {
                if ("west" == a || "east" == a) {
                    m = kitui.getWidth(d);
                    kitui.setWidth(h, l.width);
                } else {
                    if ("north" == a || "south" == a) {
                        p = kitui.getHeight(d);
                        kitui.setHeight(h, l.height);
                    }
                }
            }
            switch (a) {
              case "north":
                e = p;
                i.y += p;
                i.height -= p;
                break;

              case "south":
                e = p;
                f = i.y + i.height - p;
                i.height -= p;
                break;

              case "west":
                t = m;
                i.x += m;
                i.width -= m;
                break;

              case "east":
                t = m;
                c = i.x + i.width - m;
                i.width -= m;
                break;

              case "center":
                break;

              default:
                continue;
            }
            if (t < 0) {
                t = 0;
            }
            if (e < 0) {
                e = 0;
            }
            if ("west" == a || "east" == a) {
                kitui.setHeight(h, e);
            }
            if ("north" == a || "south" == a) {
                kitui.setWidth(h, t);
            }
            var g = h;
            if (!l.expanded) {
                g = d;
                h.style.top = "-100px";
                h.style.left = "-1500px";
            } else {
                if (d) {
                    d.style.left = "-1500px";
                    d.style.top = "-100px";
                }
            }
            g.style.left = c + "px";
            g.style.top = f + "px";
            if (g == d) {
                if ("west" == a || "east" == a) {
                    kitui.setHeight(g, e);
                }
                if ("north" == a || "south" == a) {
                    kitui.setWidth(g, t);
                }
            } else {
                kitui.setWidth(g, t);
                kitui.setHeight(g, e);
            }
            var _ = jQuery(l._el).height(), v = l.showHeader ? jQuery(l._header).outerHeight() : 0;
            kitui.setHeight(l._body, _ - v);
            if ("center" == a) {
                continue;
            }
            m = p = l.splitSize;
            c = i.x, f = i.y, t = i.width, e = i.height;
            switch (a) {
              case "north":
                e = p;
                i.y += p;
                i.height -= p;
                break;

              case "south":
                e = p;
                f = i.y + i.height - p;
                i.height -= p;
                break;

              case "west":
                t = m;
                i.x += m;
                i.width -= m;
                break;

              case "east":
                t = m;
                c = i.x + i.width - m;
                i.width -= m;
                break;

              case "center":            }
            if (t < 0) {
                t = 0;
            }
            if (e < 0) {
                e = 0;
            }
            u.style.left = c + "px";
            u.style.top = f + "px";
            kitui.setWidth(u, t);
            kitui.setHeight(u, e);
            if (l.showSplit && l.expanded && true == l.allowResize) {
                kitui.removeClass(u, "kitui-layout-split-nodrag");
            } else {
                kitui.addClass(u, "kitui-layout-split-nodrag");
            }
            u.firstChild.style.display = l.showSplitIcon ? "block" : "none";
            if (l.expanded) {
                kitui.removeClass(u.firstChild, "kitui-layout-spliticon-collapse");
            } else {
                kitui.addClass(u.firstChild, "kitui-layout-spliticon-collapse");
            }
        }
        
        kitui.layout(this._borderEl);
        this.fire("layout");
    },
    __OnMouseDown: function(e) {
        if (this._inAniming) {
            return;
        }
        if (kitui.findParent(e.target, "kitui-layout-split")) {
            var t = jQuery(e.target).attr("uid");
            if (t != this.uid) {
                return;
            }
            var i = this.getRegion(e.target.id);
            if (false == i.expanded || !i.allowResize || !i.showSplit) {
                return;
            }
            this.dragRegion = i;
            var n = this._getDrag();
            n.start(e);
        }
    },
    _getDrag: function() {
        if (!this.drag) {
            this.drag = new kitui.Drag({
                capture: true,
                onStart: kitui.createDelegate(this._OnDragStart, this),
                onMove: kitui.createDelegate(this._OnDragMove, this),
                onStop: kitui.createDelegate(this._OnDragStop, this)
            });
        }
        return this.drag;
    },
    _OnDragStart: function() {
        this._maskProxy = kitui.append(document.body, '<div class="kitui-resizer-mask"></div>');
        this._dragProxy = kitui.append(document.body, '<div class="kitui-proxy"></div>');
        this._dragProxy.style.cursor = "n-resize";
        if ("west" == this.dragRegion.region || "east" == this.dragRegion.region) {
            this._dragProxy.style.cursor = "w-resize";
        }
        this.splitBox = kitui.getBox(this.dragRegion._split);
        kitui.setBox(this._dragProxy, this.splitBox);
        this.elBox = kitui.getBox(this.el, true);
    },
    _OnDragMove: function(e) {
        var t = e.now[0] - e.init[0], i = this.splitBox.x + t, n = e.now[1] - e.init[1], s = this.splitBox.y + n, o = (i + this.splitBox.width, 
        s + this.splitBox.height, this.getRegion("west")), r = this.getRegion("east"), l = this.getRegion("north"), a = this.getRegion("south"), h = this.getRegion("center"), u = o && o.visible ? o.width : 0, d = r && r.visible ? r.width : 0, c = l && l.visible ? l.height : 0, f = a && a.visible ? a.height : 0, m = o && o.showSplit ? kitui.getWidth(o._split) : 0, p = r && r.showSplit ? kitui.getWidth(r._split) : 0, g = l && l.showSplit ? kitui.getHeight(l._split) : 0, _ = a && a.showSplit ? kitui.getHeight(a._split) : 0, v = this.dragRegion, y = v.region;
        if ("west" == y) {
            var w = this.elBox.width - d - p - m - h.minWidth;
            if (i - this.elBox.x > w) {
                i = w + this.elBox.x;
            }
            if (i - this.elBox.x < v.minWidth) {
                i = v.minWidth + this.elBox.x;
            }
            if (i - this.elBox.x > v.maxWidth) {
                i = v.maxWidth + this.elBox.x;
            }
            kitui.setX(this._dragProxy, i);
        } else {
            if ("east" == y) {
                w = this.elBox.width - u - m - p - h.minWidth;
                if (this.elBox.right - (i + this.splitBox.width) > w) {
                    i = this.elBox.right - w - this.splitBox.width;
                }
                if (this.elBox.right - (i + this.splitBox.width) < v.minWidth) {
                    i = this.elBox.right - v.minWidth - this.splitBox.width;
                }
                if (this.elBox.right - (i + this.splitBox.width) > v.maxWidth) {
                    i = this.elBox.right - v.maxWidth - this.splitBox.width;
                }
                kitui.setX(this._dragProxy, i);
            } else {
                if ("north" == y) {
                    var x = this.elBox.height - f - _ - g - h.minHeight;
                    if (s - this.elBox.y > x) {
                        s = x + this.elBox.y;
                    }
                    if (s - this.elBox.y < v.minHeight) {
                        s = v.minHeight + this.elBox.y;
                    }
                    if (s - this.elBox.y > v.maxHeight) {
                        s = v.maxHeight + this.elBox.y;
                    }
                    kitui.setY(this._dragProxy, s);
                } else {
                    if ("south" == y) {
                        x = this.elBox.height - c - g - _ - h.minHeight;
                        if (this.elBox.bottom - (s + this.splitBox.height) > x) {
                            s = this.elBox.bottom - x - this.splitBox.height;
                        }
                        if (this.elBox.bottom - (s + this.splitBox.height) < v.minHeight) {
                            s = this.elBox.bottom - v.minHeight - this.splitBox.height;
                        }
                        if (this.elBox.bottom - (s + this.splitBox.height) > v.maxHeight) {
                            s = this.elBox.bottom - v.maxHeight - this.splitBox.height;
                        }
                        kitui.setY(this._dragProxy, s);
                    }
                }
            }
        }
    },
    _OnDragStop: function() {
        var e = kitui.getBox(this._dragProxy), t = this.dragRegion, i = t.region;
        if ("west" == i) {
            var n = e.x - this.elBox.x;
            this.updateRegion(t, {
                width: n
            });
        } else {
            if ("east" == i) {
                n = this.elBox.right - e.right;
                this.updateRegion(t, {
                    width: n
                });
            } else {
                if ("north" == i) {
                    var s = e.y - this.elBox.y;
                    this.updateRegion(t, {
                        height: s
                    });
                } else {
                    if ("south" == i) {
                        s = this.elBox.bottom - e.bottom;
                        this.updateRegion(t, {
                            height: s
                        });
                    }
                }
            }
        }
        jQuery(this._dragProxy).remove();
        this._dragProxy = null;
        this.elBox = this.handlerBox = null;
        jQuery(this._maskProxy).remove();
        this._maskProxy = null;
    },
    _VirtualToggle: function(e) {
        if (!this.floatable) {
            return;
        }
        e = this.getRegion(e);
        if (true === e._Expanded) {
            this._VirtualCollapse(e);
        } else {
            this._VirtualExpand(e);
        }
    },
    _VirtualExpand: function(e) {
        if (this._inAniming) {
            return;
        }
        this.doLayout();
        var t = e.region, i = e._el;
        e._Expanded = true;
        kitui.addClass(i, "kitui-layout-popup");
        var n = kitui.getBox(e._proxy), s = kitui.getBox(e._el), o = {};
        if ("east" == t) {
            var r = n.x, l = n.y, a = n.height;
            kitui.setHeight(i, a);
            kitui.setX(i, r);
            i.style.top = e._proxy.style.top;
            var h = parseInt(i.style.left);
            o = {
                left: h - s.width
            };
        } else {
            if ("west" == t) {
                r = n.right - s.width, l = n.y, a = n.height;
                kitui.setHeight(i, a);
                kitui.setX(i, r);
                i.style.top = e._proxy.style.top;
                h = parseInt(i.style.left);
                o = {
                    left: h + s.width
                };
            } else {
                if ("north" == t) {
                    var r = n.x, l = n.bottom - s.height, u = n.width;
                    kitui.setWidth(i, u);
                    kitui.setXY(i, r, l);
                    var d = parseInt(i.style.top);
                    o = {
                        top: d + s.height
                    };
                } else {
                    if ("south" == t) {
                        r = n.x, l = n.y, u = n.width;
                        kitui.setWidth(i, u);
                        kitui.setXY(i, r, l);
                        d = parseInt(i.style.top);
                        o = {
                            top: d - s.height
                        };
                    }
                }
            }
        }
        kitui.addClass(e._proxy, "kitui-layout-maxZIndex");
        this._inAniming = true;
        var c = this, f = jQuery(i);
        f.animate(o, 250, function() {
            kitui.removeClass(e._proxy, "kitui-layout-maxZIndex");
            c._inAniming = false;
        });

        var iframe_id="__layout_frame";
		if(!document.getElementById(iframe_id)&&kitui_useShims){
			var iframeel = "<iframe frameborder='0' id="+iframe_id+" style='position:absolute; z-index:-1; width:0; height:0; top:0;left:0;scrolling:no;'></iframe>";
			var _topWin = kitui._getTopWindow();
			this._shimEl = kitui.append(document.body, iframeel);
			var te = kitui.getBox(document.getElementById("west"));
			this._shimEl.style.width = te.width+"px";
		    this._shimEl.style.height = te.height+"px";
		    this._shimEl.style.left = 30+"px";
		    this._shimEl.style.top = 0+"px";   
		     var z = kitui.getStyle(document.getElementById("west"), "zIndex");
	            if (!isNaN(z)) {
	                this._shimEl.style.zIndex = z - 3;
	            }else{
	            	this._shimEl.style.zIndex=1
	            }
		}          
    },
    _VirtualCollapse: function(e) {
        if (this._inAniming) {
            return;
        }
        e._Expanded = false;
        var t = e.region, i = e._el, n = kitui.getBox(i), s = {};
        if ("east" == t) {
            var o = parseInt(i.style.left);
            s = {
                left: o + n.width
            };
        } else {
            if ("west" == t) {
                o = parseInt(i.style.left);
                s = {
                    left: o - n.width
                };
            } else {
                if ("north" == t) {
                    var r = parseInt(i.style.top);
                    s = {
                        top: r - n.height
                    };
                } else {
                    if ("south" == t) {
                        r = parseInt(i.style.top);
                        s = {
                            top: r + n.height
                        };
                    }
                }
            }
        }
        kitui.addClass(e._proxy, "kitui-layout-maxZIndex");
        this._inAniming = true;
        var l = this, a = jQuery(i);
        a.animate(s, 250, function() {
            kitui.removeClass(e._proxy, "kitui-layout-maxZIndex");
            $("#__layout_frame").remove();
            l._inAniming = false;
            l.doLayout();
        });
        
    },
    __OnDocMouseDown: function(e) {
        if (this._inAniming) {
            return;
        }
        for (var t = 0, i = this.regions.length; t < i; t++) {
            var n = this.regions[t];
            if (!n._Expanded) {
                continue;
            }
            if (kitui.isAncestor(n._el, e.target) || kitui.isAncestor(n._proxy, e.target)) {
                ;
            } else {
                this._VirtualCollapse(n);
            }
        }
    },
    getAttrs: function(e) {
    
        var t = kitui.Layout.superclass.getAttrs.call(this, e), i = jQuery(e);
        //alert(JSON.stringify(t))
        kitui._ParseBool(e, t, [ "floatable" ]);
        var n = parseInt(i.attr("splitSize"));
        if (!isNaN(n)) {
            t.splitSize = n;
        }
        for (var s = [], o = kitui.getChildNodes(e), r = 0, l = o.length; r < l; r++) {
            var a = o[r], h = {};
            
           var opt = $(a).attr('data-options');
			if (opt) {
				if (opt.substring(0, 1) != '{') {
					opt = '{' + opt + '}';
				}
				h = (new Function('return ' + opt))();
			}
           // h=kitui.Layout.superclass.getAttrs.call(this, a);
			    h.cls = a.className;
	            h.style = a.style.cssText;
	            //kitui._ParseString(a, h, [ "region", "title", "iconCls", "iconStyle", "cls", "headerCls", "headerStyle", "bodyCls", "bodyStyle", "splitToolTip" ]);
	            //kitui._ParseBool(a, h, [ "allowResize", "visible", "showCloseButton", "showCollapseButton", "showSplit", "showHeader", "expanded", "showSplitIcon", "showProxyText" ]);
	            //kitui._ParseInt(a, h, [ "splitSize", "collapseSize", "width", "height", "minWidth", "minHeight", "maxWidth", "maxHeight" ]);
	            h.bodyParent = a;
                s.push(h);
          
        }
        
       
        t.regions = s;
    
        return t;
    }
});

kitui.regClass(kitui.Layout, "layout");

})(jQuery);
///<jscompress sourcefile="jquery.splitter.js" />
(function($) {
	kitui.Splitter = function() {
	    this._initPanes();
	    kitui.Splitter.superclass.constructor.call(this);
	};
	
	kitui.extend(kitui.Splitter, kitui.Control, {
	    width: 300,
	    height: 180,
	    vertical: false,
	    allowResize: true,
	    pane1: null,
	    pane2: null,
	    showHandleButton: true,
	    handlerStyle: "",
	    handlerCls: "",
	    handlerSize: 5,
	    uiCls: "kitui-splitter",
	    _create: function() {
	        this.el = document.createElement("div");
	        this.el.className = "kitui-splitter";
	        this.el.innerHTML = '<div class="kitui-splitter-border"><div id="1" class="kitui-splitter-pane kitui-splitter-pane1"></div><div id="2" class="kitui-splitter-pane kitui-splitter-pane2"></div><div class="kitui-splitter-handler"></div></div>';
	        this._borderEl = this.el.firstChild;
	        this._pane1El = this._borderEl.firstChild;
	        this._pane2El = this._borderEl.childNodes[1];
	        this._handlerEl = this._borderEl.lastChild;
	    },
	    _initEvents: function() {
	        kitui._BindEvents(function() {
	            kitui.on(this.el, "click", this.__OnClick, this);
	            kitui.on(this.el, "mousedown", this.__OnMouseDown, this);
	        }, this);
	    },
	    _initPanes: function() {
	        this.pane1 = {
	            id: "",
	            index: 1,
	            minSize: 30,
	            maxSize: 3e3,
	            size: "",
	            showCollapseButton: false,
	            cls: "",
	            style: "",
	            visible: true,
	            expanded: true
	        };
	        this.pane2 = kitui.copyTo({}, this.pane1);
	        this.pane2.index = 2;
	    },
	    doUpdate: function() {
	        this.doLayout();
	    },
	    doLayout: function() {
	        if (!this.canLayout()) {
	            return;
	        }
	        this._handlerEl.style.cursor = this.allowResize ? "" : "default";
	        kitui.removeClass(this.el, "kitui-splitter-vertical");
	        if (this.vertical) {
	            kitui.addClass(this.el, "kitui-splitter-vertical");
	        }
	        kitui.removeClass(this._pane1El, "kitui-splitter-pane1-vertical");
	        kitui.removeClass(this._pane2El, "kitui-splitter-pane2-vertical");
	        if (this.vertical) {
	            kitui.addClass(this._pane1El, "kitui-splitter-pane1-vertical");
	            kitui.addClass(this._pane2El, "kitui-splitter-pane2-vertical");
	        }
	        kitui.removeClass(this._handlerEl, "kitui-splitter-handler-vertical");
	        if (this.vertical) {
	            kitui.addClass(this._handlerEl, "kitui-splitter-handler-vertical");
	        }
	        var t = this.getHeight(true);
	        var k = this.getWidth(true);
	        if (!jQuery.boxModel) {
	            var f = kitui.getBorders(this._borderEl);
	            t = t + f.top + f.bottom;
	            k = k + f.left + f.right;
	        }
	        this._borderEl.style.width = k + "px";
	        this._borderEl.style.height = t + "px";
	        var b = this._pane1El, a = this._pane2El;
	        var m = jQuery(b), j = jQuery(a);
	        b.style.display = a.style.display = this._handlerEl.style.display = "";
	        var y = this.handlerSize;
	        this.pane1.size = String(this.pane1.size);
	        this.pane2.size = String(this.pane2.size);
	        var v = parseFloat(this.pane1.size), n = parseFloat(this.pane2.size);
	        var r = isNaN(v), g = isNaN(n);
	        var x = !isNaN(v) && this.pane1.size.indexOf("%") != -1;
	        var l = !isNaN(n) && this.pane2.size.indexOf("%") != -1;
	        var e = !r && !x;
	        var d = !g && !l;
	        var p = this.vertical ? t - this.handlerSize : k - this.handlerSize;
	        var u = p2Size = 0;
	        if (r || g) {
	            if (r && g) {
	                u = parseInt(p / 2);
	                p2Size = p - u;
	            } else {
	                if (e) {
	                    u = v;
	                    p2Size = p - u;
	                } else {
	                    if (x) {
	                        u = parseInt(p * v / 100);
	                        p2Size = p - u;
	                    } else {
	                        if (d) {
	                            p2Size = n;
	                            u = p - p2Size;
	                        } else {
	                            if (l) {
	                                p2Size = parseInt(p * n / 100);
	                                u = p - p2Size;
	                            }
	                        }
	                    }
	                }
	            }
	        } else {
	            if (x && d) {
	                p2Size = n;
	                u = p - p2Size;
	            } else {
	                if (e && l) {
	                    u = v;
	                    p2Size = p - u;
	                } else {
	                    var c = v + n;
	                    u = parseInt(p * v / c);
	                    p2Size = p - u;
	                }
	            }
	        }
	        if (u > this.pane1.maxSize) {
	            u = this.pane1.maxSize;
	            p2Size = p - u;
	        }
	        if (p2Size > this.pane2.maxSize) {
	            p2Size = this.pane2.maxSize;
	            u = p - p2Size;
	        }
	        if (u < this.pane1.minSize) {
	            u = this.pane1.minSize;
	            p2Size = p - u;
	        }
	        if (p2Size < this.pane2.minSize) {
	            p2Size = this.pane2.minSize;
	            u = p - p2Size;
	        }
	        if (this.pane1.expanded == false) {
	            p2Size = p;
	            u = 0;
	            b.style.display = "none";
	        } else {
	            if (this.pane2.expanded == false) {
	                u = p;
	                p2Size = 0;
	                a.style.display = "none";
	            }
	        }
	        if (this.pane1.visible == false) {
	            p2Size = p + y;
	            u = y = 0;
	            b.style.display = "none";
	            this._handlerEl.style.display = "none";
	        } else {
	            if (this.pane2.visible == false) {
	                u = p + y;
	                p2Size = y = 0;
	                a.style.display = "none";
	                this._handlerEl.style.display = "none";
	            }
	        }
	        if (this.vertical) {
	            kitui.setWidth(b, k);
	            kitui.setWidth(a, k);
	            kitui.setHeight(b, u);
	            kitui.setHeight(a, p2Size);
	            a.style.top = u + y + "px";
	            this._handlerEl.style.left = "0px";
	            this._handlerEl.style.top = u + "px";
	            kitui.setWidth(this._handlerEl, k);
	            kitui.setHeight(this._handlerEl, this.handlerSize);
	            b.style.left = "0px";
	            a.style.left = "0px";
	        } else {
	            kitui.setWidth(b, u);
	            kitui.setWidth(a, p2Size);
	            kitui.setHeight(b, t);
	            kitui.setHeight(a, t);
	            a.style.left = u + y + "px";
	            this._handlerEl.style.top = "0px";
	            this._handlerEl.style.left = u + "px";
	            kitui.setWidth(this._handlerEl, this.handlerSize);
	            kitui.setHeight(this._handlerEl, t);
	            b.style.top = "0px";
	            a.style.top = "0px";
	        }
	        var o = '<div class="kitui-splitter-handler-buttons">';
	        if (!this.pane1.expanded || !this.pane2.expanded) {
	            if (!this.pane1.expanded) {
	                if (this.pane1.showCollapseButton) {
	                    o += '<a id="1" class="kitui-splitter-pane2-button"></a>';
	                }
	            } else {
	                if (this.pane2.showCollapseButton) {
	                    o += '<a id="2" class="kitui-splitter-pane1-button"></a>';
	                }
	            }
	        } else {
	            if (this.pane1.showCollapseButton) {
	                o += '<a id="1" class="kitui-splitter-pane1-button"></a>';
	            }
	            if (this.allowResize) {
	                if (!this.pane1.showCollapseButton && !this.pane2.showCollapseButton) {
	                    o += '<span class="kitui-splitter-resize-button"></span>';
	                }
	            }
	            if (this.pane2.showCollapseButton) {
	                o += '<a id="2" class="kitui-splitter-pane2-button"></a>';
	            }
	        }
	        o += "</div>";
	        this._handlerEl.innerHTML = o;
	        var q = this._handlerEl.firstChild;
	        q.style.display = this.showHandleButton ? "" : "none";
	        var i = kitui.getBox(q);
	        if (this.vertical) {
	            q.style.marginLeft = -i.width / 2 + "px";
	        } else {
	            q.style.marginTop = -i.height / 2 + "px";
	        }
	        if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded) {
	            kitui.addClass(this._handlerEl, "kitui-splitter-nodrag");
	        } else {
	            kitui.removeClass(this._handlerEl, "kitui-splitter-nodrag");
	        }
	        kitui.layout(this._borderEl);
	        this.fire("layout");
	    },
	    getPaneBox: function(a) {
	        var b = this.getPaneEl(a);
	        if (!b) {
	            return null;
	        }
	        return kitui.getBox(b);
	    },
	    getPane: function(a) {
	        if (a == 1) {
	            return this.pane1;
	        } else {
	            if (a == 2) {
	                return this.pane2;
	            }
	        }
	        return a;
	    },
	    setPanes: function(b) {
	        if (!kitui.isArray(b)) {
	            return;
	        }
	        for (var a = 0; a < 2; a++) {
	            var c = b[a];
	            this.updatePane(a + 1, c);
	        }
	    },
	    setPaneControls: function(a, c) {
	        var d = this.getPane(a);
	        if (!d) {
	            return;
	        }
	        var b = this.getPaneEl(a);
	        __kitui_setControls(c, b, this);
	    },
	    getPaneEl: function(a) {
	        if (a == 1) {
	            return this._pane1El;
	        }
	        return this._pane2El;
	    },
	    updatePane: function(c, b) {
	        var h = this.getPane(c);
	        if (!h) {
	            return;
	        }
	        kitui.copyTo(h, b);
	        var f = this.getPaneEl(c);
	        var e = h.body;
	        delete h.body;
	        if (e) {
	            if (!kitui.isArray(e)) {
	                e = [ e ];
	            }
	            for (var d = 0, a = e.length; d < a; d++) {
	                kitui.append(f, e[d]);
	            }
	        }
	        if (h.bodyParent) {
	            var g = h.bodyParent;
	            while (g.firstChild) {
	                f.appendChild(g.firstChild);
	            }
	        }
	        delete h.bodyParent;
	        f.id = h.id;
	        kitui.setStyle(f, h.style);
	        kitui.addClass(f, h["class"]);
	        if (h.controls) {
	            var c = h == this.pane1 ? 1 : 2;
	            this.setPaneControls(c, h.controls);
	            delete h.controls;
	        }
	        this.doUpdate();
	    },
	    setShowHandleButton: function(a) {
	        this.showHandleButton = a;
	        this.doUpdate();
	    },
	    getShowHandleButton: function(a) {
	        return this.showHandleButton;
	    },
	    setVertical: function(a) {
	        this.vertical = a;
	        this.doUpdate();
	    },
	    getVertical: function() {
	        return this.vertical;
	    },
	    expandPane: function(a) {
	        var c = this.getPane(a);
	        if (!c) {
	            return;
	        }
	        c.expanded = true;
	        this.doUpdate();
	        var b = {
	            pane: c,
	            paneIndex: this.pane1 == c ? 1 : 2
	        };
	        this.fire("expand", b);
	    },
	    collapsePane: function(a) {
	        var d = this.getPane(a);
	        if (!d) {
	            return;
	        }
	        d.expanded = false;
	        var b = d == this.pane1 ? this.pane2 : this.pane1;
	        if (b.expanded == false) {
	            b.expanded = true;
	            b.visible = true;
	        }
	        this.doUpdate();
	        var c = {
	            pane: d,
	            paneIndex: this.pane1 == d ? 1 : 2
	        };
	        this.fire("collapse", c);
	    },
	    togglePane: function(a) {
	        var b = this.getPane(a);
	        if (!b) {
	            return;
	        }
	        if (b.expanded) {
	            this.collapsePane(b);
	        } else {
	            this.expandPane(b);
	        }
	    },
	    showPane: function(a) {
	        var b = this.getPane(a);
	        if (!b) {
	            return;
	        }
	        b.visible = true;
	        this.doUpdate();
	    },
	    hidePane: function(a) {
	        var c = this.getPane(a);
	        if (!c) {
	            return;
	        }
	        c.visible = false;
	        var b = c == this.pane1 ? this.pane2 : this.pane1;
	        if (b.visible == false) {
	            b.expanded = true;
	            b.visible = true;
	        }
	        this.doUpdate();
	    },
	    setAllowResize: function(a) {
	        if (this.allowResize != a) {
	            this.allowResize = a;
	            this.doLayout();
	        }
	    },
	    getAllowResize: function() {
	        return this.allowResize;
	    },
	    setHandlerSize: function(a) {
	        if (this.handlerSize != a) {
	            this.handlerSize = a;
	            this.doLayout();
	        }
	    },
	    getHandlerSize: function() {
	        return this.handlerSize;
	    },
	    __OnClick: function(c) {
	        var b = c.target;
	        if (!kitui.isAncestor(this._handlerEl, b)) {
	            return;
	        }
	        var a = parseInt(b.id);
	        var d = this.getPane(a);
	        var c = {
	            pane: d,
	            paneIndex: a,
	            cancel: false
	        };
	        if (d.expanded) {
	            this.fire("beforecollapse", c);
	        } else {
	            this.fire("beforeexpand", c);
	        }
	        if (c.cancel == true) {
	            return;
	        }
	        if (b.className == "kitui-splitter-pane1-button") {
	            this.togglePane(a);
	        } else {
	            if (b.className == "kitui-splitter-pane2-button") {
	                this.togglePane(a);
	            }
	        }
	    },
	    _OnButtonClick: function(b, a) {
	        this.fire("buttonclick", {
	            pane: b,
	            index: this.pane1 == b ? 1 : 2,
	            htmlEvent: a
	        });
	    },
	    onButtonClick: function(b, a) {
	        this.on("buttonclick", b, a);
	    },
	    __OnMouseDown: function(c) {
	        var a = c.target;
	        if (!this.allowResize) {
	            return;
	        }
	        if (!this.pane1.visible || !this.pane2.visible || !this.pane1.expanded || !this.pane2.expanded) {
	            return;
	        }
	        if (kitui.isAncestor(this._handlerEl, a)) {
	            if (a.className == "kitui-splitter-pane1-button" || a.className == "kitui-splitter-pane2-button") {} else {
	                var b = this._getDrag();
	                b.start(c);
	            }
	        }
	    },
	    _getDrag: function() {
	        if (!this.drag) {
	            this.drag = new kitui.Drag({
	                capture: true,
	                onStart: kitui.createDelegate(this._OnDragStart, this),
	                onMove: kitui.createDelegate(this._OnDragMove, this),
	                onStop: kitui.createDelegate(this._OnDragStop, this)
	            });
	        }
	        return this.drag;
	    },
	    _OnDragStart: function(a) {
	        this._maskProxy = kitui.append(document.body, '<div class="kitui-resizer-mask"></div>');
	        this._dragProxy = kitui.append(document.body, '<div class="kitui-proxy" style="z-index:1000"></div>');
	        this._dragProxy.style.cursor = this.vertical ? "n-resize" : "w-resize";
	        this.handlerBox = kitui.getBox(this._handlerEl);
	        this.elBox = kitui.getBox(this._borderEl, true);
	        kitui.setBox(this._dragProxy, this.handlerBox);
	        if(kitui_useShims){
	            var h = "<iframe frameborder='0' style='z-index:-1; width:0; height:0; top:0;left:0;scrolling:no;'></iframe>";
                this._shimEl = kitui.append(this._dragProxy, h);
                this._shimEl.style.display = "";
	            var e = kitui.getBox(this._dragProxy), t = this._shimEl.style;
	            t.width = e.width + "px";
	            t.height = e.height + "px";
	            var i = kitui.getStyle(this._dragProxy, "zIndex");
	            if (!isNaN(i)) {
	                this._shimEl.style.zIndex = i - 3;
	            }
	        }
	    },
	    _OnDragMove: function(d) {
	        if (!this.handlerBox) {
	            return;
	        }
	        if (!this.elBox) {
	            this.elBox = kitui.getBox(this._borderEl, true);
	        }
	        var k = this.elBox.width, e = this.elBox.height;
	        var c = this.handlerSize;
	        var n = this.vertical ? e - this.handlerSize : k - this.handlerSize;
	        var l = this.pane1.minSize, a = this.pane1.maxSize;
	        var g = this.pane2.minSize, m = this.pane2.maxSize;
	        if (this.vertical == true) {
	            var b = d.now[1] - d.init[1];
	            var i = this.handlerBox.y + b;
	            if (i - this.elBox.y > a) {
	                i = this.elBox.y + a;
	            }
	            if (i + this.handlerBox.height < this.elBox.bottom - m) {
	                i = this.elBox.bottom - m - this.handlerBox.height;
	            }
	            if (i - this.elBox.y < l) {
	                i = this.elBox.y + l;
	            }
	            if (i + this.handlerBox.height > this.elBox.bottom - g) {
	                i = this.elBox.bottom - g - this.handlerBox.height;
	            }
	            kitui.setY(this._dragProxy, i);
	        } else {
	            var f = d.now[0] - d.init[0];
	            var j = this.handlerBox.x + f;
	            if (j - this.elBox.x > a) {
	                j = this.elBox.x + a;
	            }
	            if (j + this.handlerBox.width < this.elBox.right - m) {
	                j = this.elBox.right - m - this.handlerBox.width;
	            }
	            if (j - this.elBox.x < l) {
	                j = this.elBox.x + l;
	            }
	            if (j + this.handlerBox.width > this.elBox.right - g) {
	                j = this.elBox.right - g - this.handlerBox.width;
	            }
	            kitui.setX(this._dragProxy, j);
	        }
	    },
	    _OnDragStop: function(g) {
	        var m = this.elBox.width, i = this.elBox.height;
	        var b = this.handlerSize;
	        var q = parseFloat(this.pane1.size), o = parseFloat(this.pane2.size);
	        var n = isNaN(q), l = isNaN(o);
	        var k = !isNaN(q) && this.pane1.size.indexOf("%") != -1;
	        var j = !isNaN(o) && this.pane2.size.indexOf("%") != -1;
	        var a = !n && !k;
	        var f = !l && !j;
	        var p = this.vertical ? i - this.handlerSize : m - this.handlerSize;
	        var e = kitui.getBox(this._dragProxy);
	        var d = e.x - this.elBox.x, c = p - d;
	        if (this.vertical) {
	            d = e.y - this.elBox.y;
	            c = p - d;
	        }
	        if (n || l) {
	            if (n && l) {
	                q = parseFloat(d / p * 100).toFixed(1);
	                this.pane1.size = q + "%";
	            } else {
	                if (a) {
	                    q = d;
	                    this.pane1.size = q;
	                } else {
	                    if (k) {
	                        q = parseFloat(d / p * 100).toFixed(1);
	                        this.pane1.size = q + "%";
	                    } else {
	                        if (f) {
	                            o = c;
	                            this.pane2.size = o;
	                        } else {
	                            if (j) {
	                                o = parseFloat(c / p * 100).toFixed(1);
	                                this.pane2.size = o + "%";
	                            }
	                        }
	                    }
	                }
	            }
	        } else {
	            if (k && f) {
	                this.pane2.size = c;
	            } else {
	                if (a && j) {
	                    this.pane1.size = d;
	                } else {
	                    this.pane1.size = parseFloat(d / p * 100).toFixed(1);
	                    this.pane2.size = 100 - this.pane1.size;
	                }
	            }
	        }
	        if(kitui_useShims){
               jQuery(this._shimEl).remove();
               this._shimEl = null;
	        }
	        jQuery(this._dragProxy).remove();
	        jQuery(this._maskProxy).remove();
	        this._maskProxy = null;
	        this._dragProxy = null;
	        this.elBox = this.handlerBox = null;
	        this.doLayout();
	        this.fire("resize");
	    },
	    getAttrs: function(c) {
	        var k = kitui.Splitter.superclass.getAttrs.call(this, c);
	        kitui._ParseBool(c, k, [ "allowResize", "vertical", "showHandleButton", "onresize" ]);
	        kitui._ParseInt(c, k, [ "handlerSize" ]);
	        var j = [];
	        var a = kitui.getChildNodes(c);
	        for (var f = 0, e = 2; f < e; f++) {
	            var d = a[f];
	            var h = jQuery(d);
	            var b = {};
	            j.push(b);
	            if (!d) {
	                continue;
	            }
	            b.style = d.style.cssText;
	            kitui._ParseString(d, b, [ "cls", "size", "id", "class" ]);
	            kitui._ParseBool(d, b, [ "visible", "expanded", "showCollapseButton" ]);
	            kitui._ParseInt(d, b, [ "minSize", "maxSize", "handlerSize" ]);
	            b.bodyParent = d;
	        }
	        k.panes = j;
	        return k;
	    }
	});
	
	kitui.regClass(kitui.Splitter, "splitter");
})(jQuery);
///<jscompress sourcefile="jquery.tabs.js" />
(function($) {
kitui.Tabs = function() {
    this._initTabs();
    kitui.Tabs.superclass.constructor.apply(this, arguments);
};

kitui.extend(kitui.Tabs, kitui.Control, {
    activeIndex: -1,
    tabAlign: "left",
    tabPosition: "top",
    showBody: true,
    showHeader: true,
    nameField: "name",
    titleField: "title",
    urlField: "url",
    url: "",
    maskOnLoad: true,
    plain: true,
    bodyStyle: "",
    _tabHoverCls: "kitui-tab-hover",
    _tabActiveCls: "kitui-tab-active",
    uiCls: "kitui-tabs",
    _TabID: 1,
    _deferLoadingTime: 180,
    allowClickWrap: true,
    arrowPosition: "right",
    showNavMenu: false,
    clearTimeStamp: false,
    hoverTab: null
});

kitui.copyTo(kitui.Tabs.prototype, {
    getAttrs: function(el) {
        var attrs = kitui.Tabs.superclass.getAttrs.call(this, el);
        ///kitui._ParseString(el, attrs, [ "tabAlign", "tabPosition", "bodyStyle", "onactivechanged", "onbeforeactivechanged", "url", "ontabload", "ontabdestroy", "onbeforecloseclick", "oncloseclick", "ontabdblclick", "titleField", "urlField", "nameField", "loadingMsg", "buttons", "arrowPosition" ]);
        //kitui._ParseBool(el, attrs, [ "allowAnim", "showBody", "showHeader", "maskOnLoad", "plain", "allowClickWrap", "showNavMenu", "clearTimeStamp" ]);
        //kitui._ParseInt(el, attrs, [ "activeIndex" ]);
        for (var tabs = [], nodes = kitui.getChildNodes(el), i = 0, l = nodes.length; i < l; i++) {
        	var node = nodes[i];
            var o = {};
           
          
            //kitui._ParseString(node, o, [ "name", "title", "url", "cls", "iconCls", "iconStyle", "headerCls", "headerStyle", "bodyCls", "bodyStyle", "onload", "ondestroy", "data-options" ]);
            //kitui._ParseBool(node, o, [ "newLine", "visible", "enabled", "showCloseButton", "refreshOnClick" ]);
            
           
			var s = $(node).attr('data-options');
			
			if (s) {
				if (s.substring(0, 1) != '{') {
					s = '{' + s + '}';
				}
				o = (new Function('return ' + s))();
			}
            
            
            o.bodyParent = node;
            o.style = node.style.cssText;
            tabs.push(o);
        }
        attrs.tabs = tabs;
        return attrs;
    },
    onActiveChanged: function(e, t) {
        this.on("activechanged", e, t);
    },
    onCloseClick: function(e, t) {
        this.on("closeclick", e, t);
    },
    onBeforeCloseClick: function(e, t) {
        this.on("beforecloseclick", e, t);
    },
    _OnCloseButtonClick: function(e, t) {
        var i = {
            tab: e,
            index: this.tabs.indexOf(e),
            name: e.name.toLowerCase(),
            htmlEvent: t,
            cancel: false
        };
        this.fire("beforecloseclick", i);
        if (true == i.cancel) {
            return;
        }
        try {
            if (e._iframeEl && e._iframeEl.contentWindow) {
                var n = true;
                if (e._iframeEl.contentWindow.CloseWindow) {
                    n = e._iframeEl.contentWindow.CloseWindow("close");
                } else {
                    if (e._iframeEl.contentWindow.CloseOwnerWindow) {
                        n = e._iframeEl.contentWindow.CloseOwnerWindow("close");
                    }
                }
                if (false === n) {
                    i.cancel = true;
                }
            }
        } catch (s) {}
        if (true == i.cancel) {
            return;
        }
        e.removeAction = "close";
        this.removeTab(e);
        this.fire("closeclick", i);
    },
    _doUpdateRight: function() {
        this._doUpdateLeft();
        kitui.removeClass(this._td1El, "kitui-tabs-header");
        kitui.removeClass(this._td3El, "kitui-tabs-header");
        kitui.append(this._td3El, this._td1El.firstChild);
        this._headerEl = this._td3El;
    },
    _doUpdateLeft: function() {
        for (var e = '<table cellspacing="0" cellpadding="0"><tr>', t = this.getTabRows(), i = 0, n = t.length; i < n; i++) {
            var s = t[i], o = "";
            if (n > 1 && i != n - 1) {
                o = "kitui-tabs-header2";
            }
            e += '<td class="' + o + '"><table class="kitui-tabs-header" cellspacing="0" cellpadding="0">';
            e += '<tr ><td class="kitui-tabs-space kitui-tabs-firstSpace" ><div></div></td></tr>';
            for (var r = 0, l = s.length; r < l; r++) {
                var a = s[r], h = this._createTabId(a);
                if (!a.visible) {
                    continue;
                }
                var u = this.tabs.indexOf(a), o = a.headerCls || "";
                if (false == a.enabled) {
                    o += " kitui-disabled";
                }
                e += '<tr><td id="' + h + '" index="' + u + '"  class="kitui-tab ' + o + '" style="' + a.headerStyle + '">';
                if (a.iconCls || a.iconStyle) {
                    e += '<span class="kitui-tab-icon ' + a.iconCls + '" style="' + a.iconStyle + '"></span>';
                }
                e += '<span class="kitui-tab-text">' + a.title + "</span>";
                if (a.showCloseButton) {
                    var d = "";
                    if (a.enabled) {
                        d = "onmouseover=\"kitui.addClass(this,'kitui-tab-close-hover')\" onmouseout=\"kitui.removeClass(this,'kitui-tab-close-hover')\"";
                    }
                    e += '<span class="kitui-tab-close" ' + d + "></span>";
                }
                e += "</td></tr>";
                if (r != l - 1) {
                    e += '<tr><td class="kitui-tabs-space2"><div></div></td></tr>';
                }
            }
            e += '<tr ><td class="kitui-tabs-space kitui-tabs-lastSpace" ><div></div></td></tr>';
            e += "</table></td>";
        }
        e += "</tr ></table>";
        this._doClearElement();
        kitui.addClass(this._td1El, "kitui-tabs-header");
        kitui.append(this._td1El, e);
        this._headerEl = this._td1El;
    },
    _doUpdateBottom: function() {
        this._doUpdateTop();
        var e = this._td2El;
        kitui.append(e, e.firstChild);
        this._headerEl = e.lastChild.lastChild;
    },
    _doUpdateTop: function() {
        var e = ("top" == this.tabPosition, "");
        e += '<div class="kitui-tabs-scrollCt">';
        if ("side" == this.arrowPosition) {
            e += '<div class="kitui-tabs-leftnav"><a class="kitui-tabs-leftButton" href="javascript:void(0)" hideFocus onclick="return false"></a></div>';
            e += '<div class="kitui-tabs-nav"><a class="kitui-tabs-rightButton" href="javascript:void(0)" hideFocus onclick="return false"></a></div>';
        } else {
            e += '<div class="kitui-tabs-nav"><a class="kitui-tabs-leftButton" href="javascript:void(0)" hideFocus onclick="return false"></a><a class="kitui-tabs-rightButton" href="javascript:void(0)" hideFocus onclick="return false"></a></div>';
        }
        if (this.showNavMenu) {
            e += '<a class="kitui-tabs-tabmenu" href="javascript:void(0)" hideFocus onclick="return false"></a>';
        }
        e += '<div class="kitui-tabs-buttons"></div>';
        e += '<div class="kitui-tabs-headers">';
        for (var t = this.getTabRows(), i = 0, n = t.length; i < n; i++) {
            var s = t[i], o = "";
            e += '<table class="kitui-tabs-header" cellspacing="0" cellpadding="0"><tr><td class="kitui-tabs-space kitui-tabs-firstSpace"><div></div></td>';
            for (var r = 0, l = s.length; r < l; r++) {
                var a = s[r], h = this._createTabId(a);
                if (!a.visible) {
                    continue;
                }
                var u = this.tabs.indexOf(a), o = a.headerCls || "";
                if (false == a.enabled) {
                    o += " kitui-disabled";
                }
                e += '<td id="' + h + '" index="' + u + '"  class="kitui-tab ' + o + '" style="' + a.headerStyle + '">';
                if (a.iconCls || a.iconStyle) {
                    e += '<span class="kitui-tab-icon ' + a.iconCls + '" style="' + a.iconStyle + '"></span>';
                }
                e += '<span class="kitui-tab-text">' + a.title + "</span>";
                if (a.showCloseButton) {
                    var d = "";
                    if (a.enabled) {
                        d = "onmouseover=\"kitui.addClass(this,'kitui-tab-close-hover')\" onmouseout=\"kitui.removeClass(this,'kitui-tab-close-hover')\"";
                    }
                    e += '<span class="kitui-tab-close" ' + d + " ></span>";
                }
                e += "</td>";
                if (r != l - 1) {
                    e += '<td class="kitui-tabs-space2"><div></div></td>';
                }
            }
            e += '<td class="kitui-tabs-space kitui-tabs-lastSpace" ><div></div></td></tr></table>';
        }
        e += "</div>";
        e += "</div>";
        this._doClearElement();
        kitui.prepend(this._td2El, e);
        var c = this._td2El;
        this._headerEl = c.firstChild.lastChild;
        if ("side" == this.arrowPosition) {
            this._leftNavEl = c.firstChild.firstChild;
            this._navEl = this._headerEl.parentNode.children[1];
            this._leftButtonEl = this._leftNavEl.firstChild;
            this._rightButtonEl = this._navEl.firstChild;
            if (this.showNavMenu) {
                this._headerMenuEl = this._headerEl.parentNode.children[2];
            }
        } else {
            this._navEl = this._headerEl.parentNode.firstChild;
            this._leftButtonEl = this._navEl.firstChild;
            this._rightButtonEl = this._navEl.childNodes[1];
            if (this.showNavMenu) {
                this._headerMenuEl = this._headerEl.parentNode.children[1];
            }
        }
        switch (this.tabAlign) {
          case "center":
            var f = this._headerEl.childNodes;
            for (r = 0, l = f.length; r < l; r++) {
                var m = f[r], p = m.getElementsByTagName("td");
                p[0].style.width = "50%";
                p[p.length - 1].style.width = "50%";
            }
            break;

          case "right":
            f = this._headerEl.childNodes;
            for (r = 0, l = f.length; r < l; r++) {
                m = f[r], p = m.getElementsByTagName("td");
                p[0].style.width = "100%";
            }
            break;

          case "fit":
            break;

          default:
            f = this._headerEl.childNodes;
            for (r = 0, l = f.length; r < l; r++) {
                m = f[r], p = m.getElementsByTagName("td");
                p[p.length - 1].style.width = "100%";
            }
        }
    },
    __OnDocMouseUp: function() {
        clearInterval(this._scrollTimer);
        this._scrollTimer = null;
        kitui.un(document, "mouseup", this.__OnDocMouseUp, this);
    },
    __OnMouseDown: function(e) {
        clearInterval(this._scrollTimer);
        if ("top" == this.tabPosition || "bottom" == this.tabPosition) {
            var t = this, i = 0, n = 10;
            if (e.target == this._leftButtonEl) {
                this._scrollTimer = setInterval(function() {
                    t._headerEl.scrollLeft -= n;
                    i++;
                    if (i > 5) {
                        n = 18;
                    }
                    if (i > 10) {
                        n = 25;
                    }
                    t._doScrollButton();
                }, 25);
            } else {
                if (e.target == this._rightButtonEl) {
                    this._scrollTimer = setInterval(function() {
                        t._headerEl.scrollLeft += n;
                        i++;
                        if (i > 5) {
                            n = 18;
                        }
                        if (i > 10) {
                            n = 25;
                        }
                        t._doScrollButton();
                    }, 25);
                } else {
                    if (e.target == this._headerMenuEl) {
                        this._setHeaderMenuItems();
                    }
                }
            }
            kitui.on(document, "mouseup", this.__OnDocMouseUp, this);
        }
    },
    __OnMouseOut: function() {
        if (this.hoverTab) {
            var e = this.getTabEl(this.hoverTab);
            kitui.removeClass(e, this._tabHoverCls);
        }
        this.hoverTab = null;
    },
    __OnMouseOver: function(e) {
        var t = this._getTabByEvent(e);
        if (t && t.enabled) {
            var i = this.getTabEl(t);
            kitui.addClass(i, this._tabHoverCls);
            this.hoverTab = t;
        }
    },
    __OnClick: function(e) {
        var t = this._getTabByEvent(e);
        if (!t) {
            return;
        }
        var i = !!kitui.findParent(e.target, "kitui-tab-close");
        if (!i && t == this.getActiveTab() && !t.refreshOnClick) {
            return;
        }
        if (t.enabled) {
            var n = this;
            setTimeout(function() {
                if (i) {
                    n._OnCloseButtonClick(t, e);
                } else {
                    var s = t.loadedUrl;
                    n._tryActiveTab(t);
                    if (t.refreshOnClick && t.url == s) {
                        n.reloadTab(t);
                    }
                }
            }, 10);
        }
    },
    __OnDblClick: function(e) {
        var t = this._getTabByEvent(e);
        if (!t) {
            return;
        }
        var e = {
            tab: t
        };
        this.fire("tabdblclick", e);
    },
    _getTabByEvent: function(e) {
        var t = kitui.findParent(e.target, "kitui-tab");
        if (!t) {
            return null;
        }
        var i = t.id.split("$");
        if (i[0] != this.uid) {
            return null;
        }
        var n = parseInt(jQuery(t).attr("index"));
        return this.getTab(n);
    },
    getTabByEvent: function(e) {
        return this._getTabByEvent(e);
    },
    getClearTimeStamp: function() {
        return this.clearTimeStamp;
    },
    setClearTimeStamp: function(e) {
        this.clearTimeStamp = e;
    },
    getShowNavMenu: function() {
        return this.showNavMenu;
    },
    setShowNavMenu: function(e) {
        this.showNavMenu = e;
    },
    getArrowPosition: function() {
        return this.arrowPosition;
    },
    setArrowPosition: function(e) {
        this.arrowPosition = e;
    },
    getPlain: function() {
        return this.plain;
    },
    setPlain: function(e) {
        this.plain = e;
        this.doLayout();
    },
    getMaskOnLoad: function() {
        return this.maskOnLoad;
    },
    setMaskOnLoad: function(e) {
        this.maskOnLoad = e;
    },
    getBodyStyle: function() {
        return this.bodyStyle;
    },
    setBodyStyle: function(e) {
        this.bodyStyle = e;
        kitui.setStyle(this._bodyEl, e);
        this.doLayout();
    },
    getShowBody: function() {
        return this.showBody;
    },
    setShowBody: function(e) {
        if (this.showBody != e) {
            this.showBody = e;
            this.doLayout();
        }
    },
    getShowHeader: function() {
        return this.showHeader;
    },
    setShowHeader: function(e) {
        if (this.showHeader != e) {
            this.showHeader = e;
            this.doLayout();
        }
    },
    _tryActiveTab: function(e) {
        e = this.getTab(e);
        if (!e) {
            return;
        }
        var t = this.tabs.indexOf(e);
        if (this.activeIndex == t) {
            return;
        }
        var i = {
            tab: e,
            index: t,
            name: e.name,
            cancel: false
        };
        this.fire("BeforeActiveChanged", i);
        if (false == i.cancel) {
            this.activeTab(e);
        }
    },
    getActiveIndex: function() {
        return this.activeIndex;
    },
    getActiveTab: function() {
        return this.getTab(this.activeIndex);
    },
    activeTab: function(e) {
        this.setActiveIndex(e);
    },
    _scrollToTab: function(e) {
        var t = this._headerEl.scrollLeft;
        if ("top" == this.tabPosition || "bottom" == this.tabPosition) {
            this._headerEl.scrollLeft = t;
            var i = this.getTabEl(e);
            if (i) {
                var n = this, s = kitui.getBox(i), o = kitui.getBox(n._headerEl);
                if (s.x < o.x) {
                    n._headerEl.scrollLeft -= o.x - s.x;
                } else {
                    if (s.right > o.right) {
                        n._headerEl.scrollLeft += s.right - o.right;
                    }
                }
            }
        }
    },
    setActiveIndex: function(e, t) {
        var i = this.getTab(e), n = this.getTab(this.activeIndex), s = i != n, o = this.getTabBodyEl(this.activeIndex);
        if (o) {
            o.style.display = "none";
        }
        if (i) {
            this.activeIndex = this.tabs.indexOf(i);
        } else {
            this.activeIndex = -1;
        }
        o = this.getTabBodyEl(this.activeIndex);
        if (o) {
            o.style.display = "";
        }
        o = this.getTabEl(n);
        if (o) {
            kitui.removeClass(o, this._tabActiveCls);
        }
        o = this.getTabEl(i);
        if (o) {
            kitui.addClass(o, this._tabActiveCls);
        }
        if (o && s) {
            if ("bottom" == this.tabPosition) {
                var r = kitui.findParent(o, "kitui-tabs-header");
                if (r) {
                    jQuery(this._headerEl).prepend(r);
                }
            } else {
                if ("left" == this.tabPosition) {
                    var l = kitui.findParent(o, "kitui-tabs-header").parentNode;
                    if (l) {
                        l.parentNode.appendChild(l);
                    }
                } else {
                    if ("right" == this.tabPosition) {
                        l = kitui.findParent(o, "kitui-tabs-header").parentNode;
                        if (l) {
                            jQuery(l.parentNode).prepend(l);
                        }
                    } else {
                        r = kitui.findParent(o, "kitui-tabs-header");
                        if (r && this.allowClickWrap) {
                            this._headerEl.appendChild(r);
                        }
                    }
                }
            }
            var n = (this._headerEl.scrollLeft, this.getTab(this.activeIndex)), a = n ? !n._layouted : false, h = this.isAutoHeight();
            if (h || a) {
                if (n) {
                    n._layouted = true;
                }
                this.doLayout();
            }
            var u = this.getTabRows();
            if (u.length > 1) {
                ;
            } else {
                this._scrollToTab(this.activeIndex);
                this._doScrollButton();
            }
            for (var d = 0, c = this.tabs.length; d < c; d++) {
                var f = this.getTabEl(this.tabs[d]);
                if (f) {
                    kitui.removeClass(f, this._tabHoverCls);
                }
            }
        }
        var m = this;
        if (s) {
            var p = {
                tab: i,
                index: this.tabs.indexOf(i),
                name: i ? i.name : ""
            };
            setTimeout(function() {
                m.fire("ActiveChanged", p);
            }, 1);
        }
        this._cancelLoadTabs(i);
        if (false !== t) {
            if (i && i.url && !i.loadedUrl) {
                m = this;
                m.loadTab(i.url, i);
            }
        }
        if (m.canLayout()) {
            try {
                kitui.layoutIFrames(m.el);
            } catch (p) {}
        }
    },
    _doScrollButton: function() {
        if ("top" == this.tabPosition || "bottom" == this.tabPosition) {
            kitui.removeClass(this._leftButtonEl, "kitui-disabled");
            kitui.removeClass(this._rightButtonEl, "kitui-disabled");
            if (0 == this._headerEl.scrollLeft) {
                kitui.addClass(this._leftButtonEl, "kitui-disabled");
            }
            var e = this.getTabEl(this.tabs.length - 1);
            if (e) {
                var t = kitui.getBox(e), i = kitui.getBox(this._headerEl);
                if (t.right <= i.right) {
                    kitui.addClass(this._rightButtonEl, "kitui-disabled");
                }
            }
        }
    },
    _createTabBodyId: function(e) {
        return this.uid + "$body$" + e._id;
    },
    _createTabId: function(e) {
        return this.uid + "$" + e._id;
    },
    getTabIFrameEl: function(e) {
        var t = this.getTab(e);
        if (!t) {
            return null;
        }
        return t._iframeEl;
    },
    getTabBodyEl: function(e) {
        var t = this.getTab(e);
        if (!t) {
            return null;
        }
        for (var i = this._createTabBodyId(t), n = this._bodyEl.childNodes, s = 0, o = n.length; s < o; s++) {
            var r = n[s];
            if (r.id == i) {
                return r;
            }
        }
        return null;
    },
    getTabEl: function(e) {
        var t = this.getTab(e);
        if (!t) {
            return null;
        }
        for (var i = this._createTabId(t), n = this.el.getElementsByTagName("*"), s = 0, o = n.length; s < o; s++) {
            var r = n[s];
            if (r.id == i) {
                return r;
            }
        }
        return null;
    },
    getBodyEl: function() {
        return this._bodyEl;
    },
    getHeaderEl: function() {
        return this._headerEl;
    },
    getTab: function(e) {
        if ("object" == typeof e) {
            return e;
        }
        if ("number" == typeof e) {
            return this.tabs[e];
        } else {
            for (var t = 0, i = this.tabs.length; t < i; t++) {
                var n = this.tabs[t];
                if (n.name == e) {
                    return n;
                }
            }
        }
    },
    getAllowClickWrap: function() {
        return this.allowClickWrap;
    },
    setAllowClickWrap: function(e) {
        this.allowClickWrap = e;
    },
    setTabPosition: function(e) {
        this.tabPosition = e;
        this.doUpdate();
    },
    setTabAlign: function(e) {
        this.tabAlign = e;
        this.doUpdate();
    },
    _doMenuSelectTab: function(e) {
        var t = e.item, i = this._getTabBy_Id(t.id);
        this.activeTab(i);
    },
    _setHeaderMenuItems: function() {
        for (var e = this.getTabs(), t = [], i = 0, n = e.length; i < n; i++) {
            var s = e[i];
            t.push({
                id: s._id,
                text: s[this.titleField]
            });
        }
        this._headerMenu.setItems(t);
    },
    OolooMenu: function() {
        this._headerMenu = new kitui.Menu();
        this._headerMenu.setIdField("_id");
        this._headerMenu.setTextField("title");
        this._headerMenu.setPopupEl(this._headerMenuEl);
        this._headerMenu.setShowAction("leftclick");
        this._headerMenu.setHideAction("outerclick");
        this._headerMenu.setXAlign("left");
        this._headerMenu.setYAlign("below");
        this._headerMenu.on("itemclick", this._doMenuSelectTab, this);
        this._headerMenu.hide();
        this._headerMenu.owner = this._headerMenuEl;
    },
    _getTabBy_Id: function(e) {
        for (var t = 0, i = this.tabs.length; t < i; t++) {
            var n = this.tabs[t];
            if (n._id == e) {
                return n;
            }
        }
    },
    doLayout: function() {
        var e = this, t = e._headerEl, i = e._bodyEl, n = e.tabPosition;
        if (!this.canLayout()) {
            return;
        }
        t.style.display = this.showHeader ? "" : "none";
        this._handleIFrameOverflow();
        var s = this.isAutoHeight();
        T = this.getHeight(true);
        D = this.getWidth();
        var o = T, r = D;
        if (this.showBody) {
            i.style.display = "";
        } else {
            i.style.display = "none";
        }
        var l = this.el.firstChild;
        if (this.plain) {
            kitui.addClass(l, "kitui-tabs-plain");
        } else {
            kitui.removeClass(l, "kitui-tabs-plain");
        }
        if (!s && this.showBody) {
            var a = jQuery(t).outerHeight(), h = jQuery(t).outerWidth();
            if ("top" == n || "bottom" == n) {
                a = jQuery(t.parentNode).outerHeight();
            }
            if ("left" == n || "right" == n) {
                D -= h;
            } else {
                T -= a;
            }
            if (jQuery.boxModel) {
                var u = kitui.getPaddings(i), d = kitui.getBorders(i);
                T = T - u.top - u.bottom - d.top - d.bottom;
                D = D - u.left - u.right - d.left - d.right;
            }
            var margin = kitui.getMargins(i);
            T = T - margin.top - margin.bottom;
            D = D - margin.left - margin.right;
            if (T < 0) {
                T = 0;
            }
            if (D < 0) {
                D = 0;
            }
            i.style.width = D + "px";
            i.style.height = T + "px";
            if ("left" == n || "right" == n) {
                for (var c = t.getElementsByTagName("tr")[0], f = c.childNodes, m = f[0].getElementsByTagName("tr"), p = last = all = 0, g = 0, _ = m.length; g < _; g++) {
                    var c = m[g], v = jQuery(c).outerHeight();
                    all += v;
                    if (0 == g) {
                        p = v;
                    }
                    if (g == _ - 1) {
                        last = v;
                    }
                }
                switch (this.tabAlign) {
                  case "center":
                    var y = parseInt((o - (all - p - last)) / 2);
                    for (g = 0, _ = f.length; g < _; g++) {
                        f[g].firstChild.style.height = o + "px";
                        var w = f[g].firstChild, m = w.getElementsByTagName("tr"), x = m[0], C = m[m.length - 1];
                        x.style.height = y + "px";
                        C.style.height = y + "px";
                    }
                    break;

                  case "right":
                    for (g = 0, _ = f.length; g < _; g++) {
                        var w = f[g].firstChild, m = w.getElementsByTagName("tr"), c = m[0], b = o - (all - p);
                        if (b >= 0) {
                            c.style.height = b + "px";
                        }
                    }
                    break;

                  case "fit":
                    for (g = 0, _ = f.length; g < _; g++) {
                        f[g].firstChild.style.height = o + "px";
                    }
                    break;

                  default:
                    for (g = 0, _ = f.length; g < _; g++) {
                        w = f[g].firstChild, m = w.getElementsByTagName("tr"), c = m[m.length - 1], b = o - (all - last);
                        if (b >= 0) {
                            c.style.height = b + "px";
                        }
                    }
                }
            }
        } else {
            i.style.width = "auto";
            i.style.height = "auto";
        }
        var E = this.getTabBodyEl(this.activeIndex);
        if (E) {
            if (!s && this.showBody) {
                var T = kitui.getHeight(i, true);
                if (jQuery.boxModel) {
                    u = kitui.getPaddings(E), d = kitui.getBorders(E);
                    T = T - u.top - u.bottom - d.top - d.bottom;
                }
                E.style.height = T + "px";
            } else {
                E.style.height = "auto";
            }
        }
        switch (n) {
          case "bottom":
            var S = t.childNodes;
            for (g = 0, _ = S.length; g < _; g++) {
                w = S[g];
                kitui.removeClass(w, "kitui-tabs-header2");
                if (_ > 1 && 0 != g) {
                    kitui.addClass(w, "kitui-tabs-header2");
                }
            }
            break;

          case "left":
            f = t.firstChild.rows[0].cells;
            for (g = 0, _ = f.length; g < _; g++) {
                var O = f[g];
                kitui.removeClass(O, "kitui-tabs-header2");
                if (_ > 1 && 0 == g) {
                    kitui.addClass(O, "kitui-tabs-header2");
                }
            }
            break;

          case "right":
            f = t.firstChild.rows[0].cells;
            for (g = 0, _ = f.length; g < _; g++) {
                O = f[g];
                kitui.removeClass(O, "kitui-tabs-header2");
                if (_ > 1 && 0 != g) {
                    kitui.addClass(O, "kitui-tabs-header2");
                }
            }
            break;

          default:
            S = t.childNodes;
            for (g = 0, _ = S.length; g < _; g++) {
                w = S[g];
                kitui.removeClass(w, "kitui-tabs-header2");
                if (_ > 1 && 0 == g) {
                    kitui.addClass(w, "kitui-tabs-header2");
                }
            }
        }
        kitui.removeClass(this.el, "kitui-tabs-scroll");
        var O = kitui.byClass("kitui-tabs-lastSpace", this.el), k = kitui.byClass("kitui-tabs-buttons", this.el), I = t.parentNode;
        I.style.paddingRight = "0px";
        if (this._navEl) {
            this._navEl.style.display = "none";
        }
        if (this._leftNavEl) {
            this._navEl.style.display = "none";
        }
        if (k) {
            k.style.display = "none";
        }
        kitui.setWidth(I, r);
        if (("top" == n || "bottom" == n) && "left" == this.tabAlign) {
            t.style.width = "auto";
            k.style.display = "block";
            var N = r, F = t.firstChild.offsetWidth - O.offsetWidth, M = k.firstChild ? k.offsetWidth : 0;
            if (F + M > N) {
                this._navEl.style.display = "block";
                var B = this._navEl.offsetWidth, P = 0;
                if (this.showNavMenu) {
                    this._headerMenuEl.style.display = "inline-block";
                    P = this._headerMenuEl.offsetWidth;
                    this._headerMenuEl.style.right = M + "px";
                    this.OolooMenu();
                }
                var L = 0;
                if ("side" == this.arrowPosition) {
                    this._leftNavEl.style.display = "block";
                    L = this._leftNavEl.offsetWidth;
                    t.style.left = L + "px";
                }
                this._navEl.style.right = M + P + "px";
                var D = N - M - B - L - P;
                kitui.setWidth(t, D);
            }
        }
        this._scrollToTab(this.activeIndex);
        this._doScrollButton();
        kitui.layout(i);
        var R = this.getActiveTab();
        if (R && R.repaint && E) {
            D = E.style.width;
            E.style.width = "0px";
            setTimeout(function() {
                E.style.width = D;
            }, 1);
        }
        this.fire("layout");
    },
    _handleIFrameOverflow: function() {
        var e = this.getTabBodyEl(this.activeIndex);
        if (e) {
            kitui.removeClass(e, "kitui-tabs-hideOverflow");
            var t = kitui.getChildNodes(e)[0];
            if (t && t.tagName && "IFRAME" == t.tagName.toUpperCase()) {
                kitui.addClass(e, "kitui-tabs-hideOverflow");
            }
        }
    },
    doUpdate: function() {
        if (false === this._allowUpdate) {
            return;
        }
        if (this._buttons && this._buttons.parentNode) {
            this._buttons.parentNode.removeChild(this._buttons);
        }
        kitui.removeClass(this.el, "kitui-tabs-position-left");
        kitui.removeClass(this.el, "kitui-tabs-position-top");
        kitui.removeClass(this.el, "kitui-tabs-position-right");
        kitui.removeClass(this.el, "kitui-tabs-position-bottom");
        if ("bottom" == this.tabPosition) {
            kitui.addClass(this.el, "kitui-tabs-position-bottom");
            this._doUpdateBottom();
        } else {
            if ("right" == this.tabPosition) {
                kitui.addClass(this.el, "kitui-tabs-position-right");
                this._doUpdateRight();
            } else {
                if ("left" == this.tabPosition) {
                    kitui.addClass(this.el, "kitui-tabs-position-left");
                    this._doUpdateLeft();
                } else {
                    kitui.addClass(this.el, "kitui-tabs-position-top");
                    this._doUpdateTop();
                }
            }
        }
        var e = this._headerEl, t = "kitui-tabs-header-";
        kitui.removeClass(e, t + "left");
        kitui.removeClass(e, t + "top");
        kitui.removeClass(e, t + "right");
        kitui.removeClass(e, t + "bottom");
        kitui.addClass(e, t + this.tabPosition);
        e = this._bodyEl, t = "kitui-tabs-body-";
        kitui.removeClass(e, t + "left");
        kitui.removeClass(e, t + "top");
        kitui.removeClass(e, t + "right");
        kitui.removeClass(e, t + "bottom");
        kitui.addClass(e, t + this.tabPosition);
        if (this._buttons) {
            e = kitui.byClass("kitui-tabs-buttons", this.el);
            if (e) {
                e.appendChild(this._buttons);
                kitui.parse(e);
            }
        }
        this.doLayout();
        this.setActiveIndex(this.activeIndex, false);
    },
    getTabRows: function() {
        for (var e = [], t = [], i = 0, n = this.tabs.length; i < n; i++) {
            var s = this.tabs[i];
            if (0 != i && s.newLine) {
                e.push(t);
                t = [];
            }
            t.push(s);
        }
        e.push(t);
        return e;
    },
    reloadTab: function(e) {
        e = this.getTab(e);
        if (!e) {
            e = this.getActiveTab();
        }
        if (!e) {
            return;
        }
        this.loadTab(e.url, e);
    },
    loadTab: function(e, t, i, n) {
        if (!e) {
            return;
        }
        t = this.getTab(t);
        if (!t) {
            t = this.getActiveTab();
        }
        if (!t) {
            return;
        }
        var s = this.getTabBodyEl(t);
        if (s) {
            kitui.addClass(s, "kitui-tabs-hideOverflow");
        }
        if(-1 == e.indexOf("?"))
	    	t.url = e + "?menuId=" + getMenuIdFromDocumentUrl() + "&userCode=" + getUserCodeFromDocumentUrl() + "&year="+getYearFromDocumentUrl();
	    else
	    	t.url = e + "&menuId=" + getMenuIdFromDocumentUrl() + "&userCode=" + getUserCodeFromDocumentUrl() + "&year="+getYearFromDocumentUrl();
        delete t.loadedUrl;
        if (i) {
            t.onload = i;
        }
        if (n) {
            t.ondestroy = n;
        }
        var o = this;
        clearTimeout(this._loadTabTimer);
        this._loadTabTimer = null;
        this._loadTabTimer = setTimeout(function() {
            o._doLoadTab(t);
        }, 1);
    },
    l1ol0: function(e) {
        var t = this._getTabEvent(e);
        this.fire("tabdestroy", t);
        return t.autoActive;
    },
    _getTabEvent: function(e) {
        var t = {
            sender: this,
            tab: e,
            index: this.tabs.indexOf(e),
            name: e.name,
            iframe: e._iframeEl,
            autoActive: true
        };
        return t;
    },
    _doLoadTab: function(e) {
        if (!e || e != this.getActiveTab()) {
            return;
        }
        var t = this.getTabBodyEl(e);
        if (!t) {
            return;
        }
        this._cancelLoadTabs();
        this._doRemoveIFrame(e, true);
        this._loading = true;
        e._loading = true;
        this.unmask();
        if (this.maskOnLoad) {
            this.loading();
        }
        var i = new Date(), n = this;
        n.isLoading = true;
        var s = kitui.createIFrame(e.url, function(t, s) {
            try {
                e._iframeEl.contentWindow.Owner = window;
                e._iframeEl.contentWindow.CloseOwnerWindow = function(t) {
                    e.removeAction = t;
                    var i = true;
                    if (e.ondestroy) {
                        if ("string" == typeof e.ondestroy) {
                            e.ondestroy = window[e.ondestroy];
                        }
                        if (e.ondestroy) {
                            var s = n._getTabEvent(e);
                            s.action = t;
                            i = e.ondestroy.call(n, s);
                        }
                    }
                    if (false === i) {
                        return false;
                    }
                    setTimeout(function() {
                        n.removeTab(e);
                    }, 10);
                };
            } catch (o) {}
            if (true != e._loading) {
                return;
            }
            var r = i - new Date() + n._deferLoadingTime;
            e._loading = false;
            e.loadedUrl = e.url;
            if (r < 0) {
                r = 0;
            }
            setTimeout(function() {
                n.unmask();
                n.doLayout();
                n.isLoading = false;
            }, r);
            if (s) {
                var o = {
                    sender: n,
                    tab: e,
                    index: n.tabs.indexOf(e),
                    name: e.name,
                    iframe: e._iframeEl
                };
                if (e.onload) {
                    if ("string" == typeof e.onload) {
                        e.onload = window[e.onload];
                    }
                    if (e.onload) {
                        e.onload.call(n, o);
                    }
                }
            }
            if (n.getActiveTab() == e) {
                n.fire("tabload", o);
            }
        }, this.clearTimeStamp);
        setTimeout(function() {
            if (e._iframeEl == s) {
                t.appendChild(s);
            }
        }, 1);
        e._iframeEl = s;
    },
    _cancelLoadTabs: function(e) {
        for (var t = this.tabs, i = 0, n = t.length; i < n; i++) {
            var s = t[i];
            if (s != e) {
                if (s._loading && s._iframeEl) {
                    s._loading = false;
                    this._doRemoveIFrame(s, true);
                }
            }
        }
        if (e && e == this.getActiveTab() && e._loading) {
            ;
        } else {
            this._loading = false;
            this.unmask();
        }
    },
    _doRemoveIFrame: function(e, t) {
        if (e._iframeEl && e._iframeEl.parentNode) {
            if (e._iframeEl._ondestroy) {
            	try{
                	e._iframeEl._ondestroy();
                }catch(e){
                	
                }
            }
            try {
				this._iframeEl.parentNode.removeChild(this._iframeEl);
				this._iframeEl.removeNode(true);
			} catch (a) {}
        }
        e._iframeEl = null;
        e.loadedUrl = null;
        if (true === t) {
            var n = this.getTabBodyEl(e);
            if (n) {
                for (var s = kitui.getChildNodes(n, true), o = 0, r = s.length; o < r; o++) {
                    var l = s[o];
                    if (l && l.parentNode) {
                        l.parentNode.removeChild(l);
                    }
                }
            }
        }
    },
    _getMaskWrapEl: function() {
        return this._bodyEl;
    },
    updateTab: function(e, t) {
        e = this.getTab(e);
        if (!e) {
            return;
        }
        kitui.copyTo(e, t);
        this.doUpdate();
    },
    moveTab: function(e, t) {
        e = this.getTab(e);
        if (!e) {
            return;
        }
        var i = this.tabs[t];
        if (i == e) {
            return;
        }
        this.tabs.remove(e);
        var t = this.tabs.indexOf(i);
        if (-1 == t) {
            this.tabs.add(e);
        } else {
            this.tabs.insert(t, e);
        }
        this.doUpdate();
    },
    removeTab: function(e) {
        e = this.getTab(e);
        if (!e || -1 == this.tabs.indexOf(e)) {
            return;
        }
        var t = this.getActiveTab(), i = e == t, n = this.l1ol0(e);
        this.tabs.remove(e);
        this._doRemoveIFrame(e);
        var s = this.getTabBodyEl(e);
        if (s) {
            this._bodyEl.removeChild(s);
        }
        if (n && i) {
            for (var o = this.activeIndex; o >= 0; o--) {
                var e = this.getTab(o);
                if (e && e.enabled && e.visible) {
                    this.activeIndex = o;
                    break;
                }
            }
            this.doUpdate();
            this.setActiveIndex(this.activeIndex);
            this.fire("activechanged");
        } else {
            this.activeIndex = this.tabs.indexOf(t);
            this.doUpdate();
        }
        return e;
    },
    addTab: function(e, t) {
        if ("string" == typeof e) {
            e = {
                title: e
            };
        }
        e = this.createTab(e);
        if (!e.name) {
            e.name = "";
        }
        var i = this.getActiveTab();
        if ("number" != typeof t) {
            t = this.tabs.length;
        }
        this.tabs.insert(t, e);
        if (i) {
            this.activeIndex = this.tabs.indexOf(i);
        }
        var n = this._createTabBodyId(e), s = '<div id="' + n + '" class="kitui-tabs-body ' + e.bodyCls + '" style="' + e.bodyStyle + ';display:none;"></div>';
        kitui.append(this._bodyEl, s);
        var o = this.getTabBodyEl(e), r = e.body;
        delete e.body;
        if (r) {
            if (!kitui.isArray(r)) {
                r = [ r ];
            }
            for (var l = 0, a = r.length; l < a; l++) {
                kitui.append(o, r[l]);
            }
        }
        if (e.bodyParent) {
            var h = e.bodyParent;
            while (h.firstChild) {
                if (8 == h.firstChild.nodeType) {
                    h.removeChild(h.firstChild);
                } else {
                    o.appendChild(h.firstChild);
                }
            }
        }
        delete e.bodyParent;
        if (e.controls) {
            this.setTabControls(e, e.controls);
            delete e.controls;
        }
        this.doUpdate();
        return e;
    },
    removeAll: function(e) {
        var t = this.getActiveTab();
        if (kitui.isNull(e)) {
            e = [];
        }
        if (!kitui.isArray(e)) {
            e = [ e ];
        }
        for (var i = e.length - 1; i >= 0; i--) {
            var n = this.getTab(e[i]);
            if (!n) {
                e.removeAt(i);
            } else {
                e[i] = n;
            }
        }
        var s = this.tabs;
        for (i = s.length - 1; i >= 0; i--) {
            var o = s[i];
            if (-1 == e.indexOf(o)) {
                this.removeTab(o);
            }
        }
        var r = e[0];
        if (t != this.getActiveTab()) {
            if (r) {
                this.activeTab(r);
            }
        }
    },
    getTabs: function() {
        return this.tabs;
    },
    setTabs: function(e) {
        if (!kitui.isArray(e)) {
            return;
        }
        this.beginUpdate();
        this.removeAll();
        for (var t = 0, i = e.length; t < i; t++) {
            var n = e[t];
            n.title = kitui._getMap(this.titleField, n);
            n.url = kitui._getMap(this.urlField, n);
            n.name = kitui._getMap(this.nameField, n);
        }
        for (t = 0, i = e.length; t < i; t++) {
            this.addTab(e[t]);
        }
        this.setActiveIndex(0);
        this.endUpdate();
    },
    setTabControls: function(e, t) {
        var e = this.getTab(e);
        if (!e) {
            return;
        }
        var i = this.getTabBodyEl(e);
        __kitui_setControls(t, i, this);
    },
    setButtons: function(e) {
        this._buttons = kitui.byId(e);
        if (this._buttons) {
            var t = kitui.byClass("kitui-tabs-buttons", this.el);
            if (t) {
                t.appendChild(this._buttons);
                kitui.parse(t);
                this.doLayout();
            }
        }
    },
    getUrlField: function() {
        return this.urlField;
    },
    setUrlField: function(e) {
        this.urlField = e;
    },
    getTitleField: function() {
        return this.titleField;
    },
    setTitleField: function(e) {
        this.titleField = e;
    },
    getNameField: function() {
        return this.nameField;
    },
    setNameField: function(e) {
        this.nameField = e;
    },
    getUrl: function() {
        return this.url;
    },
    setUrl: function(e) {
        this.url = e;
        this._doLoad();
    },
    load: function(e) {
        if ("string" == typeof e) {
            this.setUrl(e);
        } else {
            this.setTabs(e);
        }
    },
    _doLoad: function() {
        var e = kitui._getResult(this.url, null, null, null, null, this.dataField);
        if (this.dataField && !kitui.isArray(e)) {
            e = kitui._getMap(this.dataField, e);
        }
        if (!e) {
            e = [];
        }
        this.setTabs(e);
        this.fire("load");
    },
    createTab: function(e) {
        var t = kitui.copyTo({
            _id: this._TabID++,
            name: "",
            title: "",
            newLine: false,
            iconCls: "",
            iconStyle: "",
            headerCls: "",
            headerStyle: "",
            bodyCls: "",
            bodyStyle: "",
            visible: true,
            enabled: true,
            showCloseButton: false,
            active: false,
            url: "",
            loaded: false,
            refreshOnClick: false
        }, e);
        if (e) {
            e = kitui.copyTo(e, t);
            t = e;
        }
        return t;
    },
    _initTabs: function() {
        this.tabs = [];
    },
    _initEvents: function() {
        kitui._BindEvents(function() {
            kitui.on(this.el, "mousedown", this.__OnMouseDown, this);
            kitui.on(this.el, "click", this.__OnClick, this);
            kitui.on(this.el, "mouseover", this.__OnMouseOver, this);
            kitui.on(this.el, "mouseout", this.__OnMouseOut, this);
            kitui.on(this.el, "dblclick", this.__OnDblClick, this);
        }, this);
    },
    _doClearElement: function() {
        kitui.removeClass(this._td1El, "kitui-tabs-header");
        kitui.removeClass(this._td3El, "kitui-tabs-header");
        this._td1El.innerHTML = "";
        this._td3El.innerHTML = "";
        kitui.removeChilds(this._td2El, this._bodyEl);
    },
    destroy: function(e) {
        this._tableEl = this._td1El = this._td2El = this._td3El = null;
        this._bodyEl = this._borderEl = this.headerEl = null;
        this.tabs = [];
        kitui.Tabs.superclass.destroy.call(this, e);
    },
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "kitui-tabs";
        var e = '<table class="kitui-tabs-table" cellspacing="0" cellpadding="0"><tr style="width:100%;"><td></td><td style="text-align:left;vertical-align:top;width:100%;"><div class="kitui-tabs-bodys"></div></td><td></td></tr></table>';
        this.el.innerHTML = e;
        this._tableEl = this.el.firstChild;
        var t = this.el.getElementsByTagName("td");
        this._td1El = t[0];
        this._td2El = t[1];
        this._td3El = t[2];
        this._bodyEl = this._td2El.firstChild;
        this._borderEl = this._bodyEl;
        this.doUpdate();
    },
    set: function(e) {
        if ("string" == typeof e) {
            return this;
        }
        var t = this._allowLayout;
        this._allowLayout = false;
        var i = e.activeIndex;
        delete e.activeIndex;
        var n = e.url;
        delete e.url;
        kitui.Tabs.superclass.set.call(this, e);
        if (n) {
            this.setUrl(n);
        }
        if (kitui.isNumber(i)) {
            this.setActiveIndex(i);
        }
        this._allowLayout = t;
        this.doLayout();
        return this;
    }
});

kitui.regClass(kitui.Tabs, "tabs");
})(jQuery);
///<jscompress sourcefile="jquery.menu.js" />
kitui.Menu = function() {
    this.items = [];
    kitui.Menu.superclass.constructor.apply(this, arguments);
};

kitui.extend(kitui.Menu, kitui.Control);

kitui.copyTo(kitui.Menu.prototype, kitui.Popup_prototype);

var kitui_Popup_prototype_hide = kitui.Popup_prototype.hide;

kitui.copyTo(kitui.Menu.prototype, {
    height: "auto",
    width: "auto",
    minWidth: 140,
    vertical: true,
    allowSelectItem: false,
    _selectedItem: null,
    _itemSelectedCls: "kitui-menuitem-selected",
    textField: "text",
    resultAsTree: false,
    idField: "id",
    parentField: "pid",
    itemsField: "children",
    showNavArrow: true,
    imgPath: "",
    overflow: false,
    _clearBorder: false,
    showAction: "none",
    hideAction: "outerclick",
    uiCls: "kitui-menu",
    _disableContextMenu: false,
    _itemType: "menuitem",
    url: "",
    hideOnClick: true,
    hideOnClick: true
});

kitui.copyTo(kitui.Menu.prototype, {
    getAttrs: function(e) {
        var t = kitui.Menu.superclass.getAttrs.call(this, e), i = jQuery(e);
        kitui._ParseString(e, t, [ "popupEl", "popupCls", "showAction", "hideAction", "xAlign", "yAlign", "modalStyle", "onbeforeopen", "open", "onbeforeclose", "onclose", "url", "onitemclick", "onitemselect", "textField", "idField", "parentField", "toolbar", "imgPath" ]);
        kitui._ParseBool(e, t, [ "resultAsTree", "hideOnClick", "showNavArrow", "showShadow", "overflow" ]);
        for (var n = kitui.getChildNodes(e), s = n.length - 1; s >= 0; s--) {
            var o = n[s], r = jQuery(o).attr("property");
            if (!r) {
                continue;
            }
            r = r.toLowerCase();
            if ("toolbar" == r) {
                t.toolbar = o;
                o.parentNode.removeChild(o);
            }
        }
        var n = kitui.getChildNodes(e), l = this.parseItems(n);
        if (l.length > 0) {
            t.items = l;
        }
        var a = i.attr("vertical");
        if (a) {
            t.vertical = "true" == a ? true : false;
        }
        var h = i.attr("allowSelectItem");
        if (h) {
            t.allowSelectItem = "true" == h ? true : false;
        }
        return t;
    },
    parseItems: function(e) {
        for (var t = [], i = 0, n = e.length; i < n; i++) {
            var s = e[i];
            if ("separator" == s.className) {
                var o = {
                    type: "separator",
                    id: s.id,
                    name: s.name
                };
                t.add(o);
                continue;
            }
            var r = kitui.getChildNodes(s), l = r[0], a = r[1], o = new kitui.MenuItem();
            if (!a) {
                kitui.applyTo.call(o, s);
                t.add(o);
                continue;
            }
            kitui.applyTo.call(o, l);
            o.render(document.body);
            var h = new kitui.Menu();
            kitui.applyTo.call(h, a);
            o.setMenu(h);
            h.render(document.body);
            t.add(o);
        }
        return t.clone();
    },
    setToolbar: function(e) {
        __kitui_setControls(e, this._toolbarEl, this);
        this._toolbarEl.style.display = "block";
    },
    _startScrollMove: function(e) {
        clearInterval(this._scrollTimer);
        var t = function() {
            clearInterval(n._scrollTimer);
            kitui.un(document, "mouseup", t);
        };
        kitui.on(document, "mouseup", t);
        var i = this._getMaxScrollLeft(), n = this;
        this._scrollTimer = setInterval(function() {
            if (false == n.isVertical()) {
                var t = n._innerEl.scrollLeft;
                t += e;
                if (t > i) {
                    t = i;
                }
                n._innerEl.scrollLeft = t;
            } else {
                n._contentEl.scrollTop += e;
            }
        }, 50);
    },
    _getMaxScrollLeft: function() {
        return parseInt(this._getScrollWidth() - this._innerEl.offsetWidth + 6);
    },
    _getScrollWidth: function() {
        var e = this, t = 0, i = $(".kitui-menuitem", e.el).first()[0], n = $(".kitui-menuitem", e.el).last()[0];
        if (i && n) {
            var s = kitui.getBox(i), o = kitui.getBox(n);
            t = o.right - s.left;
        }
        return t;
    },
    __OnBottomMouseDown: function() {
        this._startScrollMove(20);
    },
    __OnTopMouseDown: function() {
        this._startScrollMove(-20);
    },
    onItemSelect: function(e, t) {
        this.on("itemselect", e, t);
    },
    onItemClick: function(e, t) {
        this.on("itemclick", e, t);
    },
    _OnItemSelect: function(e) {
        if (this._selectedItem) {
            this._selectedItem.removeCls(this._itemSelectedCls);
        }
        this._selectedItem = e;
        if (this._selectedItem) {
            this._selectedItem.addCls(this._itemSelectedCls);
        }
        var t = {
            item: this._selectedItem,
            isLeaf: this._selectedItem ? !this._selectedItem.menu : false
        };
        this.fire("itemselect", t);
    },
    _OnItemClick: function(e, t) {
        var i = {
            item: e,
            isLeaf: !e.menu,
            htmlEvent: t
        };
        if (this.hideOnClick) {
            if (this.isPopup) {
                this.hide();
            } else {
                if (i.isLeaf) {
                    this.hideItems();
                }
            }
        }
        if (this.allowSelectItem && this._selectedItem != e) {
            this.setSelectedItem(e);
        }
        this.fire("itemclick", i);
        if (this.ownerItem) {}
    },
    getImgPath: function() {
        return this.imgPath;
    },
    setImgPath: function(e) {
        this.imgPath = e;
    },
    getHideOnClick: function() {
        return this.hideOnClick;
    },
    setHideOnClick: function(e) {
        this.hideOnClick = e;
    },
    getUrl: function() {
        return this.url;
    },
    setUrl: function(e) {
        this.url = e;
        this._doLoad();
    },
    load: function(e) {
        if ("string" == typeof e) {
            this.setUrl(e);
        } else {
            this.setItems(e);
        }
    },
    loadList: function(e, t, i) {
        if (!e) {
            return;
        }
        t = t || this.idField;
        i = i || this.parentField;
        for (var n = 0, s = e.length; n < s; n++) {
            var o = e[n];
            o.text = kitui._getMap(this.textField, o);
            if (kitui.isNull(o.text)) {
                o.text = "";
            }
        }
        var r = kitui.arrayToTree(e, this.itemsField, t, i);
        this.load(r);
    },
    _doLoad: function() {
        var e = kitui._getResult(this.url, null, null, null, null, this.dataField);
        if (this.dataField && !kitui.isArray(e)) {
            e = kitui._getMap(this.dataField, e);
        }
        if (!e) {
            e = [];
        }
        if (false == this.resultAsTree) {
            e = kitui.arrayToTree(e, this.itemsField, this.idField, this.parentField);
        }
        for (var t = kitui.treeToArray(e, this.itemsField, this.idField, this.parentField), i = 0, n = t.length; i < n; i++) {
            var s = t[i];
            s.text = kitui._getMap(this.textField, s);
            if (kitui.isNull(s.text)) {
                s.text = "";
            }
        }
        new Date();
        this.setItems(e);
        this.fire("load");
    },
    _measureSize: function() {
        if ("auto" == this.height) {
            this.el.style.height = "auto";
            this._borderEl.style.height = "auto";
            this._contentEl.style.height = "auto";
            this._topArrowEl.style.display = this._bottomArrowEl.style.display = "none";
            var e = kitui.getViewportBox(), t = kitui.getBox(this.el);
            this.maxHeight = e.height - 25;
            if (this.ownerItem) {
                var t = kitui.getBox(this.ownerItem.el), i = t.top, n = e.height - t.bottom, s = i > n ? i : n;
                s -= 10;
                this.maxHeight = s;
            }
        }
        this.el.style.display = "";
        t = kitui.getBox(this.el);
        if (t.width > this.maxWidth) {
            kitui.setWidth(this.el, this.maxWidth);
            t = kitui.getBox(this.el);
        }
        if (t.height > this.maxHeight) {
            kitui.setHeight(this.el, this.maxHeight);
            t = kitui.getBox(this.el);
        }
        if (t.width < this.minWidth) {
            kitui.setWidth(this.el, this.minWidth);
            t = kitui.getBox(this.el);
        }
        if (t.height < this.minHeight) {
            kitui.setHeight(this.el, this.minHeight);
            t = kitui.getBox(this.el);
        }
    },
    doLayout: function() {
        if (!this.canLayout()) {
            return;
        }
        var e = this._innerEl, t = this._topArrowEl, i = this._bottomArrowEl;
        if (!this.isAutoHeight()) {
            var n = kitui.getHeight(this.el, true);
            kitui.setHeight(this._borderEl, n);
            t.style.display = i.style.display = "none";
            this._contentEl.style.height = "auto";
            if (this.showNavArrow && this._borderEl.scrollHeight > this._borderEl.clientHeight) {
                t.style.display = i.style.display = "block";
                n = kitui.getHeight(this._borderEl, true);
                var s = kitui.getHeight(t), o = kitui.getHeight(i), r = n - s - o;
                if (r < 0) {
                    r = 0;
                }
                kitui.setHeight(this._contentEl, r);
                var l = kitui.getWidth(this._borderEl, true);
                kitui.setWidth(t, l);
                kitui.setWidth(i, l);
            } else {
                this._contentEl.style.height = "auto";
            }
        } else {
            this._borderEl.style.height = "auto";
            this._contentEl.style.height = "auto";
        }
        if (this.overflow) {
            t.style.display = i.style.display = "none";
            e.style.marginLeft = e.style.marginRight = "0px";
            if (this._getScrollWidth() > this._innerEl.offsetWidth) {
                t.style.display = i.style.display = "block";
                e.style.marginLeft = e.style.marginRight = "15px";
            } else {
                e.scrollLeft = 0;
            }
        }
    },
    getOverflow: function() {
        return this.overflow;
    },
    setOverflow: function(e) {
        this.overflow = e;
        if (e) {
            kitui.addClass(this.el, "kitui-menu-overflow");
        } else {
            kitui.removeClass(this.el, "kitui-menu-overflow");
        }
    },
    getParentField: function() {
        return this.parentField;
    },
    setParentField: function(e) {
        this.parentField = e;
    },
    getIdField: function() {
        return this.idField;
    },
    setIdField: function(e) {
        this.idField = e;
    },
    getResultAsTree: function() {
        return this.resultAsTree;
    },
    setResultAsTree: function(e) {
        this.resultAsTree = e;
    },
    getTextField: function() {
        return this.textField;
    },
    setTextField: function(e) {
        this.textField = e;
    },
    getShowNavArrow: function() {
        return this.showNavArrow;
    },
    setShowNavArrow: function(e) {
        this.showNavArrow = e;
    },
    getSelectedItem: function() {
        return this._selectedItem;
    },
    setSelectedItem: function(e) {
        e = this.getItem(e);
        this._OnItemSelect(e);
    },
    getAllowSelectItem: function() {
        return this.allowSelectItem;
    },
    setAllowSelectItem: function(e) {
        this.allowSelectItem = e;
    },
    getItem: function(e) {
        if ("number" == typeof e) {
            return this.items[e];
        }
        if ("string" == typeof e) {
            for (var t = 0, i = this.items.length; t < i; t++) {
                var n = this.items[t];
                if (n.id == e) {
                    return n;
                }
            }
            return null;
        }
        if (e && -1 != this.items.indexOf(e)) {
            return e;
        }
        return null;
    },
    getGroupItems: function(e) {
        if (!e) {
            return [];
        }
        for (var t = [], i = 0, n = this.items.length; i < n; i++) {
            var s = this.items[i];
            if (s.groupName == e) {
                t.push(s);
            }
        }
        return t;
    },
    removeAll: function() {
        for (var e = this.items.clone(), t = e.length - 1; t >= 0; t--) {
            this.removeItem(e[t]);
        }
        this._contentEl.innerHTML = "";
    },
    removeItemAt: function(e) {
        var t = this.items[e];
        this.removeItem(t);
    },
    removeItem: function(e) {
        e = kitui.get(e);
        if (!e) {
            return;
        }
        this.items.remove(e);
        this._contentEl.removeChild(e.el);
        this.fire("itemschanged");
    },
    addItem: function(e) {
        if ("-" == e || "|" == e || "separator" == e.type) {
            kitui.append(this._contentEl, '<span id="' + e.id + '" name="' + (e.name || "") + '" class="kitui-separator"></span>');
            return;
        }
        if (!kitui.isControl(e) && !kitui.getClass(e.type)) {
            e.type = this._itemType;
        }
        e.ownerMenu = this;
        e = kitui.getAndCreate(e);
        this.items.push(e);
        this._contentEl.appendChild(e.el);
        e.ownerMenu = this;
        this.fire("itemschanged");
    },
    getItems: function() {
        return this.items;
    },
    setItems: function(e) {
        if (!kitui.isArray(e)) {
            e = [];
        }
        this.removeAll();
        for (var t = (new Date(), 0), i = e.length; t < i; t++) {
            this.addItem(e[t]);
        }
    },
    getData: function() {
        return this.getItems();
    },
    setData: function(e) {
        if (!kitui.isArray(e)) {
            e = [];
        }
        this.setItems(e);
    },
    hasShowItemMenu: function() {
        for (var e = 0, t = this.items.length; e < t; e++) {
            var i = this.items[e];
            if (i && i.menu && i.menu.isPopup) {
                return true;
            }
        }
        return false;
    },
    showItemMenu: function(e) {
        for (var t = 0, i = this.items.length; t < i; t++) {
            var n = this.items[t];
            if (n == e) {
                n.showMenu();
            } else {
                n.hideMenu();
            }
        }
    },
    hideItems: function() {
        for (var e = 0, t = this.items.length; e < t; e++) {
            var i = this.items[e];
            i.hideMenu();
        }
    },
    hide: function() {
        this.hideItems();
        kitui_Popup_prototype_hide.call(this);
    },
    show: function() {
        this.setVisible(true);
    },
    isVertical: function() {
        return this.vertical;
    },
    getVertical: function() {
        return this.vertical;
    },
    setVertical: function(e) {
        this.vertical = e;
        if (!e) {
            kitui.addClass(this.el, "kitui-menu-horizontal");
        } else {
            kitui.removeClass(this.el, "kitui-menu-horizontal");
        }
    },
    within: function(e) {
        if (kitui.isAncestor(this.el, e.target)) {
            return true;
        }
        for (var t = 0, i = this.items.length; t < i; t++) {
            var n = this.items[t];
            if (n.within(e)) {
                return true;
            }
        }
        return false;
    },
    _initEvents: function() {
        kitui._BindEvents(function() {
            kitui.on(document, "mousedown", this.__OnBodyMouseDown, this);
            kitui_onOne(this.el, "mouseover", this.__OnMouseOver, this);
            kitui.on(window, "resize", this.__OnWindowResize, this);
            if (this._disableContextMenu) {
                kitui_onOne(this.el, "contextmenu", function(e) {
                    e.preventDefault();
                }, this);
            }
            kitui_onOne(this._topArrowEl, "mousedown", this.__OnTopMouseDown, this);
            kitui_onOne(this._bottomArrowEl, "mousedown", this.__OnBottomMouseDown, this);
        }, this);
    },
    destroy: function(e) {
        if (this._topArrowEl) {
            this._topArrowEl.onmousedown = this._bottomArrowEl.onmousedown = null;
        }
        this._popupEl = this.popupEl = this._borderEl = this._innerEl = this._contentEl = null;
        this._topArrowEl = this._bottomArrowEl = null;
        this.owner = null;
        this.window = null;
        kitui.un(document, "mousedown", this.__OnBodyMouseDown, this);
        kitui.un(window, "resize", this.__OnWindowResize, this);
        kitui.Menu.superclass.destroy.call(this, e);
    },
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "kitui-menu";
        this.el.innerHTML = '<div class="kitui-menu-border"><a class="kitui-menu-topArrow" href="#" onclick="return false"></a><div class="kitui-menu-inner"></div><a class="kitui-menu-bottomArrow" href="#" onclick="return false"></a></div>';
        this._borderEl = this.el.firstChild;
        this._topArrowEl = this._borderEl.childNodes[0];
        this._bottomArrowEl = this._borderEl.childNodes[2];
        this._innerEl = this._borderEl.childNodes[1];
        this._innerEl.innerHTML = '<div class="kitui-menu-float"></div><div class="kitui-menu-toolbar"></div><div style="clear:both;"></div>';
        this._contentEl = this._innerEl.firstChild;
        this._toolbarEl = this._innerEl.childNodes[1];
        if (false == this.isVertical()) {
            kitui.addClass(this.el, "kitui-menu-horizontal");
        }
    },
    set: function(e) {
        if ("string" == typeof e) {
            return this;
        }
        var t = e.url;
        delete e.url;
        if (e.imgPath) {
            this.setImgPath(e.imgPath);
        }
        delete e.imgPath;
        this.ownerItem = e.ownerItem;
        delete e.ownerItem;
        kitui.Menu.superclass.set.call(this, e);
        if (t) {
            this.setUrl(t);
        }
        return this;
    },
    getbyName: function(e) {
        for (var t = 0, i = this.items.length; t < i; t++) {
            var n = this.items[t];
            if (n.name == e) {
                return n;
            }
            if (n.menu) {
                var s = n.menu.getbyName(e);
                if (s) {
                    return s;
                }
            }
        }
        return null;
    }
});

kitui.regClass(kitui.Menu, "menu");

kitui.MenuBar = function() {
    kitui.MenuBar.superclass.constructor.apply(this, arguments);
};

kitui.extend(kitui.MenuBar, kitui.Menu, {
    uiCls: "kitui-menubar",
    vertical: false,
    setVertical: function() {
        this.vertical = false;
    }
});

kitui.regClass(kitui.MenuBar, "menubar");

kitui.ContextMenu = function() {
    kitui.ContextMenu.superclass.constructor.apply(this, arguments);
};

kitui.extend(kitui.ContextMenu, kitui.Menu, {
    uiCls: "kitui-contextmenu",
    vertical: true,
    visible: false,
    _disableContextMenu: true,
    setVertical: function() {
        this.vertical = true;
    }
});

kitui.regClass(kitui.ContextMenu, "contextmenu");

///<jscompress sourcefile="jquery.menuitem.js" />
kitui.MenuItem = function() {
    kitui.MenuItem.superclass.constructor.apply(this, arguments);
};

kitui.extend(kitui.MenuItem, kitui.Control, {
    text: "",
    iconCls: "",
    iconStyle: "",
    iconPosition: "left",
    img: "",
    showIcon: true,
    showAllow: true,
    checked: false,
    checkOnClick: false,
    groupName: "",
    _hoverCls: "kitui-menuitem-hover",
    _pressedCls: "kitui-menuitem-pressed",
    _checkedCls: "kitui-menuitem-checked",
    _clearBorder: false,
    menu: null,
    uiCls: "kitui-menuitem",
    _inputEventsInited: false
});

kitui.copyTo(kitui.MenuItem.prototype, {
    getAttrs: function(e) {
        var t = kitui.MenuItem.superclass.getAttrs.call(this, e);
        jQuery(e);
        t.text = e.innerHTML;
        kitui._ParseString(e, t, [ "text", "iconCls", "iconStyle", "iconPosition", "groupName", "onclick", "oncheckedchanged" ]);
        kitui._ParseBool(e, t, [ "checkOnClick", "checked" ]);
        return t;
    },
    onCheckedChanged: function(e, t) {
        this.on("checkedchanged", e, t);
    },
    onClick: function(e, t) {
        this.on("click", e, t);
    },
    __OnMouseOut: function() {
        kitui.removeClass(this.el, this._hoverCls);
    },
    __OnMouseOver: function() {
        if (this.isReadOnly()) {
            return;
        }
        this._initInputEvents();
        kitui.addClass(this.el, this._hoverCls);
        this.el.title = this.text;
        if (this._textEl.scrollWidth > this._textEl.clientWidth) {
            this.el.title = this.text;
        } else {
            this.el.title = "";
        }
        if (this.ownerMenu) {
            if (true == this.ownerMenu.isVertical()) {
                this.ownerMenu.showItemMenu(this);
            } else {
                if (this.ownerMenu.hasShowItemMenu()) {
                    this.ownerMenu.showItemMenu(this);
                }
            }
        }
    },
    __OnMouseUp: function() {
        if (this.isReadOnly()) {
            return;
        }
        if (this.ownerMenu) {
            var e = this;
            setTimeout(function() {
                if (e.isDisplay()) {
                    e.ownerMenu.showItemMenu(e);
                }
            }, 1);
        }
    },
    oOOoOo: function(e) {
        if (this.isReadOnly()) {
            return;
        }
        if (this.checkOnClick) {
            if (this.ownerMenu && this.groupName) {
                var t = this.ownerMenu.getGroupItems(this.groupName);
                if (t.length > 0) {
                    if (false == this.checked) {
                        for (var i = 0, n = t.length; i < n; i++) {
                            var s = t[i];
                            if (s != this) {
                                s.setChecked(false);
                            }
                        }
                        this.setChecked(true);
                    }
                } else {
                    this.setChecked(!this.checked);
                }
            } else {
                this.setChecked(!this.checked);
            }
        }
        this.fire("click");
        var o = this.getTopMenu();
        if (o) {
            o._OnItemClick(this, e);
        }
    },
    getTopMenu: function() {
        if (this.ownerMenu) {
            if (this.ownerMenu.ownerItem) {
                return this.ownerMenu.ownerItem.getTopMenu();
            } else {
                return this.ownerMenu;
            }
        }
        return null;
    },
    __OnItemsChanged: function() {
        this.doUpdate();
    },
    hide: function() {
        this.hideMenu();
        this.setVisible(false);
    },
    hideMenu: function() {
        if (this.menu) {
            this.menu.hide();
        }
    },
    showMenu: function() {
        if (this.menu && false == this.menu.isDisplay()) {
            this.menu.setHideAction("outerclick");
            var e = {
                xAlign: "outright",
                yAlign: "top",
                outXAlign: "outleft",
                outYAlign: "below",
                popupCls: "kitui-menu-popup"
            };
            if (this.ownerMenu && false == this.ownerMenu.vertical) {
                e.xAlign = "left";
                e.yAlign = "below";
                e.outXAlign = null;
            }
            this.menu.showAtEl(this.el, e);
            this.menu.addCls("kitui-menu-open");
        }
    },
    getMenu: function() {
        return this.menu;
    },
    setMenu: function(e) {
        if (kitui.isArray(e)) {
            e = {
                type: "menu",
                items: e
            };
        }
        if (this.menu !== e) {
            e.ownerItem = this;
            this.menu = kitui.getAndCreate(e);
            this.menu.hide();
            this.menu.ownerItem = this;
            this.doUpdate();
            this.menu.on("itemschanged", this.__OnItemsChanged, this);
        }
    },
    setChildren: function(e) {
        this.setMenu(e);
    },
    getGroupName: function() {
        return this.groupName;
    },
    setGroupName: function(e) {
        if (this.groupName != e) {
            this.groupName = e;
        }
    },
    getChecked: function() {
        return this.checked;
    },
    setChecked: function(e) {
        if (this.checked != e) {
            this.checked = e;
            this.doUpdate();
            this.fire("checkedchanged");
        }
    },
    getCheckOnClick: function() {
        return this.checkOnClick;
    },
    setCheckOnClick: function(e) {
        this.checkOnClick = e;
        if (e) {
            kitui.addClass(this.el, "kitui-menuitem-showcheck");
        } else {
            kitui.removeClass(this.el, "kitui-menuitem-showcheck");
        }
        this.doUpdate();
    },
    getIconPosition: function() {
        return this.iconPosition;
    },
    setIconPosition: function(e) {
        this.iconPosition = e;
        this._doUpdateIcon();
    },
    getIconStyle: function() {
        return this.iconStyle;
    },
    setIconStyle: function(e) {
        this.iconStyle = e;
        this._doUpdateIcon();
    },
    getImg: function() {
        return this.img;
    },
    setImg: function(e) {
        this.img = e;
        this._doUpdateIcon();
    },
    getIconCls: function() {
        return this.iconCls;
    },
    setIconCls: function(e) {
        kitui.removeClass(this._iconEl, this.iconCls);
        this.iconCls = e;
        this._doUpdateIcon();
    },
    getText: function() {
        return this.text;
    },
    setText: function(e) {
        this.text = e;
        if (this._textEl) {
            this._textEl.innerHTML = this.text;
        }
    },
    doUpdate: function() {
        if (this._textEl) {
            this._textEl.innerHTML = this.text;
        }
        this._doUpdateIcon();
        if (this.checked) {
            kitui.addClass(this.el, this._checkedCls);
            jQuery(this._iconEl).css({
                "background-image": ""
            });
        } else {
            kitui.removeClass(this.el, this._checkedCls);
        }
        if (this.allowEl) {
            if (this._hasChildMenu()) {
                this.allowEl.style.display = "block";
            } else {
                this.allowEl.style.display = "none";
            }
        }
    },
    _hasChildMenu: function() {
        return this.menu && this.menu.items.length > 0;
    },
    _doUpdateIcon: function() {
        var e = this._getIconImg(), t = !!(this.iconStyle || this.iconCls || this.checkOnClick || e);
        if (this._iconEl) {
            kitui.setStyle(this._iconEl, this.iconStyle);
            kitui.addClass(this._iconEl, this.iconCls);
            if (e && !this.checked) {
                var i = "background-image:url(" + e + ")";
                kitui.setStyle(this._iconEl, i);
            }
            if (this.checked) {
                jQuery(this._iconEl).css({
                    "background-image": ""
                });
            }
            this._iconEl.style.display = t ? "block" : "none";
        }
        if ("top" == this.iconPosition) {
            kitui.addClass(this.el, "kitui-menuitem-icontop");
        } else {
            kitui.removeClass(this.el, "kitui-menuitem-icontop");
        }
    },
    _getIconImg: function() {
        return this.img && this.getTopMenu() ? this.getTopMenu().imgPath + this.img : this.img;
    },
    within: function(e) {
        if (kitui.isAncestor(this.el, e.target)) {
            return true;
        }
        if (this.menu && this.menu.within(e)) {
            return true;
        }
        return false;
    },
    destroy: function(e) {
        if (this.el) {
            this.el.onmouseover = null;
        }
        this.menu = this._innerEl = this._iconEl = this._textEl = this.allowEl = null;
        kitui.MenuItem.superclass.destroy.call(this, e);
    },
    _initInputEvents: function() {
        if (this._inputEventsInited) {
            return;
        }
        this._inputEventsInited = true;
        kitui_onOne(this.el, "click", this.oOOoOo, this);
        kitui_onOne(this.el, "mouseup", this.__OnMouseUp, this);
        kitui_onOne(this.el, "mouseout", this.__OnMouseOut, this);
    },
    _initEvents: function() {
        kitui._BindEvents(function() {
            kitui_onOne(this.el, "mouseover", this.__OnMouseOver, this);
        }, this);
    },
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "kitui-menuitem";
        this.el.innerHTML = '<div class="kitui-menuitem-inner"><div class="kitui-menuitem-icon"></div><div class="kitui-menuitem-text"></div><div class="kitui-menuitem-allow"></div></div>';
        this._innerEl = this.el.firstChild;
        this._iconEl = this._innerEl.firstChild;
        this._textEl = this._innerEl.childNodes[1];
        this.allowEl = this._innerEl.lastChild;
    },
    set: function(e) {
        if ("string" == typeof e) {
            return this;
        }
        this.ownerMenu = e.ownerMenu;
        delete e.ownerMenu;
        kitui.MenuItem.superclass.set.call(this, e);
        return this;
    }
});

kitui.regClass(kitui.MenuItem, "menuitem");
///<jscompress sourcefile="jquery.date.js" />
(function($) {
var DAY_MS = 864e5, HOUR_MS = 36e5, MINUTE_MS = 6e4;

	kitui.copyTo(kitui, {
	    clearTime: function(a) {
	        if (!a) {
	            return null;
	        }
	        return new Date(a.getFullYear(), a.getMonth(), a.getDate());
	    },
	    maxTime: function(a) {
	        if (!a) {
	            return null;
	        }
	        return new Date(a.getFullYear(), a.getMonth(), a.getDate(), 23, 59, 59);
	    },
	    cloneDate: function(a) {
	        if (!a) {
	            return null;
	        }
	        return new Date(a.getTime());
	    },
	    addDate: function(b, a, c) {
	        if (!c) {
	            c = "D";
	        }
	        b = new Date(b.getTime());
	        switch (c.toUpperCase()) {
	          case "Y":
	            b.setFullYear(b.getFullYear() + a);
	            break;

	          case "MO":
	            b.setMonth(b.getMonth() + a);
	            break;

	          case "D":
	            b.setDate(b.getDate() + a);
	            break;

	          case "H":
	            b.setHours(b.getHours() + a);
	            break;

	          case "M":
	            b.setMinutes(b.getMinutes() + a);
	            break;

	          case "S":
	            b.setSeconds(b.getSeconds() + a);
	            break;

	          case "MS":
	            b.setMilliseconds(b.getMilliseconds() + a);
	            break;
	        }
	        return b;
	    },
	    getWeek: function(f, d, h) {
	        d += 1;
	        var i = Math.floor((14 - d) / 12);
	        var g = f + 4800 - i;
	        var c = d + 12 * i - 3;
	        var j = h + Math.floor((153 * c + 2) / 5) + 365 * g + Math.floor(g / 4) - Math.floor(g / 100) + Math.floor(g / 400) - 32045;
	        var k = (j + 31741 - j % 7) % 146097 % 36524 % 1461;
	        var e = Math.floor(k / 1460);
	        var b = (k - e) % 365 + e;
	        NumberOfWeek = Math.floor(b / 7) + 1;
	        return NumberOfWeek;
	    },
	    getWeekStartDate: function(c, e) {
	        if (!e) {
	            e = 0;
	        }
	        if (e > 6 || e < 0) {
	            throw new Error("out of weekday");
	        }
	        var a = c.getDay();
	        var b = e - a;
	        if (a < e) {
	            b -= 7;
	        }
	        var f = new Date(c.getFullYear(), c.getMonth(), c.getDate() + b);
	        return f;
	    },
	    getShortWeek: function(a) {
	        var b = this.dateInfo.daysShort;
	        return b[a];
	    },
	    getLongWeek: function(a) {
	        var b = this.dateInfo.daysLong;
	        return b[a];
	    },
	    getShortMonth: function(b) {
	        var a = this.dateInfo.monthsShort;
	        return a[b];
	    },
	    getLongMonth: function(b) {
	        var a = this.dateInfo.monthsLong;
	        return a[b];
	    },
	    dateInfo: {
	        monthsLong: [ "January", "Febraury", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
	        monthsShort: [ "1月", "2月", "3月", "4月", "5月", "6月", "7月", "8月", "9月", "10月", "11月", "12月" ],
	        daysLong: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
	        daysShort: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ],
	        quarterLong: [ "Q1", "Q2", "Q3", "Q4" ],
	        quarterShort: [ "Q1", "Q2", "Q3", "Q4" ],
	        halfYearLong: [ "first half", "second half" ],
	        patterns: {
	            d: "M/d/yyyy",
	            D: "dddd, MMMM dd, yyyy",
	            f: "dddd, MMMM dd, yyyy H:mm tt",
	            F: "dddd, MMMM dd, yyyy H:mm:ss tt",
	            g: "M/d/yyyy H:mm tt",
	            G: "M/d/yyyy H:mm:ss tt",
	            m: "MMMM dd",
	            o: "yyyy-MM-ddTHH:mm:ss.fff",
	            s: "yyyy-MM-ddTHH:mm:ss",
	            t: "H:mm tt",
	            T: "H:mm:ss tt",
	            U: "dddd, MMMM dd, yyyy HH:mm:ss tt",
	            y: "MMM, yyyy"
	        },
	        tt: {
	            AM: "AM",
	            PM: "PM"
	        },
	        ten: {
	            Early: "Early",
	            Mid: "Mid",
	            Late: "Late"
	        },
	        today: "Today",
	        clockType: 24
	    }
	});
	
	Date.prototype.getHalfYear = function() {
	    if (!this.getMonth) {
	        return null;
	    }
	    var a = this.getMonth();
	    if (a < 6) {
	        return 0;
	    }
	    return 1;
	};
	
	Date.prototype.getQuarter = function() {
	    if (!this.getMonth) {
	        return null;
	    }
	    var a = this.getMonth();
	    if (a < 3) {
	        return 0;
	    }
	    if (a < 6) {
	        return 1;
	    }
	    if (a < 9) {
	        return 2;
	    }
	    return 3;
	};

	
	
	kitui.formatDate = function(e, r, p) {
	    if (!e || !e.getFullYear || isNaN(e)) {
	        return "";
	    }
	    var b = e.toString();
	    var a = kitui.dateInfo;
	    if (!a) {
	        a = kitui.dateInfo;
	    }
	    if (typeof a !== "undefined") {
	        var j = typeof a.patterns[r] !== "undefined" ? a.patterns[r] : r;
	        var k = e.getFullYear();
	        var i = e.getMonth();
	        var l = e.getDate();
	        if (r == "yyyy-MM-dd") {
	            i = i + 1 < 10 ? "0" + (i + 1) : i + 1;
	            l = l < 10 ? "0" + l : l;
	            return k + "-" + i + "-" + l;
	        }
	        if (r == "MM/dd/yyyy") {
	            i = i + 1 < 10 ? "0" + (i + 1) : i + 1;
	            l = l < 10 ? "0" + l : l;
	            return i + "/" + l + "/" + k;
	        }
	        b = j.replace(/yyyy/g, k);
	        b = b.replace(/yy/g, (k + "").substring(2));
	        var o = e.getHalfYear();
	        b = b.replace(/hy/g, a.halfYearLong[o]);
	        var c = e.getQuarter();
	        b = b.replace(/Q/g, a.quarterLong[c]);
	        b = b.replace(/q/g, a.quarterShort[c]);
	        b = b.replace(/MMMM/g, a.monthsLong[i].escapeDateTimeTokens());
	        b = b.replace(/MMM/g, a.monthsShort[i].escapeDateTimeTokens());
	        b = b.replace(/MM/g, i + 1 < 10 ? "0" + (i + 1) : i + 1);
	        b = b.replace(/(\\)?M/g, function(t, s) {
	            return s ? t : i + 1;
	        });
	        var d = e.getDay();
	        b = b.replace(/dddd/g, a.daysLong[d].escapeDateTimeTokens());
	        b = b.replace(/ddd/g, a.daysShort[d].escapeDateTimeTokens());
	        b = b.replace(/dd/g, l < 10 ? "0" + l : l);
	        b = b.replace(/(\\)?d/g, function(t, s) {
	            return s ? t : l;
	        });
	        var g = e.getHours();
	        var n = g > 12 ? g - 12 : g;
	        if (a.clockType == 12) {
	            if (g > 12) {
	                g -= 12;
	            }
	        }
	        b = b.replace(/HH/g, g < 10 ? "0" + g : g);
	        b = b.replace(/(\\)?H/g, function(t, s) {
	            return s ? t : g;
	        });
	        b = b.replace(/hh/g, n < 10 ? "0" + n : n);
	        b = b.replace(/(\\)?h/g, function(t, s) {
	            return s ? t : n;
	        });
	        var f = e.getMinutes();
	        b = b.replace(/mm/g, f < 10 ? "0" + f : f);
	        b = b.replace(/(\\)?m/g, function(t, s) {
	            return s ? t : f;
	        });
	        var q = e.getSeconds();
	        b = b.replace(/ss/g, q < 10 ? "0" + q : q);
	        b = b.replace(/(\\)?s/g, function(t, s) {
	            return s ? t : q;
	        });
	        b = b.replace(/fff/g, e.getMilliseconds());
	        b = b.replace(/tt/g, e.getHours() > 12 || e.getHours() == 0 ? a.tt.PM : a.tt.AM);
	        var e = e.getDate();
	        var h = "";
	        if (e <= 10) {
	            h = a.ten.Early;
	        } else {
	            if (e <= 20) {
	                h = a.ten.Mid;
	            } else {
	                h = a.ten.Late;
	            }
	        }
	        b = b.replace(/ten/g, h);
	    }
	    return b.replace(/\\/g, "");
	};
	
	String.prototype.escapeDateTimeTokens = function() {
	    return this.replace(/([dMyHmsft])/g, "\\$1");
	};
	
	kitui.fixDate = function(b, a) {
	    if (+b) {
	        while (b.getDate() != a.getDate()) {
	            b.setTime(+b + (b < a ? 1 : -1) * HOUR_MS);
	        }
	    }
	};
	
	kitui.parseDate = function(s, ignoreTimezone) {
	    try {
	        var d = eval(s);
	        if (d && d.getFullYear) {
	            return d;
	        }
	    } catch (ex) {}
	    if ("object" == typeof s) {
	        return isNaN(s) ? null : s;
	    }
	    if ("number" == typeof s) {
	        d = new Date(1e3 * s);
	        if (d.getTime() != s) {
	            return null;
	        }
	        return isNaN(d) ? null : d;
	    }
	    if ("string" == typeof s) {
	        m = s.match(/^([0-9]{4})([0-9]{2})([0-9]{0,2})$/);
	        if (m) {
	            var date = new Date(parseInt(m[1], 10), parseInt(m[2], 10) - 1);
	            if (m[3]) {
	                date.setDate(m[3]);
	            }
	            return date;
	        }
	        m = s.match(/^([0-9]{4}).([0-9]*)$/);
	        if (m) {
	            date = new Date(m[1], m[2] - 1);
	            return date;
	        }
	        if (s.match(/^\d+(\.\d+)?$/)) {
	            d = new Date(1e3 * parseFloat(s));
	            if (d.getTime() != s) {
	                return null;
	            } else {
	                return d;
	            }
	        }
	        if (void 0 === ignoreTimezone) {
	            ignoreTimezone = true;
	        }
	        d = kitui.parseISO8601(s, ignoreTimezone) || (s ? new Date(s) : null);
	        return isNaN(d) ? null : d;
	    }
	    return null;
	};

	kitui.parseISO8601 = function(e, t) {
	    var i = e.match(/^([0-9]{4})([-\/]([0-9]{1,2})([-\/]([0-9]{1,2})([T ]([0-9]{1,2}):([0-9]{1,2})(:([0-9]{1,2})(\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:?([0-9]{2}))?))?)?)?)?$/);
	    if (!i) {
	        i = e.match(/^([0-9]{4})[-\/]([0-9]{2})[-\/]([0-9]{2})[T ]([0-9]{1,2})/);
	        if (i) {
	            var n = new Date(i[1], i[2] - 1, i[3], i[4]);
	            return n;
	        }
	        i = e.match(/^([0-9]{4}).([0-9]*).([0-9]*)/);
	        if (i) {
	            n = new Date(i[1], i[2] - 1, i[3]);
	            return n;
	        }
	        i = e.match(/^([0-9]{4}).([0-9]*)/);
	        if (i) {
	            n = new Date(i[1], i[2] - 1);
	            return n;
	        }
	        i = e.match(/^([0-9]{2})-([0-9]{2})-([0-9]{4})$/);
	        if (!i) {
	            return null;
	        } else {
	            n = new Date(i[3], i[1] - 1, i[2]);
	            return n;
	        }
	    }
	    n = new Date(i[1], 0, 1);
	    if (t || !i[14]) {
	        var s = new Date(i[1], 0, 1, 9, 0);
	        if (i[3]) {
	            n.setMonth(i[3] - 1);
	            s.setMonth(i[3] - 1);
	        }
	        if (i[5]) {
	            n.setDate(i[5]);
	            s.setDate(i[5]);
	        }
	        kitui.fixDate(n, s);
	        if (i[7]) {
	            n.setHours(i[7]);
	        }
	        if (i[8]) {
	            n.setMinutes(i[8]);
	        }
	        if (i[10]) {
	            n.setSeconds(i[10]);
	        }
	        if (i[12]) {
	            n.setMilliseconds(1e3 * Number("0." + i[12]));
	        }
	        kitui.fixDate(n, s);
	    } else {
	        n.setUTCFullYear(i[1], i[3] ? i[3] - 1 : 0, i[5] || 1);
	        n.setUTCHours(i[7] || 0, i[8] || 0, i[10] || 0, i[12] ? 1e3 * Number("0." + i[12]) : 0);
	        var o = 60 * Number(i[16]) + (i[18] ? Number(i[18]) : 0);
	        o *= "-" == i[15] ? 1 : -1;
	        n = new Date(+n + 60 * o * 1e3);
	    }
	    return n;
	};
	
	
	kitui.parseTime = function(e, t) {
	    if (!e) {
	        return null;
	    }
	    var i = parseInt(e);
	    if (i == e && t) {
	        n = new Date(0);
	        if ("H" == t[0]) {
	            n.setHours(i);
	        } else {
	            if ("m" == t[0]) {
	                n.setMinutes(i);
	            } else {
	                if ("s" == t[0]) {
	                    n.setSeconds(i);
	                }
	            }
	        }
	        if (isNaN(n)) {
	            n = null;
	        }
	        return n;
	    }
	    var n = kitui.parseDate(e);
	    if (!n) {
	        var s = e.split(":"), o = parseInt(parseFloat(s[0])), r = parseInt(parseFloat(s[1])), l = parseInt(parseFloat(s[2]));
	        if (!isNaN(o) && !isNaN(r) && !isNaN(l)) {
	            n = new Date(0);
	            n.setHours(o);
	            n.setMinutes(r);
	            n.setSeconds(l);
	        }
	        if (!isNaN(o) && ("H" == t || "HH" == t)) {
	            n = new Date(0);
	            n.setHours(o);
	        } else {
	            if (!isNaN(o) && !isNaN(r) && ("H:mm" == t || "HH:mm" == t)) {
	                n = new Date(0);
	                n.setHours(o);
	                n.setMinutes(r);
	            } else {
	                if (!isNaN(o) && !isNaN(r) && "mm:ss" == t) {
	                    n = new Date(0);
	                    n.setMinutes(o);
	                    n.setSeconds(r);
	                }
	            }
	        }
	    }
	    return n;
	};
	
	
	//将字符串转换为日期
    kitui.toDate = function(e,format) {
        pattern = format.replace("yyyy", "(\\~1{4})").replace("yy", "(\\~1{2})")
.replace("MM", "(\\~1{2})").replace("M", "(\\~1{1,2})")
.replace("dd", "(\\~1{2})").replace("d", "(\\~1{1,2})").replace(/~1/g, "d");
 
        var returnDate;
        if (new RegExp(pattern).test(e)) {
            var yPos = format.indexOf("yyyy");
            var mPos = format.indexOf("MM");
            var dPos = format.indexOf("dd");
            if (mPos == -1) mPos = format.indexOf("M");
            if (yPos == -1) yPos = format.indexOf("yy");
            if (dPos == -1) dPos = format.indexOf("d");
            var pos = new Array(yPos + "y", mPos + "m", dPos + "d").sort();
            var data = { y: 0, m: 0, d: 0 };
            var m = e.match(pattern);
            for (var i = 1; i < m.length; i++) {
 
                if (i == 0) return;
                var flag = pos[i - 1].split('')[1];
                data[flag] = m[i];
            };
 
            if (data.y.toString().length == 2) {
                data.y = parseInt("20" + data.y);
            }
            data.m = data.m - 1;
            returnDate = new Date(data.y, data.m, data.d);
        }
        if (returnDate == null || isNaN(returnDate)) returnDate = new Date();
        return returnDate;
    }
	
	
	})(jQuery);
///<jscompress sourcefile="jquery.calendar.js" />
	
(function($) {
	kitui.Calendar = function() {
	    this.viewDate = new Date();
	    this._selectedDates = [];
	    kitui.Calendar.superclass.constructor.apply(this, arguments);
	};
	
	kitui.extend(kitui.Calendar, kitui.Control, {
	    width: 220,
	    height: 160,
	    monthPicker: false,
	    _clearBorder: false,
	    viewDate: null,
	    _selectedDate: "",
	    _selectedDates: [],
	    multiSelect: false,
	    firstDayOfWeek: 0,
	    yesterdayText: "昨天",
	    todayText: "今天",
	    clearText: "清除",
	    okText: "确定",
	    cancelText: "取消",
	    daysShort: [ "日", "一", "二", "三", "四", "五", "六" ],
	    format: "yyyy年MMM",
	    timeFormat: "H:mm",
	    showTime: false,
	    currentTime: true,
	    rows: 1,
	    columns: 1,
	    headerCls: "",
	    bodyCls: "",
	    footerCls: "",
	    _todayCls: "kitui-calendar-today",
	    _weekendCls: "kitui-calendar-weekend",
	    _otherMonthCls: "kitui-calendar-othermonth",
	    _selectedDateCls: "kitui-calendar-selected",
	    showHeader: true,
	    showFooter: true,
	    showWeekNumber: false,
	    showDaysHeader: true,
	    showMonthButtons: true,
	    showYearButtons: true,
	    showTodayButton: true,
	    showClearButton: true,
	    showOkButton: false,
	    showYesterdayButton: false,
	    uiCls: "kitui-calendar",
	    menuEl: null,
	    menuYear: null,
	    menuSelectMonth: null,
	    menuSelectYear: null
	});
	
	kitui.copyTo(kitui.Calendar.prototype, {
	    getAttrs: function(e) {
	        var t = kitui.Calendar.superclass.getAttrs.call(this, e);
	        kitui._ParseString(e, t, [ "viewDate", "rows", "columns", "ondateclick", "ondrawdate", "ondatechanged", "timeFormat", "ontimechanged", "onvaluechanged" ]);
	        kitui._ParseBool(e, t, [ "multiSelect", "showHeader", "showFooter", "showWeekNumber", "showDaysHeader", "showMonthButtons", "showYearButtons", "showTodayButton", "showClearButton", "showYesterdayButton", "showTime", "showOkButton" ]);
	        return t;
	    },
	    _OnValueChanged: function() {
	        this.fire("valuechanged");
	    },
	    __OnKeyDown: function(e) {
	        if (false == this.enabled) {
	            return;
	        }
	        var t = this.getSelectedDate();
	        if (!t) {
	            t = new Date(this.viewDate.getTime());
	        }
	        switch (e.keyCode) {
	          case 27:
	            break;
	
	          case 13:
	            if (t) {
	                this._OnDateClick(t);
	            }
	            return;
	
	          case 37:
	            t = kitui.addDate(t, -1, "D");
	            break;
	
	          case 38:
	            t = kitui.addDate(t, -7, "D");
	            break;
	
	          case 39:
	            t = kitui.addDate(t, 1, "D");
	            break;
	
	          case 40:
	            t = kitui.addDate(t, 7, "D");
	        }
	        var i = this;
	        if (t.getMonth() != i.viewDate.getMonth()) {
	            i.setViewDate(kitui.cloneDate(t));
	            i.focus();
	        }
	        var n = this.getDateEl(t);
	        if (n && kitui.hasClass(n, "kitui-calendar-disabled")) {
	            return;
	        }
	        i.setSelectedDate(t);
	        if (37 == e.keyCode || 38 == e.keyCode || 39 == e.keyCode || 40 == e.keyCode) {
	            e.preventDefault();
	        }
	    },
	    __OnTimeChanged: function() {
	        this.fire("timechanged");
	        this._OnValueChanged();
	    },
	    __OnMouseDown: function(e) {
	        if (false == this.enabled) {
	            return;
	        }
	        var t = kitui.findParent(e.target, "kitui-calendar-date");
	        if (t && !kitui.hasClass(t, "kitui-calendar-disabled")) {
	            var i = t.id.split("$"), n = parseInt(i[i.length - 1]);
	            if (-1 == n) {
	                return;
	            }
	            var s = new Date(n);
	            this.setSelectedDate(s);
	        }
	    },
	    ___OnClick: function(e) {
	        var t = this.viewDate;
	        if (false == this.enabled) {
	            return;
	        }
	        var i = e.target, n = kitui.findParent(e.target, "kitui-calendar-title");
	        if (kitui.findParent(i, "kitui-calendar-monthNext")) {
	            t.setDate(1);
	            t.setMonth(t.getMonth() + 1);
	            this.setViewDate(t);
	        } else {
	            if (kitui.findParent(i, "kitui-calendar-yearNext")) {
	                t.setDate(1);
	                t.setFullYear(t.getFullYear() + 1);
	                this.setViewDate(t);
	            } else {
	                if (kitui.findParent(i, "kitui-calendar-monthPrev")) {
	                    t.setMonth(t.getMonth() - 1);
	                    this.setViewDate(t);
	                } else {
	                    if (kitui.findParent(i, "kitui-calendar-yearPrev")) {
	                        t.setFullYear(t.getFullYear() - 1);
	                        this.setViewDate(t);
	                    } else {
	                        if (kitui.findParent(i, "kitui-calendar-tadayButton")) {
	                            var s = !!kitui.findParent(i, "yesterday"), o = new Date();
	                            if (s) {
	                                o.setDate(o.getDate() - 1);
	                            }
	                            this.setViewDate(o);
	                            this.setSelectedDate(o);
	                            if (this.currentTime) {
	                                var r = new Date();
	                                this.setTime(r);
	                            }
	                            this._OnDateClick(o, "today");
	                        } else {
	                            if (kitui.findParent(i, "kitui-calendar-clearButton")) {
	                                this.setSelectedDate(null);
	                                this.setTime(null);
	                                this._OnDateClick(null, "clear");
	                            } else {
	                                if (kitui.findParent(i, "kitui-calendar-okButton")) {
	                                    this._OnDateClick(null, "ok");
	                                } else {
	                                    if (n) {
	                                        this.showMenu();
	                                    }
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	        }
	        var l = kitui.findParent(e.target, "kitui-calendar-date");
	        if (l && !kitui.hasClass(l, "kitui-calendar-disabled")) {
	            var a = l.id.split("$"), h = parseInt(a[a.length - 1]);
	            if (-1 == h) {
	                return;
	            }
	            var u = new Date(h);
	            this._OnDateClick(u);
	        }
	    },
	    __OnBodyMenuMouseDown: function(e) {
	        if (!kitui.findParent(e.target, "kitui-calendar-menu")) {
	            if (!kitui.findParent(e.target, "kitui-monthpicker")) {
	                this.hideMenu();
	            }
	        }
	    },
	    __getMonthYear: function() {
	        var e = new Date(this._menuselectYear, this._menuselectMonth, 1);
	        if (this.monthPicker) {
	            this.setViewDate(e);
	            this.setSelectedDate(e);
	            this._OnDateClick(e);
	        } else {
	            this.setViewDate(e);
	            this.hideMenu();
	        }
	    },
	    __OnMenuDblClick: function(e) {
	        var t = kitui.findParent(e.target, "kitui-calendar-menu-year"), i = kitui.findParent(e.target, "kitui-calendar-menu-month"), n = kitui.findParent(e.target, "kitui-calendar-date ");
	        if (!t && !i && !n) {
	            return;
	        }
	        if (this.monthPicker) {
	            if (!i && !t) {
	                return;
	            }
	        }
	        this.__getMonthYear();
	    },
	    __OnMenuClick: function(e) {
	        var t = this, i = e.target;
	        function n() {
	            setTimeout(function() {
	                t.updateMenu();
	            }, 30);
	        }
	        var s = kitui.findParent(i, "kitui-calendar-menu-month"), o = kitui.findParent(i, "kitui-calendar-menu-year");
	        if (s) {
	            this._menuselectMonth = parseInt(s.id);
	            n();
	        } else {
	            if (o) {
	                this._menuselectYear = parseInt(o.id);
	                n();
	            } else {
	                if (kitui.findParent(i, "kitui-calendar-menu-prevYear")) {
	                    this.menuYear = this.menuYear - 1;
	                    this.menuYear = 10 * parseInt(this.menuYear / 10);
	                    n();
	                } else {
	                    if (kitui.findParent(i, "kitui-calendar-menu-nextYear")) {
	                        this.menuYear = this.menuYear + 11;
	                        this.menuYear = 10 * parseInt(this.menuYear / 10);
	                        n();
	                    } else {
	                        if (kitui.findParent(i, "kitui-calendar-okButton")) {
	                            this.__getMonthYear();
	                        } else {
	                            if (kitui.findParent(i, "kitui-calendar-cancelButton")) {
	                                if (this.monthPicker) {
	                                    this._OnDateClick(null, "cancel");
	                                } else {
	                                    this.hideMenu();
	                                }
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    },
	    updateMenu: function() {
	        if (!this.menuEl) {
	            return;
	        }
	        for (var e = '<div class="kitui-calendar-menu-months">', t = 0, i = 12; t < i; t++) {
	            var n = kitui.getShortMonth(t), s = "";
	            if (this._menuselectMonth == t) {
	                s = "kitui-calendar-menu-selected";
	            }
	            e += '<a id="' + t + '" class="kitui-calendar-menu-month ' + s + '" href="javascript:void(0);" hideFocus onclick="return false">' + n + "</a>";
	        }
	        e += '<div style="clear:both;"></div></div>';
	        e += '<div class="kitui-calendar-menu-years">';
	        for (t = this.menuYear, i = this.menuYear + 10; t < i; t++) {
	            n = t, s = "";
	            if (this._menuselectYear == t) {
	                s = "kitui-calendar-menu-selected";
	            }
	            e += '<a id="' + t + '" class="kitui-calendar-menu-year ' + s + '" href="javascript:void(0);" hideFocus onclick="return false">' + n + "</a>";
	        }
	        e += '<div class="kitui-calendar-menu-prevYear"></div><div class="kitui-calendar-menu-nextYear"></div><div style="clear:both;"></div></div>';
	        e += '<div class="kitui-calendar-footer"><span class="kitui-calendar-okButton">' + this.okText + '</span><span class="kitui-calendar-footerSpace"></span><span class="kitui-calendar-cancelButton">' + this.cancelText + '</span></div><div style="clear:both;"></div>';
	        this.menuEl.innerHTML = e;
	    },
	    hideMenu: function() {
	        if (this.menuEl) {
	            kitui.un(this.menuEl, "click", this.__OnMenuClick, this);
	            kitui.un(document, "mousedown", this.__OnBodyMenuMouseDown, this);
	            jQuery(this.menuEl).remove();
	            this.menuEl = null;
	        }
	    },
	    showMenu: function() {
	        this.hideMenu();
	        this.menuYear = 10 * parseInt(this.viewDate.getFullYear() / 10);
	        this._menuselectMonth = this.viewDate.getMonth();
	        this._menuselectYear = this.viewDate.getFullYear();
	        var e = '<div class="kitui-calendar-menu"></div>';
	        this.menuEl = kitui.append(document.body, e);
	        this.updateMenu(this.viewDate);
	        var t = this.getBox();
	        if ("0px" == this.el.style.borderWidth) {
	            this.menuEl.style.border = "0";
	        }
	        kitui.setBox(this.menuEl, t);
	        kitui.on(this.menuEl, "click", this.__OnMenuClick, this);
	        kitui.on(this.menuEl, "dblclick", this.__OnMenuDblClick, this);
	        kitui.on(document, "mousedown", this.__OnBodyMenuMouseDown, this);
	    },
	    _tryShowMenu: function() {
	        if (!this.menuEl) {
	            var e = this;
	            setTimeout(function() {
	                e.showMenu();
	            }, 1);
	        }
	    },
	    _OnDateClick: function(e, t) {
	        this.hideMenu();
	        var i = {
	            date: e,
	            action: t
	        };
	        this.fire("dateclick", i);
	        this._OnValueChanged();
	    },
	    _OnDrawDate: function(e) {
	        var t = {
	            date: e,
	            dateCls: "",
	            dateStyle: "",
	            dateHtml: e.getDate(),
	            allowSelect: true
	        };
	        this.fire("drawdate", t);
	        return t;
	    },
	    _CreateView: function(e, t, i) {
	        var n = e.getMonth(), s = this.getFirstDateOfMonth(e), o = new Date(s.getTime()), r = kitui.clearTime(new Date()).getTime(), l = (this.value ? kitui.clearTime(this.value).getTime() : -1, 
	        this.rows > 1 || this.columns > 1), a = "";
	        a += '<table class="kitui-calendar-view" border="0" cellpadding="0" cellspacing="0">';
	        if (this.showHeader) {
	            a += '<tr ><td colSpan="10" class="kitui-calendar-header"><div class="kitui-calendar-headerInner">';
	            if (0 == t && 0 == i) {
	                a += '<div class="kitui-calendar-prev">';
	                if (this.showYearButtons) {
	                    a += '<span class="kitui-calendar-yearPrev"></span>';
	                }
	                if (this.showMonthButtons) {
	                    a += '<span class="kitui-calendar-monthPrev"></span>';
	                }
	                a += "</div>";
	            }
	            if (0 == t && i == this.columns - 1) {
	                a += '<div class="kitui-calendar-next">';
	                if (this.showMonthButtons) {
	                    a += '<span class="kitui-calendar-monthNext"></span>';
	                }
	                if (this.showYearButtons) {
	                    a += '<span class="kitui-calendar-yearNext"></span>';
	                }
	                a += "</div>";
	            }
	            a += '<span class="kitui-calendar-title">' + kitui.formatDate(e, this.format);
	            a += "</div></td></tr>";
	        }
	        if (this.showDaysHeader) {
	            a += '<tr class="kitui-calendar-daysheader"><td class="kitui-calendar-space"></td>';
	            if (this.showWeekNumber) {
	                a += '<td sclass="kitui-calendar-weeknumber"></td>';
	            }
	            for (var h = this.firstDayOfWeek, u = h + 7; h < u; h++) {
	                var d = this.getShortWeek(h);
	                a += '<td yAlign="middle">';
	                a += d;
	                a += "</td>";
	                s = new Date(s.getFullYear(), s.getMonth(), s.getDate() + 1);
	            }
	            a += '<td class="kitui-calendar-space"></td></tr>';
	        }
	        s = o;
	        for (var c = 0; c <= 5; c++) {
	            a += '<tr class="kitui-calendar-days"><td class="kitui-calendar-space"></td>';
	            if (this.showWeekNumber) {
	                var f = kitui.getWeek(s.getFullYear(), s.getMonth() + 1, s.getDate());
	                if (1 == String(f).length) {
	                    f = "0" + f;
	                }
	                a += '<td class="kitui-calendar-weeknumber" yAlign="middle">' + f + "</td>";
	            }
	            for (h = this.firstDayOfWeek, u = h + 7; h < u; h++) {
	                var m = this.isWeekend(s), p = kitui.clearTime(s).getTime(), g = p == r, _ = this.isSelectedDate(s);
	                if (n != s.getMonth() && l) {
	                    p = -1;
	                }
	                var v = this._OnDrawDate(s);
	                a += '<td yAlign="middle" id="';
	                a += this.uid + "$" + p;
	                a += '" class="kitui-calendar-date ';
	                if (m) {
	                    a += " kitui-calendar-weekend ";
	                }
	                if (false == v.allowSelect) {
	                    a += " kitui-calendar-disabled ";
	                }
	                if (n != s.getMonth() && l) {
	                    ;
	                } else {
	                    if (_) {
	                        a += " " + this._selectedDateCls + " ";
	                    }
	                    if (g) {
	                        a += " kitui-calendar-today ";
	                    }
	                }
	                if (n != s.getMonth()) {
	                    a += " kitui-calendar-othermonth ";
	                }
	                if (v.dateCls) {
	                    a += " " + v.dateCls;
	                }
	                a += '" style="';
	                if (v.dateStyle) {
	                    a += v.dateStyle;
	                }
	                a += '">';
	                if (n != s.getMonth() && l) {
	                    ;
	                } else {
	                    a += v.dateHtml;
	                }
	                a += "</td>";
	                s = new Date(s.getFullYear(), s.getMonth(), s.getDate() + 1);
	            }
	            a += '<td class="kitui-calendar-space"></td></tr>';
	        }
	        a += '<tr class="kitui-calendar-bottom" colSpan="10"><td ></td></tr>';
	        a += "</table>";
	        return a;
	    },
	    doUpdate: function() {
	        if (!this._allowUpdate) {
	            return;
	        }
	        for (var e = new Date(this.viewDate.getTime()), t = (1 == this.rows && 1 == this.columns, 
	        100 / this.rows), i = '<table class="kitui-calendar-views" border="0" cellpadding="0" cellspacing="0">', n = 0, s = this.rows; n < s; n++) {
	            i += "<tr >";
	            for (var o = 0, r = this.columns; o < r; o++) {
	                i += '<td style="height:' + t + '%">';
	                i += this._CreateView(e, n, o);
	                i += "</td>";
	                e = new Date(e.getFullYear(), e.getMonth() + 1, 1);
	            }
	            i += "</tr>";
	        }
	        i += "</table>";
	        this._innerEl.innerHTML = i;
	        var l = this.el;
	        setTimeout(function() {
	            kitui.repaint(l);
	        }, 100);
	        this.doLayout();
	    },
	    doLayout: function() {
	        if (!this.canLayout()) {
	            return;
	        }
	        this.timeWrapEl.style.display = this.showTime ? "" : "none";
	        this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
	        this.closeButtonEl.style.display = this.showClearButton ? "" : "none";
	        this.yesterdayButtonEl.style.display = this.showYesterdayButton ? "" : "none";
	        this.okButtonEl.style.display = this.showOkButton ? "" : "none";
	        this.footerSpaceEl.style.display = this.showClearButton && this.showTodayButton ? "" : "none";
	        this._footerEl.style.display = this.showFooter ? "" : "none";
	        var e = this._innerEl.firstChild, t = this.isAutoHeight();
	        if (!t) {
	            e.parentNode.style.height = "100px";
	            h = jQuery(this.el).height();
	            h -= jQuery(this._footerEl).outerHeight();
	            e.parentNode.style.height = h + "px";
	        } else {
	            e.parentNode.style.height = "";
	        }
	        kitui.layout(this._footerEl);
	        if (this.monthPicker) {
	            this._tryShowMenu();
	        }
	    },
	    getTimeFormat: function() {
	        return this.timeFormat;
	    },
	    setTimeFormat: function(e) {
	        if (this.timeFormat != e) {
	            this.timeSpinner.setFormat(e);
	            this.timeFormat = this.timeSpinner.format;
	        }
	    },
	    getShowTime: function() {
	        return this.showTime;
	    },
	    setShowTime: function(e) {
	        if (this.showTime != e) {
	            this.showTime = e;
	            this.timeWrapEl.style.display = this.showTime ? "" : "none";
	            this.doLayout();
	        }
	    },
	    getColumns: function() {
	        return this.columns;
	    },
	    setColumns: function(e) {
	        if (isNaN(e)) {
	            return;
	        }
	        if (e < 1) {
	            e = 1;
	        }
	        this.columns = e;
	        this.doUpdate();
	    },
	    getRows: function() {
	        return this.rows;
	    },
	    setRows: function(e) {
	        if (isNaN(e)) {
	            return;
	        }
	        if (e < 1) {
	            e = 1;
	        }
	        this.rows = e;
	        this.doUpdate();
	    },
	    getMultiSelect: function() {
	        return this.multiSelect;
	    },
	    setMultiSelect: function(e) {
	        this.multiSelect = e;
	        this.doUpdate();
	    },
	    isSelectedDate: function(e) {
	        if (!e || !this._selectedDate) {
	            return false;
	        }
	        return kitui.clearTime(e).getTime() == kitui.clearTime(this._selectedDate).getTime();
	    },
	    getFormValue: function() {
	        var e = this.getValue();
	        if (e) {
	            return kitui.formatDate(e, "yyyy-MM-dd HH:mm:ss");
	        }
	        return "";
	    },
	    getValue: function() {
	        var e = this._selectedDate;
	        if (e) {
	            e = kitui.clearTime(e);
	            if (this.showTime) {
	                var t = this.timeSpinner.getValue();
	                if (t) {
	                    e.setHours(t.getHours());
	                    e.setMinutes(t.getMinutes());
	                    e.setSeconds(t.getSeconds());
	                }
	            }
	        }
	        return e ? e : "";
	    },
	    setValue: function(e) {
	        this.setSelectedDate(e);
	        if (!e) {
	            e = new Date();
	        }
	        this.setTime(e);
	    },
	    getTime: function() {
	        return this.timeSpinner.getFormValue();
	    },
	    setTime: function(e) {
	        this.timeSpinner.setValue(e);
	    },
	    getSelectedDate: function() {
	        return this._selectedDate ? this._selectedDate : "";
	    },
	    setSelectedDates: function(e) {
	        if (!kitui.isArray(e)) {
	            e = [];
	        }
	        this._selectedDates = e;
	        this.doUpdate();
	    },
	    setSelectedDate: function(e) {
	        e = kitui.parseDate(e);
	        if (!kitui.isDate(e)) {
	            e = "";
	        } else {
	            e = new Date(e.getTime());
	        }
	        var t = this.getDateEl(this._selectedDate);
	        if (t) {
	            kitui.removeClass(t, this._selectedDateCls);
	        }
	        this._selectedDate = e;
	        if (this._selectedDate) {
	            this._selectedDate = kitui.cloneDate(this._selectedDate);
	        }
	        t = this.getDateEl(this._selectedDate);
	        if (t) {
	            kitui.addClass(t, this._selectedDateCls);
	        }
	        this.fire("datechanged");
	    },
	    getViewDate: function() {
	        return this.viewDate;
	    },
	    setViewDate: function(e) {
	        e = kitui.parseDate(e);
	        if (!e) {
	            e = new Date();
	        }
	        if (kitui.isDate(e)) {
	            e = new Date(e.getTime());
	        }
	        this.viewDate = e;
	        this.doUpdate();
	    },
	    getShowOkButton: function() {
	        return this.showOkButton;
	    },
	    setShowOkButton: function(e) {
	        this.showOkButton = e;
	        this.okButtonEl.style.display = this.showOkButton ? "" : "none";
	        this.doUpdate();
	    },
	    getShowClearButton: function() {
	        return this.showClearButton;
	    },
	    setShowClearButton: function(e) {
	        this.showClearButton = e;
	        this.closeButtonEl.style.display = this.showClearButton ? "" : "none";
	        this.doUpdate();
	    },
	    getShowYesterdayButton: function() {
	        return this.showYesterdayButton;
	    },
	    setShowYesterdayButton: function(e) {
	        this.showYesterdayButton = e;
	        this.yesterdayButtonEl.style.display = this.showYesterdayButton ? "" : "none";
	        this.doUpdate();
	    },
	    getShowTodayButton: function() {
	        return this.showTodayButton;
	    },
	    setShowTodayButton: function(e) {
	        this.showTodayButton = e;
	        this.todayButtonEl.style.display = this.showTodayButton ? "" : "none";
	        this.doUpdate();
	    },
	    getShowYearButtons: function() {
	        return this.showYearButtons;
	    },
	    setShowYearButtons: function(e) {
	        this.showYearButtons = e;
	        this.doUpdate();
	    },
	    getShowMonthButtons: function() {
	        return this.showMonthButtons;
	    },
	    setShowMonthButtons: function(e) {
	        this.showMonthButtons = e;
	        this.doUpdate();
	    },
	    getShowDaysHeader: function() {
	        return this.showDaysHeader;
	    },
	    setShowDaysHeader: function(e) {
	        this.showDaysHeader = e;
	        this.doUpdate();
	    },
	    getShowWeekNumber: function() {
	        return this.showWeekNumber;
	    },
	    setShowWeekNumber: function(e) {
	        this.showWeekNumber = e;
	        this.doUpdate();
	    },
	    getShowFooter: function() {
	        return this.showFooter;
	    },
	    setShowFooter: function(e) {
	        this.showFooter = e;
	        this.doUpdate();
	    },
	    getShowHeader: function() {
	        return this.showHeader;
	    },
	    setShowHeader: function(e) {
	        this.showHeader = e;
	        this.doUpdate();
	    },
	    within: function(e) {
	        if (kitui.isAncestor(this.el, e.target)) {
	            return true;
	        }
	        if (this.menuEl && kitui.isAncestor(this.menuEl, e.target)) {
	            return true;
	        }
	        return false;
	    },
	    getDateEl: function(e) {
	        if (!e) {
	            return null;
	        }
	        var t = this.uid + "$" + kitui.clearTime(e).getTime();
	        return document.getElementById(t);
	    },
	    _initEvents: function() {
	        if (this.timeSpinner) {
	            this.timeSpinner.on("valuechanged", this.__OnTimeChanged, this);
	        }
	        kitui._BindEvents(function() {
	            kitui.on(this.el, "click", this.___OnClick, this);
	            kitui.on(this.el, "mousedown", this.__OnMouseDown, this);
	            kitui.on(this.el, "keydown", this.__OnKeyDown, this);
	        }, this);
	    },
	    destroy: function(e) {
	        this._innerEl = this._footerEl = this.timeWrapEl = this.todayButtonEl = this.footerSpaceEl = this.closeButtonEl = null;
	        this._focusEl = this.okButtonEl = this.yesterdayButtonEl = null;
	        this.timeSpinner = null;
	        kitui.Calendar.superclass.destroy.call(this, e);
	    },
	    focus: function() {
	        try {
	            this._focusEl.focus();
	        } catch (e) {}
	    },
	    _create: function() {
	        var e = '<tr style="width:100%;"><td style="width:100%;"></td></tr>';
	        e += '<tr ><td><div class="kitui-calendar-footer"><span style="display:inline-block;"><input name="time" class="kitui-timespinner" style="width:80px" format="' + this.timeFormat + '"/><span class="kitui-calendar-footerSpace"></span></span><span class="kitui-calendar-tadayButton">' + this.todayText + '</span><span class="kitui-calendar-footerSpace"></span><span class="kitui-calendar-clearButton">' + this.clearText + '</span><span class="kitui-calendar-okButton">' + this.okText + '</span><a href="#" class="kitui-calendar-focus" style="position:absolute;left:-10px;top:-10px;width:0px;height:0px;outline:none" hideFocus></a></div></td></tr>';
	        var t = '<table class="kitui-calendar" cellpadding="0" cellspacing="0">' + e + "</table>", i = document.createElement("div");
	        i.innerHTML = t;
	        this.el = i.firstChild;
	        var n = (this.el.getElementsByTagName("tr"), this.el.getElementsByTagName("td"));
	        this._innerEl = n[0];
	        this._footerEl = kitui.byClass("kitui-calendar-footer", this.el);
	        this.timeWrapEl = this._footerEl.childNodes[0];
	        this.todayButtonEl = this._footerEl.childNodes[1];
	        this.footerSpaceEl = this._footerEl.childNodes[2];
	        this.closeButtonEl = this._footerEl.childNodes[3];
	        this.okButtonEl = this._footerEl.childNodes[4];
	        this._focusEl = this._footerEl.lastChild;
	        this.yesterdayButtonEl = kitui.after(this.todayButtonEl, '<span class="kitui-calendar-tadayButton yesterday">' + this.yesterdayText + "</span>");
	        kitui.parse(this._footerEl);
	        this.timeSpinner = kitui.getbyName("time", this.el);
	        this.doUpdate();
	    },
	    getShortWeek: function(e) {
	        return this.daysShort[e];
	    },
	    getFirstDateOfMonth: function(e) {
	        var e = new Date(e.getFullYear(), e.getMonth(), 1);
	        return kitui.getWeekStartDate(e, this.firstDayOfWeek);
	    },
	    isWeekend: function(e) {
	        var t = e.getDay();
	        return 0 == t || 6 == t;
	    }
	});
	
	kitui.regClass(kitui.Calendar, "calendar");
})(jQuery);
///<jscompress sourcefile="jquery.outlooktree.js" />
(function($) {
kitui.OutlookTree = function() {
    kitui.OutlookTree.superclass.constructor.apply(this, arguments);
    this.data = [];
};

kitui.extend(kitui.OutlookTree, kitui.OutlookBar, {
    url: "",
    textField: "text",
    iconField: "iconCls",
    urlField: "url",
    resultAsTree: false,
    nodesField: "children",
    idField: "id",
    parentField: "pid",
    style: "width:100%;height:100%;",
    uiCls: "kitui-outlooktree",
    _selected: null,
    expandOnLoad: false,
    showArrow: false,
    showTreeIcon: true,
    expandOnNodeClick: false,
    expandNodeOnLoad: false,
    imgPath: "",
    autoCollapse: true,
    activeIndex: 0
});

kitui.copyTo(kitui.OutlookTree.prototype, {
    __OnDrawNode: function(e) {
        this.fire("drawnode", e);
    },
    __OnNodeSelect: function(e) {
        if (!e.node) {
            return;
        }
        for (var t = 0, i = this._trees.length; t < i; t++) {
            var n = this._trees[t];
            if (n != e.sender) {
                n.selectNode(null);
            }
        }
        var s = {
            node: e.node,
            isLeaf: e.sender.isLeaf(e.node),
            htmlEvent: e.htmlEvent
        };
        this._selected = e.node;
        this.fire("nodeselect", s);
    },
    __OnNodeClick: function(e) {
        var t = {
            node: e.node,
            isLeaf: e.sender.isLeaf(e.node),
            htmlEvent: e.htmlEvent
        };
        this.fire("nodeclick", t);
    },
    __OnNodeMouseDown: function(e) {
        var t = {
            node: e.node,
            isLeaf: e.sender.isLeaf(e.node),
            htmlEvent: e.htmlEvent
        };
        this.fire("nodemousedown", t);
    },
    createNavBarTree: function(e) {
        this._destroyTrees();
        var t = this;
        if (!kitui.isArray(e)) {
            e = [];
        }
        this.data = e;
        for (var i = [], n = 0, s = this.data.length; n < s; n++) {
            var o = this.data[n], r = {};
            r.title = o.text;
            r.iconCls = o.iconCls;
            i.push(r);
            r._children = o[this.nodesField];
        }
        this.setGroups(i);
        this.setActiveIndex(this.activeIndex);
        this._trees = [];
        for (n = 0, s = this.groups.length; n < s; n++) {
            var r = this.groups[n], l = this.getGroupBodyEl(r), e = new kitui.Tree();
            e.set({
                expandOnNodeClick: this.expandOnNodeClick,
                showTreeIcon: this.showTreeIcon,
                showArrow: this.showArrow,
                imgPath: this.imgPath,
                idField: this.idField,
                parentField: this.parentField,
                textField: this.textField,
                expandOnLoad: this.expandNodeOnLoad,
                style: "width:100%;height:auto;border:0;background:none",
                data: r._children,
                onbeforeload: function(e) {
                    e.url = t.url;
                }
            });
            e.render(l);
            e.on("nodeclick", this.__OnNodeClick, this);
            e.on("nodeselect", this.__OnNodeSelect, this);
            e.on("nodemousedown", this.__OnNodeMouseDown, this);
            e.on("drawnode", this.__OnDrawNode, this);
            e.on("beforeexpand", this._handlerTree, this);
            e.on("beforecollapse", this._handlerTree, this);
            e.on("expand", this._handlerTree, this);
            e.on("collapse", this._handlerTree, this);
            e.on("beforeselect", this._handlerTree, this);
            this._trees.push(e);
            delete r._children;
            e._ownerGroup = r;
        }
    },
    getImgPath: function() {
        return this.imgPath;
    },
    setImgPath: function(e) {
        this.imgPath = e;
    },
    getAttrs: function(e) {
        var t = kitui.OutlookTree.superclass.getAttrs.call(this, e);
        t.text = e.innerHTML;
        kitui._ParseString(e, t, [ "url", "textField", "urlField", "idField", "parentField", "nodesField", "iconField", "onnodeclick", "onnodeselect", "onnodemousedown", "ondrawnode", "expandOnLoad", "imgPath", "onbeforenodeexpand", "onnodeexpand", "onbeforenodecollapse", "onnodecollapse", "onload", "onbeforenodeselect" ]);
        kitui._ParseBool(e, t, [ "resultAsTree", "showArrow", "showTreeIcon", "expandOnNodeClick", "expandNodeOnLoad" ]);
        if (t.expandOnLoad) {
            var i = parseInt(t.expandOnLoad);
            if (kitui.isNumber(i)) {
                t.expandOnLoad = i;
            } else {
                t.expandOnLoad = "true" == t.expandOnLoad ? true : false;
            }
        }
        return t;
    },
    _handlerTree: function(e) {
        e.tree = e.sender;
        e.sender = this;
        var t = "node" + e.type;
        if (0 == e.type.indexOf("before")) {
            t = "beforenode" + e.type.replace("before", "");
        }
        this.fire(t, e);
    },
    getExpandNodeOnLoad: function() {
        return this.expandNodeOnLoad;
    },
    setExpandNodeOnLoad: function(e) {
        this.expandNodeOnLoad = e;
    },
    getExpandOnNodeClick: function() {
        return this.expandOnNodeClick;
    },
    setExpandOnNodeClick: function(e) {
        this.expandOnNodeClick = e;
    },
    getShowTreeIcon: function() {
        return this.showTreeIcon;
    },
    setShowTreeIcon: function(e) {
        this.showTreeIcon = e;
    },
    getShowArrow: function() {
        return this.showArrow;
    },
    setShowArrow: function(e) {
        this.showArrow = e;
    },
    getExpandOnLoad: function() {
        return this.expandOnLoad;
    },
    setExpandOnLoad: function(e) {
        this.expandOnLoad = e;
    },
    _getOwnerTree: function(e) {
        if (!e) {
            return;
        }
        for (var t = 0, i = this._trees.length; t < i; t++) {
            var n = this._trees[t];
            if (n.getby_id(e._id)) {
                return n;
            }
        }
    },
    getList: function() {
        for (var e = [], t = 0, i = this._trees.length; t < i; t++) {
            var n = this._trees[t], s = n.getList();
            e.addRange(s);
        }
        return e;
    },
    getNode: function(e) {
        for (var t = 0, i = this._trees.length; t < i; t++) {
            var n = this._trees[t], s = n.getNode(e);
            if (s) {
                return s;
            }
        }
        return null;
    },
    findNodes: function(e, t) {
        var i = [];
        t = t || this;
        for (var n = 0, s = this._trees.length; n < s; n++) {
            var o = this._trees[n], r = o.findNodes(e, t);
            i.addRange(r);
        }
        return i;
    },
    collapseNode: function(e, t) {
        var e = this.getNode(e);
        if (!e) {
            return;
        }
        var i = this._getOwnerTree(e);
        i.collapseNode(e, t);
    },
    expandNode: function(e, t) {
        var e = this.getNode(e);
        if (!e) {
            return;
        }
        var i = this._getOwnerTree(e);
        i.expandNode(e, t);
    },
    expandPath: function(e) {
        e = this.getNode(e);
        if (!e) {
            return;
        }
        var t = this._getOwnerTree(e);
        t.expandPath(e);
        this.expandGroup(t._ownerGroup);
    },
    selectNode: function(e) {
        e = this.getNode(e);
        if (!e) {
            return;
        }
        var t = this._getOwnerTree(e);
        t.selectNode(e);
    },
    isSelectedNode: function(e) {
        e = this.getNode(e);
        if (!e) {
            return false;
        }
        var t = this._getOwnerTree(e);
        if (!t) {
            return false;
        }
        return t.isSelectedNode(e);
    },
    getSelected: function() {
        return this._selected;
    },
    getParentField: function() {
        return this.parentField;
    },
    setParentField: function(e) {
        this.parentField = e;
    },
    getIdField: function() {
        return this.idField;
    },
    setIdField: function(e) {
        this.idField = e;
    },
    getNodesField: function() {
        return this.nodesField;
    },
    setNodesField: function(e) {
        this.nodesField = e;
    },
    getResultAsTree: function() {
        return this.resultAsTree;
    },
    setResultAsTree: function(e) {
        this.resultAsTree = e;
    },
    getUrlField: function() {
        return this.urlField;
    },
    setUrlField: function(e) {
        this.urlField = e;
    },
    getIconField: function() {
        return this.iconField;
    },
    setIconField: function(e) {
        this.iconField = e;
    },
    getTextField: function() {
        return this.textField;
    },
    setTextField: function(e) {
        this.textField = e;
    },
    getUrl: function() {
        return this.url;
    },
    setUrl: function(e) {
        this.url = e;
        this._doLoad();
    },
    getData: function() {
        return this.data;
    },
    setData: function(e) {
        this.load(e);
    },
    load: function(e) {
        if ("string" == typeof e) {
            this.setUrl(e);
        } else {
            var t = kitui.treeToArray(e, this.itemsField, this.idField, this.parentField);
            this._doParseFields(t);
            this.createNavBarTree(e);
        }
    },
    loadList: function(e, t, i) {
        t = t || this.idField;
        i = i || this.parentField;
        this._doParseFields(e);
        var n = kitui.arrayToTree(e, this.nodesField, t, i);
        this.load(n);
    },
    _doLoad: function() {
        var e = [];
        try {
            e = kitui._getResult(this.url, null, null, null, null, this.dataField);
        } catch (t) {
            if (true == mini_debugger) {
                alert("outlooktree json is error.");
            }
        }
        if (this.dataField && !kitui.isArray(e)) {
            e = kitui._getMap(this.dataField, e);
        }
        if (!e) {
            e = [];
        }
        if (false == this.resultAsTree) {
            e = kitui.arrayToTree(e, this.nodesField, this.idField, this.parentField);
        }
        var i = kitui.treeToArray(e, this.nodesField, this.idField, this.parentField);
        this._doParseFields(i);
        this.createNavBarTree(e);
        this.fire("load");
    },
    _doParseFields: function(e) {
        for (var t = 0, i = e.length; t < i; t++) {
            var n = e[t];
            n.text = n[this.textField];
            n.url = n[this.urlField];
            n.iconCls = n[this.iconField];
        }
    },
    _destroyTrees: function(e) {
        if (this._trees) {
            for (var t = this._trees.clone(), i = 0, n = t.length; i < n; i++) {
                var s = t[i];
                s.destroy(e);
            }
            this._trees.length = 0;
        }
    },
    destroy: function(e) {
        this._destroyTrees(e);
        kitui.OutlookTree.superclass.destroy.call(this, e);
    },
    set: function(e) {
        if ("string" == typeof e) {
            return this;
        }
        var t = e.url;
        delete e.url;
        var i = e.activeIndex;
        delete e.activeIndex;
        kitui.OutlookTree.superclass.set.call(this, e);
        if (t) {
            this.setUrl(t);
        }
        if (kitui.isNumber(i)) {
            this.setActiveIndex(i);
        }
        return this;
    }
});

kitui.regClass(kitui.OutlookTree, "outlooktree");
})(jQuery);
///<jscompress sourcefile="jquery.datepicker.js" />
(function($) {
kitui.DatePicker = function() {
    kitui.DatePicker.superclass.constructor.apply(this, arguments);
    kitui.addClass(this.el, "kitui-datepicker");
    this.on("validation", this.__OnValidation, this);
};

kitui.extend(kitui.DatePicker, kitui.PopupEdit, {
    valueFormat: "",
    format: "yyyy-MM-dd",
    maxDate: null,
    minDate: null,
    popupWidth: "",
    viewDate: new Date(),
    showTime: false,
    timeFormat: "H:mm:ss",
    showYesterdayButton: false,
    showTodayButton: true,
    showClearButton: true,
    showOkButton: false,
    valueType: "date",
    uiCls: "kitui-datepicker",
    _monthPicker: false,
    minDateErrorText: "",
    maxDateErrorText: "",
    nullValue: ""
});

kitui.copyTo(kitui.DatePicker.prototype, {
    getAttrs: function(e) {
        var t = kitui.DatePicker.superclass.getAttrs.call(this, e);
        kitui._ParseString(e, t, [ "format", "viewDate", "timeFormat", "ondrawdate", "minDate", "maxDate", "valueType", "valueFormat", "nullValue", "minDateErrorText", "maxDateErrorText" ]);
        kitui._ParseBool(e, t, [ "showTime", "showTodayButton", "showClearButton", "showOkButton", "showWeekNumber", "showYesterdayButton" ]);
        return t;
    },
    __OnBlur: function(a) {
    	this.setValue(this._textEl.value);
    	if(this._textEl.value){
	    	var fmt = this.format;	    	
	    	var t=this._textEl.value;
	    	t = kitui.parseDate(t);
	    	if(t == null||t==""){
				alert("请输入正确的日期格式！建议使用\""+fmt+"\"格式进行分割");
				this.value = this._valueEl.value=this._textEl.value = "";
				var locator = this._textEl;
				setTimeout(function(){
					locator.focus();
				},0);
				return;
			}else{
				//this.value = this._valueEl.value=this._textEl.value = kitui.formatDate(t, fmt);
			}	    		
    	}
		this.fire("blur", {
            htmlEvent: a
        });        
    },	        
    __OnInputKeyDown: function(e) {
        var t = {
            htmlEvent: e
        };
        this.fire("keydown", t);
        if (8 == e.keyCode && (this.isReadOnly() || false == this.allowInput)) {
            return false;
        }
        if (9 == e.keyCode) {
            if (this.isShowPopup()) {
                this.hidePopup();
            }
            return;
        }
        if (this.isReadOnly()) {
            return;
        }
        switch (e.keyCode) {
          case 27:
            e.preventDefault();
            if (this.isShowPopup()) {
                e.stopPropagation();
            }
            this.hidePopup();
            break;

          case 9:
          case 13:
            if (this.isShowPopup()) {
                e.preventDefault();
                e.stopPropagation();
                this.hidePopup();
                this.focus();
            } else {
                this.__OnInputTextChanged(null);
                var i = this;
                setTimeout(function() {
                    i.fire("enter", t);
                }, 10);
            }
            break;

          case 37:
            break;

          case 38:
            e.preventDefault();
            break;

          case 39:
            break;

          case 40:
            e.preventDefault();
            this.showPopup();
        }
    },
    __OnInputTextChanged: function() {
        var e = this._textEl.value, t = this.getFormValue("U");
        if ("date" == this.valueType) {
            var i = kitui.parseDate(e);
            if (!i || isNaN(i)) {
                i = null;
            }
        }
        this.setValue(e);
        if (t !== this.getFormValue("U")) {
            this._OnValueChanged();
        }
    },
    getMinDateErrorText: function() {
        return this.minDateErrorText;
    },
    setMinDateErrorText: function(e) {
        this.minDateErrorText = e;
    },
    getMaxDateErrorText: function() {
        return this.maxDateErrorText;
    },
    setMaxDateErrorText: function(e) {
        this.maxDateErrorText = e;
    },
    getMinDate: function() {
        return this.minDate;
    },
    setMinDate: function(e) {
        this.minDate = e;
    },
    getMaxDate: function() {
        return this.maxDate;
    },
    setMaxDate: function(e) {
        this.maxDate = e;
    },
    getShowWeekNumber: function() {
        return this.showWeekNumber;
    },
    setShowWeekNumber: function(e) {
        this.showWeekNumber = e;
    },
    getShowOkButton: function() {
        return this.showOkButton;
    },
    setShowOkButton: function(e) {
        this.showOkButton = e;
    },
    getShowClearButton: function() {
        return this.showClearButton;
    },
    setShowClearButton: function(e) {
        this.showClearButton = e;
    },
    getShowTodayButton: function() {
        return this.showTodayButton;
    },
    setShowTodayButton: function(e) {
        this.showTodayButton = e;
    },
    getShowYesterdayButton: function() {
        return this.showYesterdayButton;
    },
    setShowYesterdayButton: function(e) {
        this.showYesterdayButton = e;
    },
    getTimeFormat: function() {
        return this.timeFormat;
    },
    setTimeFormat: function(e) {
        if (this.timeFormat != e) {
            this.timeFormat = e;
        }
    },
    getShowTime: function() {
        return this.showTime;
    },
    setShowTime: function(e) {
        if (this.showTime != e) {
            this.showTime = e;
        }
    },
    getViewDate: function() {
        return this._calendar.getViewDate();
    },
    setViewDate: function(e) {
        e = kitui.parseDate(e);
        if (!kitui.isDate(e)) {
            return;
        }
        this.viewDate = e;
    },
    getFormValue: function(e) {
        if ("date" != this.valueType) {
            return this.value;
        }
        if (!kitui.isDate(this.value)) {
            return "";
        }
        e = e || this.format;
        return kitui.formatDate(this.value, e);
    },
    getValue: function() {
        if ("date" != this.valueType) {
            return this.value;
        }
        if (!kitui.isDate(this.value)) {
            return this.nullValue;
        }
        var e = this.value;
        if (this.format) {
            e = kitui.formatDate(e, this.format);
        }
        return e;
    },
    getNullValue: function() {
        return this.nullValue;
    },
    setNullValue: function(e) {
        if ("null" == e) {
            e = null;
        }
        this.nullValue = e;
    },
    setValue: function(e) {
        var t = this;
        if ("date" == t.valueType) {
            e = kitui.parseDate(e);
        } else {
            if (kitui.isDate(e)) {
                e = kitui.formatDate(e, t.format);
            }
        }
        if (kitui.isNull(e)) {
            e = "";
        }
        if (kitui.isDate(e)) {
            e = new Date(e.getTime());
        }
        if (this.value != e) {
            this.value = e;
            this.text = this.getFormValue();
            this._textEl.value = this.getFormValue();
            this._valueEl.value = this.getFormValue();
        }
    },
    getValueFormat: function() {
        return this.valueFormat;
    },
    setValueFormat: function(e) {
        if ("string" != typeof e) {
            return;
        }
        if (this.valueFormat != e) {
            this.valueFormat = e;
        }
    },
    getFormat: function() {
        return this.format;
    },
    setFormat: function(e) {
        if ("string" != typeof e) {
            return;
        }
        if (this.format != e) {
            this.format = e;
            this._textEl.value = this._valueEl.value = this.getFormValue();
        }
    },
    __OnTimeChanged: function() {
        if (this.showOkButton) {
            return;
        }
        var e = this._calendar.getValue();
        this.setValue(e);
        this._OnValueChanged();
    },
    __OnDateClick: function(e) {
        if (!e) {
            return;
        }
        if (this.showOkButton && "ok" != e.action) {
            return;
        }
        var t = this._calendar.getValue(), i = this.getFormValue("U");
        this.setValue(t);
        if (i !== this.getFormValue("U")) {
            this._OnValueChanged();
        }
        this.hidePopup();
        this.focus();
    },
    __OnDrawDate: function(e) {
        var t = e.date, i = kitui.parseDate(this.maxDate), n = kitui.parseDate(this.minDate);
        if (kitui.isDate(i)) {
            if (t.getTime() > i.getTime()) {
                e.allowSelect = false;
            }
        }
        if (kitui.isDate(n)) {
            if (t.getTime() < n.getTime()) {
                e.allowSelect = false;
            }
        }
        this.fire("drawdate", e);
    },
    __OnValidation: function(e) {
        if (false == e.isValid) {
            return;
        }
        var t = this.value;
        if (!kitui.isDate(t)) {
            return;
        }
        var i = kitui.parseDate(this.maxDate);
        var n = kitui.parseDate(this.minDate); 
        var s = this.maxDateErrorText || kitui.VTypes.maxDateErrorText; 
        var o = this.minDateErrorText || kitui.VTypes.minDateErrorText;
        if (kitui.isDate(i)) {
            if (t.getTime() > i.getTime()) {
                e.isValid = false;
                e.errorText = String.format(s, kitui.formatDate(i, this.format));
            }
        }
        if (kitui.isDate(n)) {
            if (t.getTime() < n.getTime()) {
                e.isValid = false;
                e.errorText = String.format(o, kitui.formatDate(n, this.format));
            }
        }
    },
    __OnPopupKeyDown: function(e) {
        if (13 == e.keyCode) {
            this.__OnDateClick();
        }
        if (27 == e.keyCode) {
            this.hidePopup();
            this.focus();
        }
    },
    within: function(e) {
        if (kitui.isAncestor(this.el, e.target)) {
            return true;
        }
        if (this._calendar.within(e)) {
            return true;
        }
        return false;
    },
    hidePopup: function() {
        kitui.DatePicker.superclass.hidePopup.call(this);
        this._calendar.un("timechanged", this.__OnTimeChanged, this);
        this._calendar.un("dateclick", this.__OnDateClick, this);
        this._calendar.un("drawdate", this.__OnDrawDate, this);
        this._calendar.hideMenu();
    },
    showPopup: function() {
        var e = {
            cancel: false
        };
        this.fire("beforeshowpopup", e);
        if (true == e.cancel) {
            return;
        }
        this._calendar = this._getCalendar();
        this._calendar.beginUpdate();
        this._calendar._allowLayout = false;
        if (this._calendar.el.parentNode != this.popup._contentEl) {
            this._calendar.render(this.popup._contentEl);
        }
        this._calendar.set({
            monthPicker: this._monthPicker,
            showTime: this.showTime,
            timeFormat: this.timeFormat,
            showClearButton: this.showClearButton,
            showYesterdayButton: this.showYesterdayButton,
            showTodayButton: this.showTodayButton,
            showOkButton: this.showOkButton,
            showWeekNumber: this.showWeekNumber
        });
        this._calendar.setValue(this.value);
        if (this.value) {
            this._calendar.setViewDate(this.value);
        } else {
            this._calendar.setViewDate(this.viewDate);
        }
        function t() {
            this._calendar.hideMenu();
            if (this._calendar._target) {
                var e = this._calendar._target;
                this._calendar.un("timechanged", e.__OnTimeChanged, e);
                this._calendar.un("dateclick", e.__OnDateClick, e);
                this._calendar.un("drawdate", e.__OnDrawDate, e);
            }
            this._calendar.on("timechanged", this.__OnTimeChanged, this);
            this._calendar.on("dateclick", this.__OnDateClick, this);
            this._calendar.on("drawdate", this.__OnDrawDate, this);
            this._calendar.endUpdate();
            this._calendar._allowLayout = true;
            this._calendar.doLayout();
            this._calendar.focus();
            this._calendar._target = this;
        }
        var i = this;
        t.call(i);
        kitui.DatePicker.superclass.showPopup.call(this);
    },
    __OnPopupClose: function() {
        if (this._calendar) {
            this._calendar.hideMenu();
        }
    },
    _createPopup: function() {
        kitui.DatePicker.superclass._createPopup.call(this);
        this._calendar = this._getCalendar();
    },
    destroy: function(e) {
        if (this._destroyPopup) {
            kitui.DatePicker._Calendar = null;
        }
        kitui.DatePicker.superclass.destroy.call(this, e);
    },
    _getCalendar: function() {
        if (!kitui.DatePicker._Calendar) {
            var e = kitui.DatePicker._Calendar = new kitui.Calendar();
            e.setStyle("border:0;");
        }
        return kitui.DatePicker._Calendar;
    }
});

kitui.regClass(kitui.DatePicker, "datepicker");
})(jQuery);
///<jscompress sourcefile="jquery.window.js" />
(function($) {
	kitui.Window = function() {
	    kitui.Window.superclass.constructor.apply(this, arguments);
	    this.addCls("kitui-window");
	    this.setVisible(false);
	    this.setAllowDrag(this.allowDrag);
	    this.setAllowResize(this.allowResize);
	};
	
	kitui.extend(kitui.Window, kitui.Panel, {
	    x: 0,
	    y: 0,
	    state: "restore",
	    _dragCls: "kitui-window-drag",
	    _resizeCls: "kitui-window-resize",
	    allowDrag: true,
	    showCloseButton: true,
	    showMaxButton: false,
	    showMinButton: false,
	    showCollapseButton: false,
	    showModal: true,
	    minWidth: 150,
	    minHeight: 80,
	    maxWidth: 2e3,
	    maxHeight: 2e3,
	    uiCls: "kitui-window",
	    showInBody: true,
	    containerEl: null,
	    enableDragProxy: true,
	    allowCrossBottom: true,
	    xxx: 0
	});
	
	kitui.copyTo(kitui.Window.prototype, {
	    showAtEl: function(e, t) {
	        e = kitui.byId(e);
	        if (!e) {
	            return;
	        }
	        if (!this.isRender() || this.el.parentNode != document.body) {
	            this.render(document.body);
	        }
	        var i = {
	            xAlign: this.xAlign,
	            yAlign: this.yAlign,
	            xOffset: 0,
	            yOffset: 0,
	            popupCls: this.popupCls
	        };
	        kitui.copyTo(i, t);
	        this._popupEl = e;
	        this.el.style.position = "absolute";
	        this.el.style.left = "-2000px";
	        this.el.style.top = "-2000px";
	        this.el.style.display = "";
	        this.doLayout();
	        this._measureSize();
	        var n = kitui.getViewportBox(), s = this.getBox(), o = kitui.getBox(e), r = i.xy, l = (i.xAlign, 
	        i.yAlign, n.width / 2 - s.width / 2), a = 0;
	        if (r) {
	            l = r[0];
	            a = r[1];
	        }
	        switch (i.xAlign) {
	          case "outleft":
	            l = o.x - s.width;
	            break;
	
	          case "left":
	            l = o.x;
	            break;
	
	          case "center":
	            l = o.x + o.width / 2 - s.width / 2;
	            break;
	
	          case "right":
	            l = o.right - s.width;
	            break;
	
	          case "outright":
	            l = o.right;
	        }
	        switch (i.yAlign) {
	          case "above":
	            a = o.y - s.height;
	            break;
	
	          case "top":
	            a = o.y;
	            break;
	
	          case "middle":
	            a = o.y + o.height / 2 - s.height / 2;
	            break;
	
	          case "bottom":
	            a = o.bottom - s.height;
	            break;
	
	          case "below":
	            a = o.bottom;
	        }
	        l = parseInt(l);
	        a = parseInt(a);
	        if (i.outYAlign || i.outXAlign) {
	            if ("above" == i.outYAlign) {
	                if (a + s.height > n.bottom) {
	                    var h = o.y - n.y, u = n.bottom - o.bottom;
	                    if (h > u) {
	                        a = o.y - s.height;
	                    }
	                }
	            }
	            if ("outleft" == i.outXAlign) {
	                if (l + s.width > n.right) {
	                    var d = o.x - n.x, c = n.right - o.right;
	                    if (d > c) {
	                        l = o.x - s.width;
	                    }
	                }
	            }
	            if ("right" == i.outXAlign) {
	                if (l + s.width > n.right) {
	                    l = o.right - s.width;
	                }
	            }
	            this._Show(l, a);
	        } else {
	            this.showAtPos(l + i.xOffset, a + i.yOffset);
	        }
	    },
	    getAttrs: function(e) {
	        var t = kitui.Window.superclass.getAttrs.call(this, e);
	        kitui._ParseString(e, t, [ "modalStyle" ]);
	        kitui._ParseBool(e, t, [ "showModal", "showShadow", "allowDrag", "allowResize", "showMaxButton", "showMinButton", "showInBody", "enableDragProxy", "allowCrossBottom" ]);
	        kitui._ParseInt(e, t, [ "minWidth", "minHeight", "maxWidth", "maxHeight" ]);
	        return t;
	    },
	    destroy: function(e) {
	        kitui.un(window, "resize", this.__OnWindowResize, this);
	        if (this._modalEl) {
	            jQuery(this._modalEl).remove();
	            this._modalEl = null;
	        }
	        if (this.shadowEl) {
	            jQuery(this.shadowEl).remove();
	            this.shadowEl = null;
	        }
	        var t = "__modal" + this._id;
	        jQuery("[id='" + t + "']").remove();
	        kitui.Window.superclass.destroy.call(this, e);
	    },
	    __OnWindowMouseDown: function(e) {
	        var t = this;
	        if ("max" != this.state && this.allowDrag && kitui.isAncestor(this._headerEl, e.target) && !kitui.findParent(e.target, "kitui-tools")) {
	            t = this;
	            if (this.el) {
	                this.el.style.zIndex = kitui.getMaxZIndex();
	            }
	            var i = this.getBox(), n = new kitui.Drag({
	                capture: false,
	                onStart: function() {
	                    t._maskProxy = kitui.append(document.body, '<div class="kitui-resizer-mask" style=""></div>');
	                    if (t.enableDragProxy) {
	                        t._dragProxy = kitui.append(document.body, '<div class="kitui-drag-proxy" style="z-index:100"></div>');
	                        t._dragProxy.style.zIndex=kitui.getStyle(t.el, "zIndex")+1;
	                        //t.el.style.left = "-2000px";
	                        //t.el.style.top = "-2000px";
	                        
					        if(kitui_useShims){
					            var h = "<iframe frameborder='0' style='z-index:100; width:0; height:0; top:10;left:0;scrolling:no;'></iframe>";
					            var _topWin = kitui._getTopWindow();
				                t._shimEl = kitui.append(t._dragProxy, h);
				                t._shimEl.style.display = "";
					            var e = kitui.getBox(t._dragProxy), st = t._shimEl.style;
					            st.width = e.width + "px";
					            st.height = e.height + "px";
					            var i = kitui.getStyle(t._dragProxy, "zIndex");
					            if (!isNaN(i)) {
					                t._shimEl.style.zIndex = i-3;
					            }else{
					            	t._shimEl.style.zIndex = -1;
					            }
					        }	                     
	                        
	                    } else {
	                        t._dragProxy = t.el;
	                    }
	                    var e = kitui.append(document.body, '<div class="kitui-resizer-mask"></div>');
	                    setTimeout(function() {
	                        kitui.removeNode(e);
	                    }, 300);
	                },
	                onMove: function(e) {
	                    var n = e.now[0] - e.init[0], s = e.now[1] - e.init[1];
	                    n = i.x + n;
	                    s = i.y + s;
	                    var o = t.getParentBox(), r = n + i.width, l = s + i.height;
	                    if (r > o.width) {
	                        n = o.width - i.width;
	                    }
	                    if (!t.allowCrossBottom) {
	                        if (l > o.height) {
	                            s = o.height - i.height;
	                        }
	                    }
	                    if (n < 0) {
	                        n = 0;
	                    }
	                    if (s < 0) {
	                        s = 0;
	                    }
	                    t.x = n;
	                    t.y = s;
	                    var a = {
	                        x: n,
	                        y: s,
	                        width: i.width,
	                        height: i.height
	                    };
	                    kitui.setBox(t._dragProxy, a);
	                    kitui.setBox(t._shimEl, a);	                    
	                    this.moved = true;
	                },
	                onStop: function() {
	                    if (t.el) {
	                        t.el.style.display = "block";
	                        if (this.moved) {
	                            var e = kitui.getBox(t._dragProxy);
	                            kitui.setBox(t.el, e);
	                        }
	                    }
	                    jQuery(t._maskProxy).remove();
	                    t._maskProxy = null;
	                    if (t.enableDragProxy) {
	                    	jQuery(t._shimEl).remove();
	                        jQuery(t._dragProxy).remove();
	                    }
	                    t._dragProxy = null;
	                    t._shimEl = null;
	                }
	            });
	            n.start(e);
	        }
	    },
	    getAllowCrossBottom: function() {
	        return this.allowCrossBottom;
	    },
	    setAllowCrossBottom: function(e) {
	        this.allowCrossBottom = e;
	    },
	    getEnableDragProxy: function() {
	        return this.enableDragProxy;
	    },
	    setEnableDragProxy: function(e) {
	        this.enableDragProxy = e;
	    },
	    __OnWindowResize: function() {
	        if ("max" == this.state) {
	            this.doLayout();
	        }
	        if (!kitui.isIE6) {
	            this._doModal();
	        }
	    },
	    _OnButtonClick: function(e, t) {
	        var i = kitui.Window.superclass._OnButtonClick.call(this, e, t);
	        if (true == i.cancel) {
	            return i;
	        }
	        if ("max" == i.name) {
	            if ("max" == this.state) {
	                this.restore();
	            } else {
	                this.max();
	            }
	        }
	        return i;
	    },
	    _doShow: function(e, t) {
	        var i = this.getParentBox();
	        if ("max" == this.state) {
	            if (!this._width) {
	                var n = this.getBox();
	                this._width = n.width;
	                if (this.expanded) {
	                    this._height = n.height;
	                }
	                this.x = n.x;
	                this.y = n.y;
	            }
	            this.el.style.left = "-10000px";
	            this.el.style.top = "-10000px";
	        } else {
	            if (kitui.isNull(e)) {
	                e = "center";
	            }
	            if (kitui.isNull(t)) {
	                t = "middle";
	            }
	            this.el.style.position = "absolute";
	            this.el.style.left = "-2000px";
	            this.el.style.top = "-2000px";
	            this.el.style.display = "";
	            if (this._width) {
	                this.setWidth(this._width);
	                this.setHeight(this._height);
	                delete this._width;
	                delete this._height;
	            }
	            this._measureSize();
	            n = this.getBox();
	            if ("left" == e) {
	                e = 0;
	            }
	            if ("center" == e) {
	                e = i.width / 2 - n.width / 2;
	            }
	            if ("right" == e) {
	                e = i.width - n.width;
	            }
	            if ("top" == t) {
	                t = 0;
	            }
	            if ("middle" == t) {
	                t = i.y + i.height / 2 - n.height / 2;
	            }
	            if ("bottom" == t) {
	                t = i.height - n.height;
	            }
	            if (e + n.width > i.right) {
	                e = i.right - n.width;
	            }
	            if (t + n.height > i.bottom) {
	                t = i.bottom - n.height;
	            }
	            if (e < 0) {
	                e = 0;
	            }
	            if (t < 0) {
	                t = 0;
	            }
	            this.el.style.display = "";
	            kitui.setX(this.el, e);
	            kitui.setY(this.el, t);
	        }
	        this.doLayout();
	    },
	    _measureSize: function() {
	        this.el.style.display = "";
	        var e = this.getBox();
	        if (e.width > this.maxWidth) {
	            kitui.setWidth(this.el, this.maxWidth);
	            e = this.getBox();
	        }
	        if (e.height > this.maxHeight) {
	            kitui.setHeight(this.el, this.maxHeight);
	            e = this.getBox();
	        }
	        if (e.width < this.minWidth) {
	            kitui.setWidth(this.el, this.minWidth);
	            e = this.getBox();
	        }
	        if (e.height < this.minHeight) {
	            kitui.setHeight(this.el, this.minHeight);
	            e = this.getBox();
	        }
	    },
	    getBox: function() {
	        this._headerEl.style.width = "50px";
	        this.el.style.display = "";
	        var e = kitui.getWidth(this.el);
	        this._headerEl.style.width = "auto";
	        var t = kitui.getBox(this.el);
	        t.width = e;
	        t.right = t.x + e;
	        return t;
	    },
	    getWidth: function() {
	        this._headerEl.style.width = "50px";
	        var e = kitui.getWidth(this.el);
	        this._headerEl.style.width = "auto";
	        return e;
	    },
	    hide: function() {
	        this.setVisible(false);
	        this._doModal();
	    },
	    show: function(e, t) {
	        this._allowLayout = false;
	        var i = this._containerEl || document.body;
	        if (!this.isRender() || this.el.parentNode != i && this.showInBody) {
	            this.render(i);
	        }
	        this.el.style.zIndex = kitui.getMaxZIndex();
	        this._doShow(e, t);
	        this._allowLayout = true;
	        this.setVisible(true);
	        if ("max" != this.state) {
	            var n = this.getBox();
	            this.x = n.x;
	            this.y = n.y;
	        }
	        try {
	            document.body.focus();
	        } catch (s) {}
	    },
	    showAtPos: function(e, t, i) {
	        this.show(e, t, i);
	    },
	    getShowInBody: function() {
	        return this.showInBody;
	    },
	    setShowInBody: function(e) {
	        this.showInBody = e;
	    },
	    restore: function() {
	        this.state = "restore";
	        this.show(this.x, this.y);
	        var e = this.getButton("max");
	        if (e) {
	            e.cls = "kitui-tools-max";
	            this._doTools();
	        }
	    },
	    max: function() {
	        this.state = "max";
	        this.show();
	        var e = this.getButton("max");
	        if (e) {
	            e.cls = "kitui-tools-restore";
	            this._doTools();
	        }
	    },
	    getShowMinButton: function() {
	        return this.showMinButton;
	    },
	    setShowMinButton: function(e) {
	        this.showMinButton = e;
	        var t = this.getButton("min");
	        if (!t) {
	            return;
	        }
	        t.visible = e;
	        this._doTools();
	    },
	    getShowMaxButton: function() {
	        return this.showMaxButton;
	    },
	    setShowMaxButton: function(e) {
	        this.showMaxButton = e;
	        var t = this.getButton("max");
	        if (!t) {
	            return;
	        }
	        t.visible = e;
	        this._doTools();
	    },
	    getAllowDrag: function() {
	        return this.allowDrag;
	    },
	    setAllowDrag: function(e) {
	        this.allowDrag = e;
	        kitui.removeClass(this.el, this._dragCls);
	        if (e) {
	            kitui.addClass(this.el, this._dragCls);
	        }
	    },
	    getMaxHeight: function() {
	        return this.maxHeight;
	    },
	    setMaxHeight: function(e) {
	        if (isNaN(e)) {
	            return;
	        }
	        this.maxHeight = e;
	    },
	    getMaxWidth: function() {
	        return this.maxWidth;
	    },
	    setMaxWidth: function(e) {
	        if (isNaN(e)) {
	            return;
	        }
	        this.maxWidth = e;
	    },
	    getMinHeight: function() {
	        return this.minHeight;
	    },
	    setMinHeight: function(e) {
	        if (isNaN(e)) {
	            return;
	        }
	        this.minHeight = e;
	    },
	    getMinWidth: function() {
	        return this.minWidth;
	    },
	    setMinWidth: function(e) {
	        if (isNaN(e)) {
	            return;
	        }
	        this.minWidth = e;
	    },
	    getShowModal: function() {
	        return this.showModal;
	    },
	    setShowModal: function(e) {
	        this.showModal = e;
	    },
	    getParentBox: function() {
	        var e = kitui.getViewportBox(), t = this._containerEl || document.body;
	        if (t != document.body) {
	            e = kitui.getBox(t);
	        }
	        return e;
	    },
	    _doModal: function() {
	        if (!this.el) {
	            if (this._modalEl) {
	                kitui.removeNode(this._modalEl);
	            }
	            return;
	        }
	        var e = this.showModal && this.isDisplay() && this.visible;
	        if (!this._modalEl && false == this.showModal) {
	            if (this._modalEl) {
	                kitui.removeNode(this._modalEl);
	            }
	            return;
	        }
	        if (!this._modalEl) {
	            var t = "__modal" + this._id, i = kitui_useShims ? "<iframe frameborder='0' style='position:absolute; z-index:-1; width:100%; height:100%; top:0;left:0;scrolling:no;'></iframe>" : "";
	            this._modalEl = kitui.append(document.body, '<div id="' + t + '" class="kitui-modal" style="display:none">' + i + "</div>");
	        }
	        if (e) {
	            this._modalEl.style.display = "block";
	            //this._modalEl.style.zIndex = kitui.getStyle(this.el, "zIndex") - 1;
	            this._modalEl.style.zIndex = this.el.style.zIndex - 1;
	        } else {
	            this._modalEl.style.display = "none";
	        }
	    },
	    doLayout: function() {
	        if (!this.canLayout()) {
	            return;
	        }
	        if ("max" == this.state) {
	            var e = this.getParentBox();
	            this.el.style.left = "0px";
	            this.el.style.top = "0px";
	            kitui.setSize(this.el, e.width, e.height);
	        }
	        kitui.Window.superclass.doLayout.call(this);
	        if (this.allowDrag) {
	            kitui.addClass(this.el, this._dragCls);
	        }
	        if ("max" == this.state) {
	            this._resizeGridEl.style.display = "none";
	            kitui.removeClass(this.el, this._dragCls);
	        }
	        this._doModal();
	    },
	    _initEvents: function() {
	        kitui.Window.superclass._initEvents.call(this);
	        kitui._BindEvents(function() {
	            kitui.on(this.el, "mouseover", this.__OnMouseOver, this);
	            kitui.on(window, "resize", this.__OnWindowResize, this);
	            kitui.on(this.el, "mousedown", this.__OnWindowMouseDown, this);
	        }, this);
	    },
	    _initButtons: function() {
	        this.buttons = [];
	        var e = this.createButton({
	            name: "collapse",
	            cls: "kitui-tools-collapse",
	            visible: this.showCollapseButton
	        });
	        this.buttons.push(e);
	        var t = this.createButton({
	            name: "min",
	            cls: "kitui-tools-min",
	            visible: this.showMinButton
	        });
	        this.buttons.push(t);
	        var i = this.createButton({
	            name: "max",
	            cls: "kitui-tools-max",
	            visible: this.showMaxButton
	        });
	        this.buttons.push(i);
	        var n = this.createButton({
	            name: "close",
	            cls: "kitui-tools-close",
	            visible: this.showCloseButton
	        });
	        this.buttons.push(n);
	    },
	    _create: function() {
	        kitui.Window.superclass._create.call(this);
	        if (kitui.isIE && kitui_useShims) {
	            var e = "<iframe frameborder='0' style='position:absolute; z-index:-1; width:100%; height:100%; top:0;left:0;scrolling:no;'></iframe>";
	            kitui.append(this.el, e);
	        }
	    }
	});
	
	kitui.regClass(kitui.Window, "window");
})(jQuery);

kitui._topWindow = null;

kitui._getTopWindow = function() {
    if (kitui._topWindow) {
        return kitui._topWindow;
    }
    var e = [];
    function t(i) {
        try {
            i.___try = 1;
            e.push(i);
        } catch (n) {}
        if (i.parent && i.parent != i) {
            t(i.parent);
        }
    }
    t(window);
//    for(var w_i = 1 ; w_i <=e.length ;w_i++){
//    	if(e[e.length - w_i].kitui != undefined){
//    		kitui._topWindow = e[e.length - w_i];
//    		break;
//    	}
//    }
    kitui._topWindow = e[e.length - 1];
    if(!kitui._topWindow) {
    	kitui._topWindow = e[e.length - 2];
    }
    return kitui._topWindow;
};

var __ps = kitui.getParams();

if (__ps._winid) {
    try {
        window.Owner = kitui._getTopWindow()[__ps._winid];
    } catch (ex) {}
}

kitui._WindowID = "w" + Math.floor(1e4 * Math.random());

kitui._getTopWindow()[kitui._WindowID] = window;

kitui._doOpen___ = function(e) {
    if ("string" == typeof e) {
        e = {
            url: e
        };
    }
    e = kitui.copyTo({
        width: 700,
        height: 400,
        allowResize: true,
        allowModal: true,
        closeAction: "destroy",
        title: "",
        titleIcon: "",
        iconCls: "",
        iconStyle: "",
        bodyStyle: "padding:0",
        url: "",
        showCloseButton: true,
        showFooter: false
    }, e);
    e.closeAction = "destroy";
    var t = e.onload;
    delete e.onload;
    var i = e.ondestroy;
    delete e.ondestroy;
    var n = e.url;
    delete e.url;
    var s = kitui.getViewportBox();
    if (e.width && -1 != String(e.width).indexOf("%")) {
        var o = parseInt(e.width);
        e.width = parseInt(s.width * (o / 100));
    }
    if (e.height && -1 != String(e.height).indexOf("%")) {
        var r = parseInt(e.height);
        e.height = parseInt(s.height * (r / 100));
    }
    var l = new kitui.Window();
    l.set(e);
    l.load(n, t, i);
    l.show();
    if (kitui.isIE) {
        setTimeout(function() {
            fixIEFocus();
        }, 100);
    }
    return l;
};

function fixIEFocus() {
    var e = kitui.getViewportBox(), t = document.createElement("input");
    //t.style.cssText = "position:absolute;left:" + e.left + "px;top:" + e.top + "px;";
    t.style.cssText = "position:absolute;left:0px;top:0px;";
    document.body.appendChild(t);
    t.focus();
    t.parentNode.removeChild(t);
}

kitui.open = function(opt) {
    if (!opt) {
        return;
    }
    var t = opt.url;
    if(-1 == t.indexOf("?"))
    	t = t + "?menuId=" + getMenuIdFromDocumentUrl() + "&userCode=" + getUserCodeFromDocumentUrl() +  "&year="+getYearFromDocumentUrl();
    else
    	t = t + "&menuId=" + getMenuIdFromDocumentUrl() + "&userCode=" + getUserCodeFromDocumentUrl() +  "&year="+getYearFromDocumentUrl();
    if (!t) {
        t = "";
    }
    var i = t.split("#"), t = i[0];
    if (t && -1 == t.indexOf("_winid")) {
        var n = "_winid=" + kitui._WindowID;
        if (-1 == t.indexOf("?")) {
            t += "?" + n;
        } else {
            t += "&" + n;
        }
        if (i[1]) {
            t = t + "#" + i[1];
        }
    }
    opt.url = t;
    opt.Owner = window;
    if(opt.openMode=='top'){
	    var s = [];
	    function o(win) {
	        try {
	            if (win.kitui) {
	                s.push(win);
	            }
	            if (win.parent && win.parent != win) {
	                o(win.parent);
	            }
	        } catch (t) {}
	    }
	    o(window);
	    
//	    var r = s[s.length - 1];
//	    return r.kitui._doOpen(opt);
	    var r = kitui._getTopWindow()
	    return r.kitui._doOpen(opt);  
    }else{
		return kitui._doOpen(opt);    	
    }
};

kitui.openTop = kitui.open;
kitui.openWin = kitui.open;

kitui._doOpen = function(opt) {
    if ("string" == typeof opt) {
        opt = {
            url: opt
        };
    }
    opt = kitui.copyTo({
        width: 700,
        height: 400,
        allowResize: true,
        allowModal: true,
        closeAction: "destroy",
        title: "",
        titleIcon: "",
        iconCls: "",
        iconStyle: "",
        bodyStyle: "padding:0px 1px 0px 1px",
        url: "",
        showCloseButton: true,
        showFooter: false
    }, opt);
    opt.closeAction = "destroy";
    var t = opt.onload;
    delete opt.onload;
    var i = opt.ondestroy;
    delete opt.ondestroy;
    var n = opt.url;
    delete opt.url;
    var s = kitui.getViewportBox();
    if (opt.width && -1 != String(opt.width).indexOf("%")) {
        var o = parseInt(opt.width);
        opt.width = parseInt(s.width * (o / 100));
    }
    if (opt.height && -1 != String(opt.height).indexOf("%")) {
        var r = parseInt(opt.height);
        opt.height = parseInt(s.height * (r / 100));
    }
    var l = new kitui.Window();
    l.set(opt);
    l.load(n, t, i);
    l.show(opt.x,opt.y);
    if (kitui.isIE||1) {
        setTimeout(function() {
            fixIEFocus();
        }, 100);
    }
    return l;
};


kitui.MessageBox = {
    alertTitle: "提醒",
    confirmTitle: "确认",
    prompTitle: "输入",
    prompMessage: "请输入内容：",
    buttonText: {
        ok: "确定",
        cancel: "取消",
        yes: "是",
        no: "否"
    },
    show: function(e) {
        e = kitui.copyTo({
            width: "auto",
            height: "auto",
            showModal: true,
            timeout: 0,
            minWidth: 150,
            maxWidth: 800,
            minHeight: 50,
            maxHeight: 350,
            showHeader: true,
            title: "",
            titleIcon: "",
            iconCls: "",
            iconStyle: "",
            message: "",
            html: "",
            spaceStyle: "margin-right:15px",
            showCloseButton: true,
            buttons: null,
            buttonWidth: 58,
            callback: null
        }, e);
        e.message = String(e.message);
        var t = e.callback;
        var i = new kitui.Window();
        i.setBodyStyle("overflow:hidden");
        i.setShowModal(e.showModal);
        i.setTitle(e.title || "");
        i.setIconCls(e.titleIcon);
        i.setShowHeader(e.showHeader);
        i.setShowCloseButton(e.showCloseButton);
        var n = i.uid + "$table", s = i.uid + "$content", o = '<div class="' + e.iconCls + '" style="' + e.iconStyle + '"></div>', r = '<table class="kitui-messagebox-table" id="' + n + '" style="" cellspacing="0" cellpadding="0"><tr><td>' + o + '</td><td id="' + s + '" class="kitui-messagebox-content-text">' + (e.message || "") + "</td></tr></table>", l = '<div class="kitui-messagebox-content"></div><div class="kitui-messagebox-buttons"></div>';
        i._bodyEl.innerHTML = l;
        var a = i._bodyEl.firstChild;
        if (e.html) {
            if ("string" == typeof e.html) {
                a.innerHTML = e.html;
            } else {
                if (kitui.isElement(e.html)) {
                    a.appendChild(e.html);
                }
            }
        } else {
            a.innerHTML = r;
        }
        i._Buttons = [];
        var h = i._bodyEl.lastChild;
        if (e.buttons && e.buttons.length > 0) {
            for (var u = 0, d = e.buttons.length; u < d; u++) {
                var c = e.buttons[u], f = kitui.MessageBox.buttonText[c];
                if (!f) {
                    f = c;
                }
                var m = new kitui.Button();
                m.setText(f);
                m.setWidth(e.buttonWidth);
                m.render(h);
                m.action = c;
                m.on("click", function(e) {
                    var n = e.sender;
                    if (t) {
                        if (false === t(n.action)) {
                            return;
                        }
                    }
                    kitui.MessageBox.hide(i);
                });
                if (u != d - 1) {
                    m.setStyle(e.spaceStyle);
                }
                i._Buttons.push(m);
            }
        } else {
            h.style.display = "none";
        }
        i.setMinWidth(e.minWidth);
        i.setMinHeight(e.minHeight);
        i.setMaxWidth(e.maxWidth);
        i.setMaxHeight(e.maxHeight);
        i.setWidth(e.width);
        i.setHeight(e.height);
        i.show(e.x, e.y, {
            animType: e.animType
        });
        var p = i.getWidth();
        i.setWidth(p);
        var g = i.getHeight();
        i.setHeight(g);
        var _ = document.getElementById(n);
        if (_) {
            _.style.width = "100%";
        }
        var v = document.getElementById(s);
        if (v) {
            v.style.width = "100%";
        }
        var y = i._Buttons[0];
        if (y) {
            y.focus();
        } else {
            i.focus();
        }
        i.on("beforebuttonclick", function(e) {
            if (t) {
                t("close");
            }
            e.cancel = true;
            kitui.MessageBox.hide(i);
        });
        kitui.on(i.el, "keydown", function(e) {
            if (27 == e.keyCode) {
                if (t) {
                    t("close");
                }
                kitui.MessageBox.hide(i);
            }
        });
        if (e.timeout) {
            setTimeout(function() {
                kitui.MessageBox.hide(i.uid);
            }, e.timeout);
        }
        return i.uid;
    },
    hide: function(e) {
        if (!e) {
            return;
        }
        var t = "object" == typeof e ? e : kitui.getbyUID(e);
        if (!t) {
            return;
        }
        for (var i = 0, n = t._Buttons.length; i < n; i++) {
            var s = t._Buttons[i];
            s.destroy();
        }
        t._Buttons = null;
        t.destroy();
    },
    alert: function(e, t, i) {
        return kitui.MessageBox.show({
            minWidth: 250,
            title: t || kitui.MessageBox.alertTitle,
            buttons: [ "ok" ],
            message: e,
            iconCls: "kitui-messagebox-warning",
            callback: i
        });
    },
    confirm: function(e, t, i) {
        return kitui.MessageBox.show({
            minWidth: 250,
            title: t || kitui.MessageBox.confirmTitle,
            buttons: [ "ok", "cancel" ],
            message: e,
            iconCls: "kitui-messagebox-question",
            callback: i
        });
    },
    prompt: function(e, t, i, n) {
        var s = "prompt$" + new Date().getTime(), o = e || kitui.MessageBox.promptMessage;
        if (n) {
            o = o + '<br/><textarea id="' + s + '" style="width:200px;height:60px;margin-top:3px;"></textarea>';
        } else {
            o = o + '<br/><input id="' + s + '" type="text" style="width:200px;margin-top:3px;"/>';
        }
        var r = kitui.MessageBox.show({
            title: t || kitui.MessageBox.promptTitle,
            buttons: [ "ok", "cancel" ],
            width: 250,
            html: '<div style="padding:5px;padding-left:10px;">' + o + "</div>",
            callback: function(e) {
                var t = document.getElementById(s);
                if (i) {
                    return i(e, t.value);
                }
            }
        }), l = document.getElementById(s);
        l.focus();
        return r;
    },
    loading: function(e, t) {
        return kitui.MessageBox.show({
            minHeight: 50,
            title: t,
            showCloseButton: false,
            message: e,
            iconCls: "kitui-messagebox-waiting"
        });
    },
    showTips: function(e) {
        var t = jQuery;
        e = t.extend({
            content: "",
            state: "",
            x: "center",
            y: "top",
            offset: [ 10, 10 ],
            fixed: true,
            timeout: 2e3
        }, e);
        var i = "kitui-tips-" + e.state, n = '<div class="kitui-tips ' + i + '">' + e.content + "</div>", s = t(n).appendTo(document.body);
        e.el = s[0];
        e.timeoutHandler = function() {
            s.slideUp();
            setTimeout(function() {
                s.remove();
            }, 2e3);
        };
        kitui.showAt(e);
        s.hide().slideDown();
    }
};

kitui.alert = kitui.MessageBox.alert;

kitui.confirm = kitui.MessageBox.confirm;

kitui.prompt = kitui.MessageBox.prompt;

kitui.loading = kitui.MessageBox.loading;

kitui.showMessageBox = kitui.MessageBox.show;

kitui.hideMessageBox = kitui.MessageBox.hide;

kitui.showTips = kitui.MessageBox.showTips;
///<jscompress sourcefile="jquery.timespinner.js" />
(function($) {
	
	kitui.TimeSpinner = function() {
	    kitui.TimeSpinner.superclass.constructor.apply(this, arguments);
	    this.setValue("00:00:00");
	};
	
	kitui.extend(kitui.TimeSpinner, kitui.ButtonEdit, {
	    value: null,
	    format: "H:mm:ss",
	    uiCls: "kitui-timespinner",
	    _SpinTimer: null
	});
	
	kitui.copyTo(kitui.TimeSpinner.prototype, {
	    getAttrs: function(e) {
	        var t = kitui.TimeSpinner.superclass.getAttrs.call(this, e);
	        kitui._ParseString(e, t, [ "format" ]);
	        return t;
	    },
	    __OnInputTextChanged: function() {
	        var e = this.getFormValue();
	        this.setValue(this._textEl.value);
	        if (e != this.getFormValue()) {
	            this._OnValueChanged();
	        }
	    },
	    _OnDocumentMouseUp: function() {
	        this._StopSpin();
	        kitui.un(document, "mouseup", this._OnDocumentMouseUp, this);
	        if (this._DownValue != this.getFormValue()) {
	            this._OnValueChanged();
	        }
	    },
	    __OnButtonMouseDown: function(e) {
	        this._DownValue = this.getFormValue();
	        this._timeType = "hours";
	        if ("up" == e.spinType) {
	            this._StartSpin(1, 230, 2);
	        } else {
	            this._StartSpin(-1, 230, 2);
	        }
	    },
	    _StopSpin: function() {
	        clearInterval(this._SpinTimer);
	        this._SpinTimer = null;
	    },
	    _StartSpin: function(e, t, i) {
	        this._StopSpin();
	        this._ChangeValue(e, this._timeType);
	        var n = this, s = i, o = new Date();
	        this._SpinTimer = setInterval(function() {
	            n._ChangeValue(e, n._timeType);
	            i--;
	            if (0 == i && t > 50) {
	                n._StartSpin(e, t - 100, s + 3);
	            }
	            var r = new Date();
	            if (r - o > 500) {
	                n._StopSpin();
	            }
	            o = r;
	        }, t);
	        kitui.on(document, "mouseup", this._OnDocumentMouseUp, this);
	    },
	    _ChangeValue: function(e, t) {
	        var i = this.getValue();
	        if (i) {
	            switch (t) {
	              case "hours":
	                var n = i.getHours() + e;
	                if (n > 23) {
	                    n = 23;
	                }
	                if (n < 0) {
	                    n = 0;
	                }
	                i.setHours(n);
	                break;
	
	              case "minutes":
	                var s = i.getMinutes() + e;
	                if (s > 59) {
	                    s = 59;
	                }
	                if (s < 0) {
	                    s = 0;
	                }
	                i.setMinutes(s);
	                break;
	
	              case "seconds":
	                var o = i.getSeconds() + e;
	                if (o > 59) {
	                    o = 59;
	                }
	                if (o < 0) {
	                    o = 0;
	                }
	                i.setSeconds(o);
	            }
	        } else {
	            i = "00:00:00";
	        }
	        this.setValue(i);
	    },
	    getFormattedValue: function() {
	        if (!this.value) {
	            return "";
	        }
	        return kitui.formatDate(this.value, this.format);
	    },
	    getFormValue: function() {
	        if (!this.value) {
	            return "";
	        }
	        return kitui.formatDate(this.value, this.format);
	    },
	    getValue: function() {
	        return null == this.value ? null : new Date(this.value.getTime());
	    },
	    setValue: function(e) {
	        e = kitui.parseTime(e, this.format);
	        if (!e) {
	            e = null;
	        }
	        if (kitui.isDate(e)) {
	            e = new Date(e.getTime());
	        }
	        this.value = e;
	        this.text = this._textEl.value = this.getFormattedValue();
	        this._valueEl.value = this.getFormValue();
	    },
	    getFormat: function() {
	        return this.format;
	    },
	    setFormat: function(e) {
	        if ("string" != typeof e) {
	            return;
	        }
	        if (this.format != e) {
	            this.format = e;
	            this.text = this._textEl.value = this.getFormattedValue();
	        }
	    },
	    _initEvents: function() {
	        kitui.TimeSpinner.superclass._initEvents.call(this);
	        kitui._BindEvents(function() {
	            this.on("buttonmousedown", this.__OnButtonMouseDown, this);
	            kitui.on(this.el, "mousewheel", this.__OnMousewheel, this);
	            kitui.on(this._textEl, "keydown", this.__OnKeyDown, this);
	        }, this);
	    },
	    _getButtonHtml: function() {
	        var e = "onmouseover=\"kitui.addClass(this,'" + this._buttonHoverCls + "');\" onmouseout=\"kitui.removeClass(this,'" + this._buttonHoverCls + "');\"";
	        return '<span class="kitui-buttonedit-button" ' + e + '><span class="kitui-buttonedit-up"><span></span></span><span class="kitui-buttonedit-down"><span></span></span></span>';
	    }
	});
	
	kitui.regClass(kitui.TimeSpinner, "timespinner");
	
})(jQuery);
///<jscompress sourcefile="jquery.portal.js" />
kitui.ux.Portal = function () {
    this.columns = [];
    this.panels = [];
    kitui.ux.Portal.superclass.constructor.call(this);
}
kitui.extend(kitui.ux.Portal, kitui.Control, {
    columns: [],
    panels: [],

    allowDrag: true,

    width: 500,
    height: 300,
    uiCls: "kitui-portal",
    _initEvents: function () {
        kitui.on(this.el, "mousedown", this.__OnMouseDown, this);
    },
    destroy: function (removeEl) {

        if (this.panels) {
            var cs = this.panels.clone();
            for (var i = 0, l = cs.length; i < l; i++) {
                var p = cs[i];
                p.destroy(removeEl);
            }
            this.panels.length = 0;
            this.panels = null;
            delete this.panels;
        }
        kitui.ux.Portal.superclass.destroy.call(this, removeEl);
    },
    doLayout: function () {
        if (!this.canLayout()) return;

        kitui.layout(this.el.firstChild);
    },

    setColumns: function (columns) {
        //[100, "50%", 200, "100%"]
        if (!kitui.isArray(columns)) columns = [];

        this.columns = columns;

        var sb = '<table class="kitui-portal-table"><tr>';
        for (var i = 0, l = columns.length; i < l; i++) {
            var c = columns[i];
            if (kitui.isNumber(c)) c += "px";
            sb += '<td id="' + i + '" class="kitui-portal-column" style="width:' + c + '"></td>';
        }
        sb += '</tr></table>';

        this.el.innerHTML = sb;
    },
    getColumnEl: function (index) {
        return this.el.firstChild.rows[0].cells[index];
    },
    getColumnsBox: function () {
        var columns = [];
        for (var i = 0, l = this.columns.length; i < l; i++) {
            var el = this.getColumnEl(i);
            var box = kitui.getBox(el);
            columns.push(box);

            box.height = 3000;
            box.bottom = box.top + box.height;
        }
        return columns;
    },

    /*
    column, id
    title, iconCls, 
    showCloseButton, showMaxButton, showMinButton
    width, height
    allowDrag
    */
    createDefaultPanel: function () {
        return {
            column: 0,
            type: "panel",
            allowDrag: true,
            showCloseButton: true,
            showCollapseButton: true,
            width: "100%",
            height: "100px"
        };
    },
    getPanelBodyEl: function (panel) {
        panel = this.getPanel(panel);
        if (!panel) return;
        return panel.getBodyEl();
    },
    getPanels: function () {
        return this.panels;
    },
    getPanel: function (id) {
        return typeof id == "string" ? kitui.get(id) : id;
    },
    setPanels: function (panels) {
        for (var i = 0, l = panels.length; i < l; i++) {
            this.addPanel(panels[i]);
        }
    },
    removePanel: function (panel) {
        panel = this.getPanel(panel);
        if (!panel) return;
        this.panels.remove(panel);

        var el = panel.el;
        el.parentNode.removeChild(el);
    },
    addPanel: function (panel) {
        if (!panel) return;
        if (kitui.isNumber(panel.column) == false) panel.column = 0;

        if (kitui.isControl(panel) == false) {
            panel = kitui.copyTo(this.createDefaultPanel(), panel);
        }

        panel = kitui.getAndCreate(panel);

        panel.setWidth("100%");
        panel.addCls("kitui-portal-panel");

        var column = this.getColumnEl(panel.column);
        panel.render(column);

        this.panels.push(panel);

        this.doLayout();
    },
    ///////////////////////////////////////////
    getColumnIndexByXY: function (x, y) {
        var elbox = this.getBox();
        elbox.height = 3000;
        elbox.bottom = elbox.top + elbox.height;
        var columnsBox = this.getColumnsBox();
        var index = -1;
        for (var i = 0, l = columnsBox.length; i < l; i++) {
            var box = columnsBox[i];
            if (elbox.x <= x && x <= elbox.right
                && elbox.y <= y && y <= elbox.bottom
                ) {
                if (box.x <= x && x <= box.right) {
                    return i;
                }
            }
        }
        return index;
    },
    _getPanelByY: function (y, column, noPanel) {
        for (var i = 0, l = this.panels.length; i < l; i++) {
            var panel = this.panels[i];
            if (panel.column != column || panel == noPanel) continue;
            var box = panel.getBox();
            box.height += 10;
            box.bottom += 10;

            if (box.y <= y && y <= box.bottom) {
                panel.__moveAction = "after";
                if (y < box.y + box.height / 2) panel.__moveAction = "before";
                return panel;
            }
        }
        return null;
    },
    __OnMouseDown: function (e) {

        var t = kitui.findParent(e.target, 'kitui-portal-panel');
        if (t) {


            var panel = kitui.get(t.id);
            var sf = this;

            if (this.allowDrag && panel.allowDrag && kitui.isAncestor(panel.getHeaderEl(), e.target) && !kitui.findParent(e.target, "kitui-tools")) {
                var box = panel.getBox();
                var drag = new kitui.Drag({
                    capture: false,
                    onStart: function () {
                        kitui.setOpacity(panel.el, .7);

                        panel.setWidth(box.width);
                        panel.el.style.position = "absolute";

                        jQuery(panel.el).before('<div class="kitui-portal-proxy"></div>')[0];
                        sf._dragProxy = panel.el.previousSibling;
                        //kitui.setHeight(sf._dragProxy, box.height);
                        sf._dragProxy.style.height = box.height + "px";

                        panel.el.style.zIndex = kitui.getMaxZIndex();


                    },
                    onMove: function (drag) {
                        //document.title = "move" + new Date().getTime();
                        var x = drag.now[0] - drag.init[0], y = drag.now[1] - drag.init[1];

                        x = box.x + x;
                        y = box.y + y;

                        kitui.setXY(panel.el, x, y);



                        sf._targetColumn = sf._targetPanel = null;

                        var dragBox = kitui.getBox(sf._dragProxy);
                        dragBox.height += 10;
                        dragBox.bottom += 10;
                        if (dragBox.x <= x && x <= dragBox.right
                        && dragBox.y <= y && y <= dragBox.bottom
                        ) {
                            return;
                        }

                        //column
                        var column = sf.getColumnIndexByXY(x, y);
                        if (column != -1) {
                            //var y2 = y + box.height / 2;
                            var tp = sf._getPanelByY(y, column, panel);
                            //                            if (tp) document.title = tp.title + ":" + tp.__moveAction + ":" + column + ":" + new Date().getTime();
                            //                            else {
                            //                                tp = null;
                            //                            }
                            sf._targetColumn = column;
                            sf._targetPanel = tp;
                        }
                        //document.title = column;


                        if (kitui.isNumber(sf._targetColumn)) {
                            if (sf._targetPanel) {
                                var el = sf._targetPanel.el;
                                if (sf._targetPanel.__moveAction == "before") {
                                    jQuery(el).before(sf._dragProxy);
                                } else {
                                    jQuery(el).after(sf._dragProxy);
                                }
                            } else {
                                var el = sf.getColumnEl(sf._targetColumn);
                                kitui.append(el, sf._dragProxy);
                            }
                        }
                    },
                    onStop: function () {
                        //从_dragProxy，找column和index
                        var td = sf._dragProxy.parentNode;
                        var column = parseInt(td.id);

                        jQuery(sf._dragProxy).before(panel.el);

                        sf.panels.remove(panel);

                        var next = sf._dragProxy.nextSibling;
                        if (!next) {
                            sf.panels.push(panel);
                        } else {
                            var targetPanel = kitui.get(next);

                            var index = sf.panels.indexOf(targetPanel);
                            sf.panels.insert(index, panel);
                        }

                        jQuery(sf._dragProxy).remove();
                        sf._maskProxy = null;

                        panel.el.style.position = "static";
                        panel.setWidth("100%");
                        kitui.setOpacity(panel.el, 1);


                        sf._targetColumn = sf._targetPanel = null;
                    }
                });
                drag.start(e);
            }
        }
    }


});
kitui.regClass(kitui.ux.Portal, "portal");
///<jscompress sourcefile="jquery.monthpicker.js" />
(function($) {
	kitui.MonthPicker = function() {
	    kitui.MonthPicker.superclass.constructor.apply(this, arguments);
	};

	kitui.extend(kitui.MonthPicker, kitui.DatePicker, {
	    uiCls: "kitui-monthpicker",
	    valueFormat: "",
	    format: "yyyy-MM",
	    _monthPicker: true    
	});

	kitui.regClass(kitui.MonthPicker, "monthpicker");
})(jQuery);
///<jscompress sourcefile="tabkey.js" />
if ("undefined" == typeof kitui_useTabKey) {
	kitui_useTabKey = true;
}
if ("undefined" == typeof kitui_useTabKey_Mode) {
	kitui_useTabKey_Mode = 1;
}
if ("undefined" == typeof kitui_fireChange) {
	kitui_fireChange = 1;
}
(function($) {

	kitui__inputControl = [kitui.TextBox, kitui.Password, kitui.ComboBox,kitui.MonthPicker, kitui.DatePicker, kitui.Button, kitui.ButtonEdit,kitui.TextArea];

	function kitui__getUIComponents() {
		var components = kitui.getComponents();
		var e = [];
		var inputSorted = [];
		for (var i = 0; i < components.length; i++) {
			var component = components[i];

			for (var k = 0; k < kitui__inputControl.length; k++) {
				var one_ctrl = kitui__inputControl[k];
				if (component instanceof one_ctrl) {
					e.push(component);
					break;
				}
			}
		}
		
		jQuery(":input").each(function(idx , emt){
		    jQuery.each(e,function(n,component) {
		    	 if (component instanceof kitui.Button) {
					if(component.el == emt){
						inputSorted.push(component);
					    return true;
					}
				 }else if (component._textEl && emt == component._textEl) {
				 	inputSorted.push(component);
					return true;
				 }
		    });  
		});
		return inputSorted;
	}

	function kitui__getUIComponentIdxByEmt(components, emt) {
		var rtn = {type:'',idx:'-1'};
		for (var i = 0; i < components.length; i++) {
			var component = components[i];
			if (component instanceof kitui.Button||component instanceof kitui.TextArea) {
				if(component.el == emt){
					rtn.type="button"
					rtn.idx=i
				    return rtn;
				}else if(component instanceof kitui.TextArea){
					rtn.type="textarea"
					rtn.idx=i
				    return rtn;					
				}
			}			
			if (component._textEl && emt == component._textEl) {
				rtn.type="el"
				rtn.idx=i
				return rtn;
			}
		}
		return rtn;
	}

	function kitui__filterListener(component, eventName , isRemove) {
		eventName = eventName.toLowerCase();
		var e = component._events[eventName];
		var f = e;
		if(isRemove){
			if (e && e.length > 0) {
				component._events[eventName] = [];
				delete component._events[eventName];
			}
		}
		return f;
	}

	function kitui__revertListener(component, eventName, events) {
		if (events) {
			eventName = eventName.toLowerCase();
			component._events[eventName] = events;
		}
	}

	function kitui__fireListener(component, eventName, eventObj) {
		if (eventObj) {
			var t = {};
			if (t && t != component) {
				t.source = t.sender = component;
				if (!t.type) {
					t.type = eventName;
				}
			}
			if(!component instanceof kitui.ComboBox)
				component.setValue(component._textEl.value);
			return eventObj[0].apply(eventObj[1], [t]);
		}
	}

	kitui__OnBodyLoad = function(e) {
		var components = kitui__getUIComponents();
		for (var i = 0; i < components.length; i++) {
			var next_component = components[i];

			if (!next_component.allowInput) {
				if (!(next_component instanceof kitui.ComboBox) && !(next_component instanceof kitui.Button)) {
					continue;
				}
			}

			if (!next_component.visible || !next_component.enabled || next_component.readOnly) {
				continue;
			}

			next_component.selectOnFocus = true;
			next_component.focus();
			if(next_component._initInputEvents){
				next_component._initInputEvents();
			}
			next_component.fire("focus");
			return false;
		}
	}

	kitui__OnBodyKeyDown = function(e) {
		
		function __fire(componentObj,eventName,isRemove){
			try {
				var func = kitui__filterListener(componentObj, eventName , isRemove);
				if (func && func.length > 0) {
					var ret = kitui__fireListener(componentObj, eventName, func ? func[0] : null);
					if (ret == false) {
						return false;
					}
				}
			} finally {
				if(isRemove){
					setTimeout(function() {
						kitui__revertListener(componentObj, eventName,func);
					}, 50);
				}
			}
			
			return true;
		}

		var evt = e || window.event;

		var currElement = document.activeElement;

		if (evt || evt.stopPropagation) {
			evt.stopPropagation();
		} else {
			evt.CancelBubble = true;
		}

		if (evt.keyCode == 13 || evt.keyCode == 9) {
			var components = kitui__getUIComponents();
			var __o = kitui__getUIComponentIdxByEmt(components, currElement);
			var idx = __o["idx"];
			if (idx == -1) {
				return false;
			} else if (__o["type"]=="button"||__o["type"]=="textarea") {
				return true;
			}

			var component = components[idx];
			if(!kitui_useTabKey_Mode||!kitui_useTabKey){
				return false;
			}
			if(kitui_useTabKey_Mode == 1){
				if(kitui_fireChange==1){
					var retCode = __fire(component, "valuechanged",false);
					if(retCode === false){
					   component.focus();
					   return false;
					}					
				}else{
					component.focus();
				}
			}else if(kitui_useTabKey_Mode == 2){
			   if(typeof component["skipKey"] != "undefined" && component.skipKey === false){
				   component.focus();
				   return false;
				} 
			}
			
			for (var i = idx + 1; i < components.length; i++) {
				var next_component = components[i];

				if (!next_component.allowInput) {
					if (!(next_component instanceof kitui.ComboBox) && !(next_component instanceof kitui.Button)) {
						continue;
					}
				}

				if (!next_component.visible || !next_component.enabled || next_component.readOnly) {
					continue;
				}

				next_component.selectOnFocus = true;
				next_component.focus();
				next_component.fire("focus");

				component.fire("blur");

				return false;
			}

			return false;
		}else if(evt.keyCode == 37||evt.keyCode == 39){
			var components = kitui__getUIComponents();
			var __o = kitui__getUIComponentIdxByEmt(components, currElement);
			var idx = __o["idx"];
			if(__o["type"]=="button"){
				var i = idx + 1
				if(evt.keyCode == 39){
					//var next_component = components[i];alert(next_component.visible)
					var next_component = getNextComponents(components,i);
					if(next_component instanceof kitui.Button){
						next_component.focus();
						next_component.fire("focus");
						return false;
					}						
				}else{
					//var next_component = components[i-2];
					var next_component = getPreComponents(components,i);
					if(next_component instanceof kitui.Button){
						next_component.focus();
						next_component.fire("focus");
						return false;
					}else{
						return false
					}		
				}
		
			}
		}
	};

	kitui.on(document, "keydown", kitui__OnBodyKeyDown, this);
	kitui.on(window, "load", kitui__OnBodyLoad, this);

})(jQuery);
function getPreComponents(components,idx){
	var componet = components[idx-2];
	if(componet.el.style.display=="none"){
		idx=idx-1;
		componet=getPreComponents(components,idx);
	}
	return componet;
};
function getNextComponents(components,idx){
	var componet = components[idx];
	if(componet.el.style.display=="none"){
		idx=idx+1;
		componet=getNextComponents(components,idx);
	}
	return componet;
};
kitui.copyTo(kitui.TextBox.prototype, {
	__OnInputTextChanged : function(e, t) {
		var i = this.value;
		//this.setValue(this._textEl.value);
		if (i !== this.getValue() || true === t) {
			if (arguments.length > 0 && arguments[0] === null) {
				if (kitui_useTabKey)
					return;
			}
			this._OnValueChanged();
		}
	}
});

kitui.copyTo(kitui.Password.prototype, {
	__OnInputTextChanged : function(e, t) {
		var i = this.value;
		//this.setValue(this._textEl.value);
		if (i !== this.getValue() || true === t) {
			if (arguments.length > 0 && arguments[0] === null) {
				if (kitui_useTabKey && kitui_useTabKey_Mode == 1)
					return;
			}
			this._OnValueChanged();
		}
	}
});

kitui.copyTo(kitui.ButtonEdit.prototype, {
	__OnInputTextChanged : function() {
		var e = this._textEl.value;
		if (e == this.text) {
			return;
		}
		var t = this.getValue();
		this.setText(e);
		this.setValue(e);
		if (t !== this.getFormValue()) {
			if (arguments.length > 0 && arguments[0] === null) {
				if (kitui_useTabKey && kitui_useTabKey_Mode == 1)
					return;
			}
			this._OnValueChanged();
		}
	}
});

kitui.copyTo(kitui.DatePicker.prototype, {
	__OnInputTextChanged : function() {
		var e = this._textEl.value, t = this.getFormValue("U");
		if ("date" == this.valueType) {
			var i = kitui.parseDate(e);
			if (!i || isNaN(i)) {
				i = null;
			}
		}
		this.setValue(e);
		if (t !== this.getFormValue("U")) {
			if (arguments.length > 0 && arguments[0] === null) {
				if (kitui_useTabKey && kitui_useTabKey_Mode == 1)
					return;
			}
			this._OnValueChanged();
		}
	}
});

kitui.copyTo(kitui.MonthPicker.prototype, {
	__OnInputTextChanged : function() {
		var e = this._textEl.value, t = this.getFormValue("U");
		if ("date" == this.valueType) {
			var i = kitui.parseDate(e);
			if (!i || isNaN(i)) {
				i = null;
			}
		}
		this.setValue(e);
		if (t !== this.getFormValue("U")) {
			if (arguments.length > 0 && arguments[0] === null) {
				if (kitui_useTabKey && kitui_useTabKey_Mode == 1)
					return;
			}
			this._OnValueChanged();
		}
	}
});

///<jscompress sourcefile="jquery.containerPanel.js" />
(function($) {
	kitui.ContainerPanel = function() {
	    kitui.ContainerPanel.superclass.constructor.call(this);
	};
	
	kitui.extend(kitui.ContainerPanel,kitui.Fit, {
	    uiCls: "kitui-containerpanel",
		url  : "",
		model: "",
		autoload : true , 
	    source   : true ,  

	    _create: function() {
	        this.el = document.createElement("div");
	        this.el.className = "kitui-containerpanel";
			this._bodyEl = this.el;
	    },
	    _initEvents: function() {
	    },
	    _clearIframe : function(){
	    	if(this._iframeEl){
	    		if(!kitui.isIE){
					var ic = this._iframeEl.contentWindow;
					if(ic && ic.jQuery){
						ic.jQuery(ic).trigger("unload");
					}
					ic = null;
				}
				this._iframeEl.src = "";

	    		if(kitui.isIE){
					try{ 
						this._iframeEl.contentWindow.document.write('');
						this._iframeEl.contentWindow.close()
					}catch(e){
					}
				}

		    	this._bodyEl.removeChild(this._iframeEl); 
		    	this._iframeEl = null;
	    	}
	    },
	    _clearAjax : function(){
			if(this._initpageComponents){
				for(var p in this._loadpageComponents){
					if(!this._initpageComponents[p]){
						this._loadpageComponents[p].destroy();
					}
				}
			} 
			$(this._bodyEl).html("");
	    },
	    clear : function (){
	    	if(this.model == 'iframe'){
				this._clearIframe();
			}else{
				this._clearAjax();
			}
	    },
		load : function(url){
			if(!url){
				this.clear();
				return;
			}
			url = url +  "&menuId=" + getMenuIdFromDocumentUrl() + "&userCode=" + getUserCodeFromDocumentUrl() + "&year="+getYearFromDocumentUrl();
			if(this.model == 'iframe'){
				this._LoadIframeContainer(url);
			}else{
				$(this._bodyEl).css("overflow","auto");
				this._LoadAjaxContainer(url);
			}
		},
		_LoadAjaxContainer : function(url){

			var ajaxurl = url;
			if(this.source){
				ajaxurl = "ajaxview?path="+url
			}
			var self = this;
			$.ajax({
				url: ajaxurl,
				type: "get",
			    dataType:"text",
				beforeSend:function(){
					var a = a || {};
					a.html="页面加载中..."
					a.el = document.body;
					self.clear();
					self._initpageComponents =kitui.components;
					if (!a.cls) {
						a.cls = "kitui-mask-loading";
					}
					kitui.mask(a);	    	
				},
				success: function (data) {
				    
					$(self._bodyEl).html(data);
					kitui._doParse(self._bodyEl);
					try{
						ui_ajaxhtml_init();
					}catch(e){
						
					}
			
					self._loadpageComponents =kitui.components;
				
				},
				error: function (jqXHR, textStatus, errorThrown) {
						alert(jqXHR.responseText);
					
               },
                complete:function(){
                	kitui.unmask(document.body);
                }
               });
		
		},
		_LoadIframeContainer : function(url){
			if(!this._iframeEl){
				this._iframeEl = document.createElement("iframe");
				this._iframeEl.setAttribute("frameborder","no");
				this._iframeEl.setAttribute("style","top:0;left:0;width:100%;height:100%;border:0;position:relative;");
				this._iframeEl.setAttribute("src",(this.source)?("view?path="+url):url);
				this._bodyEl.appendChild(this._iframeEl);
			}else{
				if(this.source)
					this._iframeEl.src = "view?path="+url
				else
					this._iframeEl.src = url;			
			}
		},
		setModel:function(model){
			this.model= model;
				
			if(this.url){
				this.load(this.url);
			}
		},
		setUrl:function(url){
			this.url = url;
				
			if(this.model){
				this.load(this.url);
			}
		},
		destroy:function(a){
		    this.clear();
			if(this._initpageComponents){
				this._initpageComponents = null;
			}
			if(this._loadpageComponents){
				this._loadpageComponents = null;
			}
			kitui.ContainerPanel.superclass.destroy.call(this, a);
		}		
	});
	
	kitui.regClass(kitui.ContainerPanel, "containerpanel");	
})(jQuery);
///<jscompress sourcefile="jquery.fileupload.js" />
function deleteValue(obj,id){
	if(confirm("是否确定要删除？")){
		$(obj).closest("li").remove();
		return true;
	}else{
		return false;
	}
//	return kitui.confirm("确定删除？","提示",function(e){
//		if(e=="ok"){
//			$(obj).closest("li").remove();
//			return true;
//		}
//		else
//			return false;
//	})
}
(function($) {
	kitui.FileUpload = function(e) {
	    this.postParam = {};
	    kitui.FileUpload.superclass.constructor.call(this, e);
	};
	
	kitui.extend(kitui.FileUpload, kitui.ButtonEdit, {
	    name: "Filedata",
	    buttonText: "浏览...",
	    _buttonWidth: 56,
	    formField: true,
	    limitTypeErrorText: "上传文件格式为：",
	    readOnly: true,
	    _cellSpacing: 0,
	    limitSize: "",
	    limitType: "",
	    typesDescription: "上传文件格式",
	    uploadLimit: 0,
	    queueLimit: "",
	    flashUrl: "swfupload.swf",
	    uploadUrl: "tt_upload",
	    showUploadProgress: true,
	    postParam: null,
	    uploadOnSelect: true,
	    uiCls: "kitui-fileupload",
	    canDel:true
	});
	
	kitui.copyTo(kitui.FileUpload.prototype, {
	    getAttrs: function(e) {
	        var t = kitui.FileUpload.superclass.getAttrs.call(this, e);
	        kitui._ParseString(e, t, [ "limitType", "limitSize", "flashUrl", "uploadUrl", "uploadLimit", "buttonText", "showUploadProgress", "onuploadsuccess", "onuploaderror", "onuploadcomplete", "onfileselect", "onuploadprogress", "onqueuederror" ]);
	        kitui._ParseBool(e, t, [ "uploadOnSelect" ]);
	        return t;
	    },
	    __fileError: function() {},
	    __on_upload_complete: function(e) {
	    	
		if (this.swfUpload.getStats().files_queued > 0) {
			this.swfUpload.startUpload();
		}	    	
	        this._progressbarEl.style.display = "none";
	        this.fire("uploadcomplete", e);
	    },
	    __on_upload_error: function(e, t, i) {
	        if ("File Cancelled" == i) {
	            return;
	        }
	        this._progressbarEl.style.display = "none";
	        var n = {
	            file: e,
	            code: t,
	            message: i
	        };
	        this.fire("uploaderror", n);
	    },
	    __on_upload_success: function(e, t) {
	        var i = {
	            file: e,
	            serverData: t
	        };
	        this.fire("uploadsuccess", i);

	        this.setSingleValue(i.serverData);	        
	        this._progressbarEl.style.display = "none";
	    },
	    __on_file_queued: function(e) {
//	        var t = this.swfUpload.getStats();
//	        if (t) {
//	            var i = t.files_queued;
//	            if (i > 1) {
//	                for (var n = 0; n < i - 1; n++) {
//	                    this.swfUpload.cancelUpload();
//	                }
//	            }
//	        }
	        var s = {
	            file: e
	        };
	        this.fire("fileselect", s);
	        if (true == s.cancel) {
	            return;
	        }
	        if (this.uploadOnSelect) {
	            this.startUpload();
	        }
	    },
	    __on_file_queued_error: function(e, t, i) {
	        var n = {
	            file: e,
	            code: t,
	            msg: i
	        };
	        if(t=="-110"){
	        	alert("上传文件大小超过系统设置: "+this.limitSize);
	        }else if(t=="-120"){
	        	alert("不能上传空文件！");
	        }else if(t=="-130"){
	        	alert("只能上传 "+this.limitType+" 类型的文件！")
	        }else{
	        	alert(n.msg);
	        }
	        this.fire("queuederror", n);
	    },
	    __on_upload_progress: function(e, t, i) {
	        if (this.showUploadProgress) {
	            var n = kitui.getWidth(this._progressbarEl), s = n * t / i;
	            kitui.setWidth(this._completeEl, s);
	        }
	        this._progressbarEl.style.display = this.showUploadProgress ? "block" : "none";
	        var o = {
	            file: e,
	            complete: t,
	            total: i
	        };
	        this.fire("uploadprogress", o);
	    },
	    __on_dialog_complete:function(e, t, i){
	    	
	    },
	    clear: function() {
	        this.setValue("");
	        if (this.swfUpload) {
	            this.swfUpload.cancelUpload();
	        }
	    },
	    getShowUploadProgress: function() {
	        return this.showUploadProgress;
	    },
	    setShowUploadProgress: function(e) {
	        this.showUploadProgress = e;
	        this._progressbarEl.style.display = e ? "block" : "none";
	    },
	    startUpload: function() {
	        var e = {
	            cancel: false
	        };
	        this.fire("beforeupload", e);
	        if (true == e.cancel) {
	            return;
	        }
	        if (this.swfUpload) {
	            this.swfUpload.setPostParams(this.postParam);
	            this.swfUpload.startUpload();
	        }
	    },
	    setName: function(e) {
	        this.name = e;
	    },
	    getUploadUrl: function() {
	        return this.uploadUrl;
	    },
	    setUploadUrl: function(e) {
	        if (this.swfUpload) {
	            this.swfUpload.setUploadURL(e);
	        }
	        this.uploadUrl = e;
	    },
	    setFlashUrl: function(e) {
	        this.flashUrl = e;
	    },
	    setQueueLimit: function(e) {
	        this.queueLimit = e;
	    },
	    setUploadLimit: function(e) {
	        this.uploadLimit = e;
	    },
	    getButtonText: function() {
	        return this.buttonText;
	    },
	    setButtonText: function(e) {
	        this.buttonText = e;
	        this._buttonEl.innerHTML = e;
	    },
	    getTypesDescription: function() {
	        return this.typesDescription;
	    },
	    setTypesDescription: function(e) {
	        this.typesDescription = e;
	        if (this.swfUpload) {
	            this.swfUpload.setFileTypes(this.limitType, this.typesDescription);
	        }
	    },
	    getLimitType: function() {
	        return this.limitType;
	    },
	    setLimitType: function(e) {
	        this.limitType = e;
	        if (this.swfUpload) {
	            this.swfUpload.setFileTypes(this.limitType, this.typesDescription);
	        }
	    },
	    getPostParam: function() {
	        return this.postParam;
	    },
	    setPostParam: function(e) {
	        this.addPostParam(e);
	    },
	    addPostParam: function(e) {
	        kitui.copyTo(this.postParam, e);
	    },
	    __OnMouseMove: function() {
	        if (false == this.enabled) {
	            return;
	        }
	        var e = this;
	        if (!this.swfUpload) {
	            var t = new SWFUpload({
	                file_post_name: "Filedata",
	                upload_url: e.uploadUrl,
	                flash_url: e.flashUrl,
	                file_size_limit: e.limitSize,
	                file_types: e.limitType,
	                file_types_description: e.typesDescription,
	                file_upload_limit: parseInt(e.uploadLimit),
	                file_queue_limit: e.queueLimit,
	                file_queued_handler: kitui.createDelegate(this.__on_file_queued, this),
	                upload_error_handler: kitui.createDelegate(this.__on_upload_error, this),
	                upload_success_handler: kitui.createDelegate(this.__on_upload_success, this),
	                upload_complete_handler: kitui.createDelegate(this.__on_upload_complete, this),
	                upload_progress_handler: kitui.createDelegate(this.__on_upload_progress, this),
	                file_queue_error_handler: kitui.createDelegate(this.__on_file_queued_error, this),
	                file_dialog_complete_handler:kitui.createDelegate(this.__on_dialog_complete, this),
	                button_placeholder_id: this._uploadId,
	                button_width: 50,
	                button_height: 50,
	                button_window_mode: "transparent",
	                //button_action: SWFUpload.BUTTON_ACTION.SELECT_FILES,
	                debug: false
	            });
	            t.flashReady();
	            this.swfUpload = t;
	            var i = this.swfUpload.movieElement;
	            i.style.zIndex = 1e3;
	            i.style.position = "absolute";
	            i.style.left = (this._buttonEl.parentNode.parentNode.clientWidth+52)+"px";
	            i.style.top = "5px";
	            i.style.width = "50px";
	            i.style.height = "50px";
	        }
	    },
	    destroy: function(e) {
	        if (this._innerEl) {
	            kitui.clearEvent(this._innerEl);
	            this._innerEl = null;
	        }
	        if (this.swfUpload) {
	            this.swfUpload.destroy();
	            this.swfUpload = null;
	        }
	        if (!this.destroyed) {
	            kitui.clearEvent(this._borderEl);
	        }
	        kitui.FileUpload.superclass.destroy.call(this, e);
	    },
	    setValue:function(vs,appendbs){
	    	if(!appendbs){
	    		$(this._textEl).empty();
	    		if(vs){
					var arr = vs.split("|");
					var len = arr.length;
					for(var i=0;i<len;i++){
			    		var v = arr[i];
			    		this.setSingleValue(v)
			    	}	    		
	    		}
	    		
	    	}else{
		    	if(!vs){
		    		$(this._textEl).empty()
		    	}else{
					var arr = vs.split("|")
					var len = arr.length;
			    	for(var i=0;i<len;i++){
			    		var v = arr[i];
			    		this.setSingleValue(v)
			    	}	 	    		
		    	}	    		
	    	}
	    },
	    setSingleValue:function(v){
	   
	    	var filediv = document.createElement("li");
	    	var fid = v.split(":")[0];
	    	filediv.id = 'file_'+fid
	    	var downname = v.split(":")[1];
	    	var s = '<span>'+downname;
	    	downname = encodeURIComponent(downname);
	    	var downurl = "tt_download.do?downname="+downname+"&filename="+fid;
	    	var delurl = "tt_delete.do?filename="+fid;
			var downs = '<A href="'+downurl+'" target="fileuploadiframe"><img src="ui/themes/default/images/file/download.gif" alt="下载" style="border:none;"></A>'
	    	var dels = '<A href="'+delurl+'" onclick=\'return deleteValue(this,"'+fid+'")\'  target="fileuploadiframe"><img src="ui/themes/default/images/file/delete.gif" alt="删除" style="border:none;"></A>'
	    	if(kitui.toBoolean(this.canDel)){
	    		s+=downs+dels
	    	}else{
	    		s+=downs
	    	}
	    	s += '</span>'
	    	filediv.innerHTML = filediv.innerHTML+s;
	    	$(filediv).addClass("textboxlist-bit textboxlist-bit-box textboxlist-bit-box-deletable");
	    	kitui.append(this._textEl,filediv)
	    },
	    getValue:function(){
	    	var s = "";
	    	var len = $(this._textEl).children("li").length
	    	for(var i=0;i<len;i++){
	    		s+="|"+$($(this._textEl).children("li")[i]).attr("id").replace("file_","")+":"+$($(this._textEl).children("li")[i]).children('span').text()
	    	}
	    	if(s)
	    		s = s.substring(1)
	    	return s;
	    },
	    _getButtonHtml: function() {
	        var e = "onmouseover=\"kitui.addClass(this,'" + this._buttonHoverCls + "');\" onmouseout=\"kitui.removeClass(this,'" + this._buttonHoverCls + "');\"";
	        return '<span style="line-height:15px" class="kitui-buttonedit-button" ' + e + ">" + this.buttonText + "</span>";
	    },
	    _create: function() {
	        this.el = document.createElement("span");
	        this.el.className = "kitui-fileuploadt";
	        var a = this._getButtonsHTML();
	        this.el.innerHTML = '<span class="kitui-fileupload-border"><ul class="kitui-fileupload-input textboxlist-bits" autocomplete="off"></ul>' + a + '</span><input name="' + this.name + '" type="hidden"/><iframe name=fileuploadiframe style="display:none"></iframe>';
	        this._borderEl = this.el.firstChild;
	        this._textEl = this._borderEl.firstChild;
	        this._valueEl = this.el.lastChild;
	        this._buttonsEl = this._borderEl.lastChild;
	        this._buttonEl = this._buttonsEl.lastChild;
	        this._closeEl = this._buttonEl.previousSibling;
	        this._doEmpty();
	        kitui.addClass(this.el, "kitui-htmlfile");
	        this._progressbarEl = kitui.append(this._borderEl, '<div id="' + this._id + '$progressbar"  class="kitui-fileupload-progressbar"><div id="' + this._id + '$complete" class="kitui-fileupload-complete"></div></div>');
	        this._completeEl = this._progressbarEl.firstChild;
	        this._uploadId = this._id + "$button_placeholder";
	        this._fileEl = kitui.append(this.el, '<span id="' + this._uploadId + '"></span>');
	        this.uploadEl = this._fileEl;
	        kitui.on(this._buttonEl, "mousemove", this.__OnMouseMove, this);
	    }
	});
	
	kitui.regClass(kitui.FileUpload, "fileupload");

})(jQuery);


(function($) {
	kitui.RichEditor = function() {
		kitui.RichEditor.superclass.constructor.apply(this, arguments);
	};
	
	kitui.extend(kitui.RichEditor, kitui.Control, {
		uiCls : "kitui-richeditor",
		ue:"",
		wordCount:false,
		_create : function() {
			var s = '<div id="editor" style="width:100%;height:100%;">'
			this.el = document.createElement("span");
			this.el.className = "";
			this.el.innerHTML = s;
			this._borderEl = this.el.firstChild;
			this._textEl = this._borderEl.firstChild;
			this._valueEl = this._borderEl.lastChild;
			this.doUpdate();
		},
		getAttrs : function(el) {
			var t = kitui.RichEditor.superclass.getAttrs.call(this, el);
			return t;
		},		
		setWordcount:function(e){
			this.wordcount=e;
			this.ue.options.wordCount=e;
		},
		doUpdate:function(){
			this.ue = UE.getEditor('editor',{
				wordCount:this.wordcount,//关闭字数统计
				initialFrameHeight:document.body.clientHeight - 240,
				//initialFrameHeight:$("#editor").parent("td").css("height").replace("px","")-100,
				initialFrameWidth:document.body.clientWidth-10,
				fullscreen:false,
 				toolbars: [[
                      'bold','italic','underline','forecolor','backcolor','|',
                      'fontfamily','fontsize','|',
                      'removeformat','formatmatch','pasteplain','|','attachment','|',
                      'justifyleft','justifyright','justifycenter','justifyjustify','|',
                      'source','|',
                      'insertcode']],
				autoHeight:false,
				autoHeightEnabled: false,//是否自动长高,默认true
				autoFloatEnabled: false,//是否保持toolbar的位置不动
				focus: false,//初始化时，是否让编辑器获得焦点
				enableAutoSave:false,//不自动保存
				autoClearinitialContent:false,//是否自动清除编辑器初始内容
				onready: function () {
			       // 重新布局外部容器
			       //F(containerClientID).updateLayout();
   				}
			});
		}
	});
	kitui.regClass(kitui.RichEditor, "richeditor");
})(jQuery);
///<jscompress sourcefile="jquery.hidden.js" />
(function($) {
	kitui.Hidden = function() {
	    kitui.Hidden.superclass.constructor.call(this);
	};
	
	kitui.extend(kitui.Hidden, kitui.Control, {
		formField: true,
		uiCls: "kitui-hidden",
		_create : function() {
			var s = '<input  type="hidden">';
			this.el = document.createElement("span");
			this.el.className = "kitui-hidden";
			this.el.innerHTML = s;
			this._textEl = this.el.firstChild;
			this._valueEl = this.el.firstChild;
		},
		getValue : function() {
			return this._textEl.value;
		},
		setValue : function(value) {
			this._textEl.value=value
		}
	});

	kitui.regClass(kitui.Hidden, "hidden");

})(jQuery);
///<jscompress sourcefile="kitui.ext.js" />
if ("undefined" == typeof kitui_useCrossFrame) {
	kitui_useCrossFrame = true;
}

var $E = {};

$E.getPosition = function(m) {
	var k = m.ownerDocument;
	if (m.parentNode === null || m.style.display == "none") {
		return false
	}
	var l = null;
	var j = [];
	var g;
	if (m.getBoundingClientRect) {

		g = m.getBoundingClientRect();
		var c = Math.max(k.documentElement.scrollTop, k.body.scrollTop);
		var d = Math.max(k.documentElement.scrollLeft, k.body.scrollLeft);
		var b = g.left + d - k.documentElement.clientLeft;
		var a = g.top + c - k.documentElement.clientTop;
		if (isIE) {
			b--;
			a--
		}
		return {
			x : b,
			y : a
		}

	} else {

		if (k.getBoxObjectFor) {
			g = k.getBoxObjectFor(m);
			var h = (m.style.borderLeftWidth) ? parseInt(m.style.borderLeftWidth)
					: 0;
			var f = (m.style.borderTopWidth) ? parseInt(m.style.borderTopWidth)
					: 0;
			j = [ g.x - h, g.y - f ]
		}

	}
	if (m.parentNode) {
		l = m.parentNode
	} else {
		l = null
	}
	while (l && l.tagName != "BODY" && l.tagName != "HTML") {
		j[0] -= l.scrollLeft;
		j[1] -= l.scrollTop;
		if (l.parentNode) {
			l = l.parentNode
		} else {
			l = null
		}

	}
	return {
		x : j[0],
		y : j[1]
	}

};

$E.getPositionEx = function(c) {
	var f = $E.getPosition(c);
	var d = window;
	var a, b;
	while (d != d.parent && d != kitui._topWindow) {
		if (d.frameElement) {
			pos2 = $E.getPosition(d.frameElement);
			f.x += pos2.x;
			f.y += pos2.y
		}
		a = Math.max(d.document.body.scrollLeft,
				d.document.documentElement.scrollLeft);
		b = Math.max(d.document.body.scrollTop,
				d.document.documentElement.scrollTop);
		f.x -= a;
		f.y -= b;
		d = d.parent
		if(d == kitui._topWindow)
			break;
	}
	return f
};

$E.getParent = function(a, b) {
	while (b) {
		if (b.tagName.toLowerCase() == a.toLowerCase()) {
			return $(b)
		}
		b = b.parentElement
	}
	return null
};

$E.getParentByAttr = function(a, c, b) {
	while (b) {
		if (b.getAttribute(a) == c) {
			return $(b)
		}
		b = b.parentElement
	}
	return null
};

$E.getTopLevelWindow = function() {
	var a = window;
	while (a != a.parent) {
		a = a.parent
	}
	return a
};

kitui.copyTo(kitui,$E);

kitui.createIFrame = function(e, t, i) {
    if (!e) {
        e = "";
    }
    var n = e.split("#");
    e = n[0];
    var s = "";
    if (true !== i) {
        s = "_t=" + Math.floor(1e6 * Math.random());
        if (-1 == e.indexOf("?")) {
            e += "?" + s;
        } else {
            e += "&" + s;
        }
    }
    if (e && -1 == e.indexOf("_winid")) {
        s = "_winid=" + kitui._WindowID;
        if (-1 == e.indexOf("?")) {
            e += "?" + s;
        } else {
            e += "&" + s;
        }
    }
    if (n[1]) {
        e = e + "#" + n[1];
    }
    var o = -1 != e.indexOf(".mht"), r = o ? e : "", l = '<iframe src="' + r + '" style="width:100%;height:100%;"  frameborder="0"></iframe>', a = document.createElement("div"), h = kitui.append(a, l), u = false;
    if (o) {
        u = true;
    } else {
        setTimeout(function() {
            if (h) {
                h.src = e;
                u = true;
            }
        }, 5);
    }
    if (h.attachEvent) {
        h.attachEvent("onload", f);
    } else {
        h.onload = f;
    }
    var d = false, c = true;
    function f() {
        if (false == u || d) {
            return;
        }
        setTimeout(function() {
            if (t) {
                t(h, c);
            }
            c = false;
        }, 1);
    }
    h._ondestroy = function() {
        d = true;
		h.onload = function() {};
        jQuery(h).unbind("load");

		if(!kitui.isIE){
	        if(h.contentWindow && h.contentWindow.jQuery){
	        	h.contentWindow.jQuery(h.contentWindow).trigger("unload");
	        }        	
        }
        h.src = "";
		if(kitui.isIE){
			try {
				h.contentWindow.document.write("");
				h.contentWindow.document.close();
			} catch (e) {}
		}
        h._ondestroy = null;
        h = null;
    };
    return h;
};

kitui.copyTo(kitui,{
	getXYEx: function(a) {
	        var b = kitui.getPositionEx(a);
	        return [ parseInt(b.x), parseInt(b.y)];
	},
	getViewportBoxEx: function() {
//        var b = top.jQuery(top.window).width(), c = top.jQuery(top.window).height();
//        var a = top.jQuery(top.document).scrollLeft(), d = top.jQuery(top.document.body).scrollTop();
		var _tw = kitui._topWindow;
		var b =  _tw.document.body.scrollWidth,c = _tw.document.body.scrollHeight;
		var a = _tw.document.body.scrollLeft,d=_tw.document.body.scrollTop;
//        if (top.document.documentElement) {
//            d = top.document.documentElement.scrollTop;
//        }
        return {
            x: a,
            y: d,
            width: b,
            height: c,
            right: a + b,
            bottom: d + c
        };
    },
	getBoxEx: function(a) {
	        var c = kitui.getXYEx(a);
	        var b = {
	            x: c[0],
	            y: c[1],
	            width: kitui.getWidth(a),
	            height: kitui.getHeight(a)
	        };
	        b.left = b.x;
	        b.top = b.y;
	        b.right = b.x + b.width;
	        b.bottom = b.y + b.height;
	        return b;
	 }  
});
function __isDisplay(e){
    var _topWin = window;
	if(kitui_useCrossFrame){
		var p = kitui.findParent(this.el,"kitui-popup");
		if(p){
	       _topWin = kitui._getTopWindow();
	    }
	}
    if (!_topWin.kitui||false == _topWin.kitui.WindowVisible || !this.el) {
        return false;
    }
    var t = _topWin.document.body, i = this.el;
//    var t = document.body, i = this.el;
    while (1) {
        if (null == i || !i.style) {
            return false;
        }
        if (i && i.style && "none" == i.style.display) {
            if (e) {
                if (true !== e(i)) {
                    return false;
                }
            } else {
                return false;
            }
        }
        if (i == t) {
            return true;
        }
        i = i.parentNode;
    }
    return true;
}


kitui.copyTo(kitui.ListBox.prototype, {
	getItemEl: function(e) {
		var _topWin = window;
		if(kitui_useCrossFrame){
		    var p = kitui.findParent(this.el,"kitui-popup");
			if(p){
		       _topWin = kitui._getTopWindow();
		    }
		}
		e = this.getItem(e);
        var t = this.data.indexOf(e), i = this._createItemId(t);
        return _topWin.document.getElementById(i);
	},
	isDisplay: __isDisplay
});

kitui.copyTo(kitui.Popup.prototype, {
	destroy : function (e){
		if (this.el) {
            this.el.onmouseover = null;
        }
        kitui.un(document, "mousedown", this.__OnBodyMouseDown, this);
        kitui.un(window, "resize", this.__OnWindowResize, this);
        if (this._modalEl) {
            jQuery(this._modalEl).remove();
            this._modalEl = null;
        }
        if (this.shadowEl) {
            jQuery(this.shadowEl).remove();
            this.shadowEl = null;
        }
        if (this._shimEl) {
            jQuery(this._shimEl).remove();
            this._shimEl = null;
        }
        kitui.Popup.superclass.destroy.call(this, true);
	},
	showAtEl: function(e, t) {
    	var sss = e;
        e = kitui.byId(e);
        if(kitui.get(sss)&&kitui.get(sss).getLabelField()){
        	e = kitui.byId(e).childNodes[0];
        }
        if (!e) {
            return;
        }

        if (!this.isRender() || this.el.parentNode != document.body) {
        	if(kitui_useCrossFrame){
        		this.render(kitui._getTopWindow().document.body);
//        		this.render(document.body);
        	}else{
        		this.render(document.body);
        	}    
        }
        var i = {
            atEl: e,
            popupEl: this.el,
            xAlign: this.xAlign,
            yAlign: this.yAlign,
            xOffset: this.xOffset,
            yOffset: this.yOffset,
            popupCls: this.popupCls
        };
        kitui.copyTo(i, t);
        kitui.addClass(e, i.popupCls);
        e.popupCls = i.popupCls;
        this._popupEl = e;
        this.el.style.position = "absolute";
        this.el.style.left = "-2000px";
        this.el.style.top = "-2000px";
        this.el.style.display = "";
        this.doLayout();
        this._measureSize();
      	if(!kitui_useCrossFrame ){
           var n = kitui.getViewportBox(); s = kitui.getBox(this.el); o = kitui.getBox(e);
        }else{
           var n = kitui.getViewportBoxEx(); s = kitui.getBoxEx(this.el); o = kitui.getBoxEx(e);
        }
        r = i.xy,l = (i.xAlign, i.yAlign, n.width / 2 - s.width / 2),a = 0;
        if (r) {
            l = r[0];
            a = r[1];
        }
        switch (i.xAlign) {
          case "outleft":
            l = o.x - s.width;
            break;

          case "left":
            l = o.x;
            break;

          case "center":
            l = o.x + o.width / 2 - s.width / 2;
            break;

          case "right":
            l = o.right - s.width;
            break;

          case "outright":
            l = o.right;
        }
        switch (i.yAlign) {
          case "above":
            a = o.y - s.height;
            break;

          case "top":
            a = o.y;
            break;

          case "middle":
            a = o.y + o.height / 2 - s.height / 2;
            break;

          case "bottom":
            a = o.bottom - s.height;
            break;

          case "below":
            a = o.bottom;
        }
        l = parseInt(l);
        a = parseInt(a);
        var h = this._getWindowOffset(t);
        if (i.outYAlign || i.outXAlign) {
            if ("above" == i.outYAlign) {
                if (a + s.height > n.bottom) {
                    var u = o.y - n.y, d = n.bottom - o.bottom;
                    if (u > d) {
                        a = o.y - s.height;
                    }
                }
            }
            if ("below" == i.outYAlign) {
                if (a + s.height > n.bottom) {
                    u = o.y - n.y, d = n.bottom - o.bottom;
                    if (u > d) {
                        a = o.y - s.height;
                    }
                }
            }
            if ("outleft" == i.outXAlign) {
                if (l + s.width > n.right) {
                    var c = o.x - n.x, f = n.right - o.right;
                    if (c > f) {
                        l = o.x - s.width;
                    }
                }
            }
            if ("right" == i.outXAlign) {
                if (l + s.width > n.right) {
                    l = o.right - s.width;
                }
            }
            if (a < 0) {
                    a = 0;
                }
            if (i.alwaysView) {
                if (a < 0) {
                    a = 0;
                }
                if (a + s.height > n.bottom) {
                    a = n.bottom - s.height;
                }
            }
            this._Show(l + h[0], a + h[1]);
        } else {
            this.showAtPos(l + i.xOffset + h[0], a + i.yOffset + h[1]);
        }
    },
    _Show: function(e, t) {
	    this.el.style.display = "";
	    this.el.style.zIndex = kitui.getMaxZIndex() + 3;
	    kitui.setX(this.el, e);
	    kitui.setY(this.el, t);
	    this.setVisible(true);
	    if ("mouseout" == this.hideAction) {
	        kitui.on(document, "mousemove", function(){this.__OnBodyMouseMove}, this);
	    }
        
	    this._doShadow();
	    this._doModal();
	    this._doShim();
	    kitui.layoutIFrames(this.el);
	    this.isPopup = true;
	    kitui.on(document, "mousedown", this.__OnBodyMouseDown, this);
	    kitui.on(window, "resize", this.__OnWindowResize, this);
	    this.fire("Open");
	},
	_doShim: function() {
        if (!kitui.isIE || !kitui_useShims) {
            return;
        }
        if (!this._shimEl) {
            var e = "<iframe frameborder='0' style='position:absolute; z-index:-1; width:0; height:0; top:0;left:0;scrolling:no;'></iframe>";
            if(kitui_useCrossFrame ){
               var _topWin = kitui._getTopWindow();
               if(_topWin.kitui.append)
               		this._shimEl = _topWin.kitui.append(_topWin.document.body, e);
               else
               		this._shimEl = kitui.append(document.body, e);
            }else{
               this._shimEl = kitui.append(document.body, e);
            }
        }
        function t() {
            this._shimEl.style.display = "";
            var e = kitui.getBox(this.el), t = this._shimEl.style;
            t.width = e.width + "px";
            t.height = e.height + "px";
            t.left = e.x + "px";
            t.top = e.y + "px";
            var i = kitui.getStyle(this.el, "zIndex");
            if (!isNaN(i)) {
                this._shimEl.style.zIndex = i - 3;
            }
        }
        this._shimEl.style.display = "none";
        if (this._doShimTimer) {
            clearTimeout(this._doShimTimer);
            this._doShimTimer = null;
        }
        var i = this;
        this._doShimTimer = setTimeout(function() {
            i._doShimTimer = null;
            t.call(i);
        }, 20);
    },
    _doShadow: function() {
        if (!this.shadowEl) {
        	 if(kitui_useCrossFrame ){
                var _topWin = kitui._getTopWindow();
                if(_topWin.kitui.append)
                	this.shadowEl = _topWin.kitui.append(_topWin.document.body, '<div class="kitui-shadow"></div>');
                else
                	this.shadowEl = kitui.append(document.body, '<div class="kitui-shadow"></div>');
             }else{
            	this.shadowEl = kitui.append(document.body, '<div class="kitui-shadow"></div>');
             }
        }
        this.shadowEl.style.display = this.showShadow ? "" : "none";
        if (this.showShadow) {
            function e() {
                this.shadowEl.style.display = "";
                var e = kitui.getBox(this.el), t = this.shadowEl.style;
                t.width = e.width + "px";
                t.height = e.height + "px";
                t.left = e.x + "px";
                t.top = e.y + "px";
                var i = kitui.getStyle(this.el, "zIndex");
                if (!isNaN(i)) {
                    this.shadowEl.style.zIndex = i - 2;
                }
            }
            this.shadowEl.style.display = "none";
            if (this._doShadowTimer) {
                clearTimeout(this._doShadowTimer);
                this._doShadowTimer = null;
            }
            var t = this;
            this._doShadowTimer = setTimeout(function() {
                t._doShadowTimer = null;
                e.call(t);
            }, 20);
        }
    },
    __OnBodyMouseDown: function(e) {
        if ("outerclick" != this.hideAction) {
            return;
        }
        if (!this.isPopup) {
            return;
        }
        if (this.within(e) || this.popupEl && kitui.isAncestor(this.popupEl, e.target)) {
            ;
        } else {
            this.doHide(e);
        }
    },
    __OnWindowResize: function() {
    	if (!this.isPopup) {
            return;
        }
        if (this.isDisplay() && !kitui.isIE6) {
            this._doModal();
        }
        this.doHide(window.event);
    }
});

kitui.zindex = kitui.getMaxZIndex = function() {
	if(kitui_useCrossFrame ){
		var _topWin = kitui._getTopWindow();
		var _topZIndex = this.window.kitui.zIndex;
		if(_topWin.kitui)
			_topZIndex = _topWin.kitui.zIndex;
		kitui.zIndex = _topZIndex + 1 ;
		if(!_topWin.kitui){
			_topWin.kitui = {};
		}
		_topWin.kitui.zIndex = kitui.zIndex;
	    return _topWin.kitui.zIndex;
	}else{
        return kitui.zIndex++;
    }
};

kitui.copyTo(kitui.Tree.prototype,{
    isDisplay: __isDisplay,
    _getRowEl: function(e, t) {
        if (1 == t && !this.isFrozen()) {
            return null;
        }
        e = this.getRecord(e);
        var i = this._createRowId(e, t);
        
        var _topWin = window;
		if(kitui_useCrossFrame){
			var p = kitui.findParent(this.el,"kitui-popup");
			if(p){
		       _topWin = kitui._getTopWindow();
		    }
		}
		
        var n;
        if(_topWin.kitui.byId)
       	 	n = _topWin.kitui.byId(i, this.el);
       	else
       		n = kitui.byId(i, this.el);
        return n;
    },
    _getNodesEl: function(e, t) {
        e = this.getNode(e);
        var i = this._createNodesId(e, t);
        var _topWin = window;
		if(kitui_useCrossFrame){
			var p = kitui.findParent(this.el,"kitui-popup");
			if(p){
		       _topWin = kitui._getTopWindow();
		    }
		}
		
        return _topWin.document.getElementById(i);
    }
});

kitui.copyTo(kitui.Popup.prototype,{
	isDisplay: __isDisplay
});

kitui.copyTo(kitui.TreeSelect.prototype,{
	isDisplay: __isDisplay
});

kitui.copyTo(kitui.Calendar.prototype, {
	isDisplay: __isDisplay
});

kitui.copyTo(kitui.Calendar.prototype, {
	getDateEl: function(e) {
		var _topWin = window;
		if(kitui_useCrossFrame){
			var p = kitui.findParent(this.el,"kitui-popup");
			if(p){
		       _topWin = kitui._getTopWindow();
		    }
		}
		
	    if (!e) {
	        return null;
	    }
	    var t = this.uid + "$" + kitui.clearTime(e).getTime();
	    return _topWin.document.getElementById(t);
	},
	showMenu: function() {
        this.hideMenu();
        this.menuYear = 10 * parseInt(this.viewDate.getFullYear() / 10);
        this._menuselectMonth = this.viewDate.getMonth();
        this._menuselectYear = this.viewDate.getFullYear();
        var e = '<div class="kitui-calendar-menu"></div>';
        
        if(kitui_useCrossFrame){
			var p = kitui.findParent(this.el,"kitui-popup");
			if(p){
		       _topWin = kitui._getTopWindow();
		       if(_topWin.kitui.append)
		       	this.menuEl = _topWin.kitui.append(_topWin.document.body, e);
		       else
		       	this.menuEl = kitui.append(document.body, e);
		    }
		}else{
            this.menuEl = kitui.append(document.body, e);
        }
        this.updateMenu(this.viewDate);
        var t = this.getBox();
        if ("0px" == this.el.style.borderWidth) {
            this.menuEl.style.border = "0";
        }
        kitui.setBox(this.menuEl, t);
        kitui.on(this.menuEl, "click", this.__OnMenuClick, this);
        kitui.on(this.menuEl, "dblclick", this.__OnMenuDblClick, this);
        kitui.on(document, "mousedown", this.__OnBodyMenuMouseDown, this);
    }
});

kitui.copyTo(kitui.Window.prototype, {
	__doHidePopop : function(e){
		if(kitui_useCrossFrame){
			var ifrmEl = this._iframeEl;
			if(ifrmEl){
				var w = ifrmEl.contentWindow;
				try{
					if(w && w.kitui){
						var a = w.kitui.getComponents();
					    for (s = 0, o = a.length; s < o; s++) {
					        var h = a[s];
					        if (true == h.isPopup) {
					        	if (!kitui.isAncestor(h.popupEl, e.target)) {
									h.close();
						        }
					        }else{
					        	if(h.uiCls=="kitui-monthpicker"||h.uiCls=="kitui-datepicker"){
					        		h._calendar.hideMenu();
					        	}
					        }
					    }					
					}
                  }catch(e){}
			}
		}
		return false;
	},
	_initEvents: function() {
        kitui.Window.superclass._initEvents.call(this);
        kitui._BindEvents(function() {
            kitui.on(this.el, "mouseover", this.__OnMouseOver, this);
            kitui.on(window, "resize", this.__OnWindowResize, this);
            if(kitui_useCrossFrame){
               kitui.on(this.el, "mousedown", this.__doHidePopop, this);
            }
            kitui.on(this.el, "mousedown", this.__OnWindowMouseDown, this);
        }, this);
	}
});

kitui.copyTo(kitui.Tabs.prototype, {
	__doHidePopop : function(_tabBody){
		if(!_tabBody || !_tabBody.getElementsByTagName) return;
		
		var ifrmEl = _tabBody.getElementsByTagName("iframe");
		if(ifrmEl && ifrmEl.length > 0)
		   ifrmEl = ifrmEl[0];
		if(ifrmEl){
			var w = ifrmEl.contentWindow;
			try{
				if(w && w.kitui){
					var a = w.kitui.getComponents();
				    for (s = 0, o = a.length; s < o; s++) {
				        var h = a[s];
				        if (true == h.isPopup) {
				            h.close();
				        }else{
				        	if(h.uiCls=="kitui-monthpicker"||h.uiCls=="kitui-datepicker"){
				        		h._calendar.hideMenu();
				        	}
					   }
				    }
			    }
		    }catch(e){}
		}
   },
   setActiveIndex: function(e, t) {
        var i = this.getTab(e), n = this.getTab(this.activeIndex), s = i != n, o = this.getTabBodyEl(this.activeIndex);
        if (o) {
            o.style.display = "none";
            if(kitui_useCrossFrame){
               this.__doHidePopop(o);
            }
        }
        
        if (i) {
            this.activeIndex = this.tabs.indexOf(i);
        } else {
            this.activeIndex = -1;
        }
        o = this.getTabBodyEl(this.activeIndex);
        if (o) {
            o.style.display = "";
        }
        o = this.getTabEl(n);
        if (o) {
        	this.__doHidePopop(n);
            kitui.removeClass(o, this._tabActiveCls);
        }
        o = this.getTabEl(i);
        if (o) {
            kitui.addClass(o, this._tabActiveCls);
        }
        if (o && s) {
            if ("bottom" == this.tabPosition) {
                var r = kitui.findParent(o, "kitui-tabs-header");
                if (r) {
                    jQuery(this._headerEl).prepend(r);
                }
            } else {
                if ("left" == this.tabPosition) {
                    var l = kitui.findParent(o, "kitui-tabs-header").parentNode;
                    if (l) {
                        l.parentNode.appendChild(l);
                    }
                } else {
                    if ("right" == this.tabPosition) {
                        l = kitui.findParent(o, "kitui-tabs-header").parentNode;
                        if (l) {
                            jQuery(l.parentNode).prepend(l);
                        }
                    } else {
                        r = kitui.findParent(o, "kitui-tabs-header");
                        if (r && this.allowClickWrap) {
                            this._headerEl.appendChild(r);
                        }
                    }
                }
            }
            var n = (this._headerEl.scrollLeft, this.getTab(this.activeIndex)), a = n ? !n._layouted : false, h = this.isAutoHeight();
            if (h || a) {
                if (n) {
                    n._layouted = true;
                }
                this.doLayout();
            }
            var u = this.getTabRows();
            if (u.length > 1) {
                ;
            } else {
                this._scrollToTab(this.activeIndex);
                this._doScrollButton();
            }
            for (var d = 0, c = this.tabs.length; d < c; d++) {
                var f = this.getTabEl(this.tabs[d]);
                if (f) {
                    kitui.removeClass(f, this._tabHoverCls);
                }
            }
        }
        var m = this;
        if (s) {
            var p = {
                tab: i,
                index: this.tabs.indexOf(i),
                name: i ? i.name : ""
            };
            setTimeout(function() {
                m.fire("ActiveChanged", p);
            }, 1);
        }
        this._cancelLoadTabs(i);
        if (false !== t) {
            if (i && i.url && !i.loadedUrl) {
                m = this;
                m.loadTab(i.url, i);
            }
        }
        if (m.canLayout()) {
            try {
                kitui.layoutIFrames(m.el);
            } catch (p) {}
        }
    }
});


kitui_preventDefault = function() {
    if (window.event) {
        window.event.returnValue = false;
    }
};

kitui_stopPropogation = function() {
    if (window.event) {
        window.event.cancelBubble = true;
    }
};

kitui_onOne = function(e, t, i, n) {
    if (!e) {
        return;
    }
    var s = "on" + t.toLowerCase();
    e[s] = function(e) {
        e = e || window.event||kitui._getTopWindow().event;
        if (!e.target) {
            e.target = e.srcElement;
        }
        if (!e.preventDefault) {
            e.preventDefault = kitui_preventDefault;
        }
        if (!e.stopPropogation) {
            e.stopPropogation = kitui_stopPropogation;
        }
        var t = i.call(n, e);
        if (false === t) {
            return false;
        }
    };
};
//kitui.un(window, "unload", kitui_unload);
kitui_unload = function() {
	if(!kitui) return;
    try {
        var e = kitui._getTopWindow();
        e[kitui._WindowID] = "";
        delete e[kitui._WindowID];
    } catch (t) {}

	if(window.cvars){
	   jQuery.each(window.cvars,function(i,value){
	        eval(value +" = null;");
	   });

	   window.cvars.length = 0;
	   window.cvars = null;
	}

	kitui._destroying = true;

	var uls = kitui.unload.listeners;
    
    for(var k =0;k < uls.length ; k++){
	  var ul = uls[k];
	  try{
		ul[0].call(ul[1]); 	
	  }catch(e){
	  }
	  ul = null;
    }
    
    uls.length = 0 ;
    uls = null;

	var a = kitui.getComponents();
    for (s = 0, o = a.length; s < o; s++) {
        var h = a[s];
        if (true !== h.destroyed) {
            h.destroy(false);
        }
    }
    a.length = 0;
    a = null;

    var i = document.body.getElementsByTagName("iframe");
    if (i.length > 0) {
        for (var n = [], s = 0, o = i.length; s < o; s++) {
            n.push(i[s]);
        }
        for (s = 0, o = n.length; s < o; s++) {
            try {
                var r = n[s];
                r._ondestroy = null;
                r.onload = function() {};
                jQuery(r).off("load");
				if(!kitui.isIE){
					if(r && r.contentWindow && r.contentWindow.jQuery){
						r.contentWindow.jQuery(r.contentWindow).trigger("unload");
					}        	
				}
                r.src = "";
                if (kitui.isIE) {
					try {
						r.contentWindow.document.write("");
						r.contentWindow.document.close();
					} catch (t) {}
				}
                if (r.parentNode) {
                    r.parentNode.removeChild(r);
                }
            } catch (l) {}
        }
    }

	kitui.clearEvent(window);
    kitui.clearEvent(document);

    kitui.un(window, "unload", kitui_unload);
    kitui.un(window, "load", kitui_onload);
    kitui.un(window, "resize", kitui_onresize); 

    kitui.components = {};
    kitui.classes = {};
    kitui.uiClasses = {};
    kitui.uids = {};
    kitui._topWindow = null;

    window.kitui = jQuery.kitui = null;
    window.Owner = null;
    window.CloseOwnerWindow = null;
};

kitui.unload = function(callback,scope){
   if(callback){
      kitui.unload.listeners.push([callback,scope || kitui]);
   }
}

kitui.unload.listeners = [];
kitui.on(window, "unload", kitui_unload);


//treeselect
kitui.copyTo(kitui.TreeSelect.prototype,{
	 _createPopup: function() {
		kitui.TreeSelect.superclass._createPopup.call(this);
		this.tree = new kitui.Tree();
		if(kitui_useCrossFrame){
		    var __uuid = this.tree._idPre+ UUID();
		    this.tree._id = __uuid;
		    this.tree.uid = __uuid;
		    this.tree.setId(__uuid);
		}		
		this.tree.setShowTreeIcon(true);
		this.tree.setStyle("border:0;width:100%;height:100%;overflow:hidden;");
		this.tree.setResultAsTree(this.resultAsTree);
		this.tree.render(this.popup._contentEl);
		this.tree.setCheckRecursive(this.checkRecursive);
		this.tree.setShowFolderCheckBox(this.showFolderCheckBox);
		this.tree.on("nodeclick", this.__OnNodeClick, this);
		this.tree.on("nodecheck", this.__OnCheckedChanged, this);
		this.tree.on("expand", this.__OnTreeExpand, this);
		this.tree.on("collapse", this.__OnTreeCollapse, this);
		this.tree.on("beforenodecheck", this.__OnTreeBeforeNodeCheck, this);
		this.tree.on("beforenodeselect", this.__OnTreeBeforeNodeSelect, this);
		this.tree.allowAnim = false;
		var a = this;
		this.tree.on("beforeload", function(b) {
		    a.fire("beforeload", b);
		}, this);
		this.tree.on("load", function(b) {
		    a.fire("load", b);
		}, this);
		this.tree.on("loaderror", function(b) {
		    a.fire("loaderror", b);
		}, this);
	}
});

kitui.copyTo(kitui.Tabs.prototype, {
	__doHidePopop : function(_tabBody){
		function ___hideIframe(_tabBody){
			if(!_tabBody || !_tabBody.getElementsByTagName) return;
			
			var ifrmEls = _tabBody.getElementsByTagName("iframe");
			
			if(ifrmEls && ifrmEls.length > 0){
				for(var i=0;i < ifrmEls.length;i++){
					var __ifrmEl = ifrmEls[i];
					if(__ifrmEl){
						var w = __ifrmEl.contentWindow;
						try{
							if(w && w.kitui){
								var a = w.kitui.getComponents();
							    for (s = 0, o = a.length; s < o; s++) {
							        var h = a[s];
							        if (true == h.isPopup) {
							            h.close();
							        }
							    }
							    ___hideIframe(__ifrmEl.contentDocument);
						    }
					    }catch(e){}
					}
				}
			}
		}
		___hideIframe(_tabBody);
   },
   setActiveIndex: function(e, t) {
        var i = this.getTab(e), n = this.getTab(this.activeIndex), s = i != n, o = this.getTabBodyEl(this.activeIndex);
        if (o) {
            o.style.display = "none";
            if(kitui_useCrossFrame){
               this.__doHidePopop(o);
            }
        }
        
        if (i) {
            this.activeIndex = this.tabs.indexOf(i);
        } else {
            this.activeIndex = -1;
        }
        o = this.getTabBodyEl(this.activeIndex);
        if (o) {
            o.style.display = "";
        }
        o = this.getTabEl(n);
        if (o) {
        	this.__doHidePopop(n);
            kitui.removeClass(o, this._tabActiveCls);
        }
        o = this.getTabEl(i);
        if (o) {
            kitui.addClass(o, this._tabActiveCls);
        }
        if (o && s) {
            if ("bottom" == this.tabPosition) {
                var r = kitui.findParent(o, "kitui-tabs-header");
                if (r) {
                    jQuery(this._headerEl).prepend(r);
                }
            } else {
                if ("left" == this.tabPosition) {
                    var l = kitui.findParent(o, "kitui-tabs-header").parentNode;
                    if (l) {
                        l.parentNode.appendChild(l);
                    }
                } else {
                    if ("right" == this.tabPosition) {
                        l = kitui.findParent(o, "kitui-tabs-header").parentNode;
                        if (l) {
                            jQuery(l.parentNode).prepend(l);
                        }
                    } else {
                        r = kitui.findParent(o, "kitui-tabs-header");
                        if (r && this.allowClickWrap) {
                            this._headerEl.appendChild(r);
                        }
                    }
                }
            }
            var n = (this._headerEl.scrollLeft, this.getTab(this.activeIndex)), a = n ? !n._layouted : false, h = this.isAutoHeight();
            if (h || a) {
                if (n) {
                    n._layouted = true;
                }
                this.doLayout();
            }
            var u = this.getTabRows();
            if (u.length > 1) {
                ;
            } else {
                this._scrollToTab(this.activeIndex);
                this._doScrollButton();
            }
            for (var d = 0, c = this.tabs.length; d < c; d++) {
                var f = this.getTabEl(this.tabs[d]);
                if (f) {
                    kitui.removeClass(f, this._tabHoverCls);
                }
            }
        }
        var m = this;
        if (s) {
            var p = {
                tab: i,
                index: this.tabs.indexOf(i),
                name: i ? i.name : ""
            };
            setTimeout(function() {
                m.fire("ActiveChanged", p);
            }, 1);
        }
        this._cancelLoadTabs(i);
        if (false !== t) {
            if (i && i.url && !i.loadedUrl) {
                m = this;
                m.loadTab(i.url, i);
            }
        }
        if (m.canLayout()) {
            try {
                kitui.layoutIFrames(m.el);
            } catch (p) {}
        }
    }
});

var __window_destroy = kitui.Window.prototype["destroy"];

kitui.copyTo(kitui.Window.prototype, {
	destroy : function(e) {
		if (__window_destroy) {
			__window_destroy.call(this, e);
		}
		if (kitui.isIE) {
			fixIEFocus();
		}
	}
});


kitui.copyTo(kitui.PopupEdit.prototype, {
    _createPopup: function() {
        this.popup = new kitui.Popup();
        if(kitui_useCrossFrame){
        	var __uuid =  this.popup._idPre+ UUID();
            this.popup._id = __uuid;
            this.popup.uid = __uuid;
            this.popup.setId(__uuid);
        }
        this.popup.setShowAction("none");
        this.popup.setHideAction("outerclick");
        this.popup.setPopupEl(this.el);
        this.popup.on("BeforeClose", this.__OnPopupBeforeClose, this);
        kitui.on(this.popup.el, "keydown", this.__OnPopupKeyDown, this);
    }
});

kitui.copyTo(kitui.ComboBox.prototype,{
	  _createPopup: function() {
	        kitui.ComboBox.superclass._createPopup.call(this);
	        this._listbox = new kitui.ListBox();
			if(kitui_useCrossFrame){
				var __uuid = this._listbox._idPre+ UUID();
				this._listbox._id = __uuid;
				this._listbox.uid = __uuid;
				this._listbox.setId(__uuid);
			}
	        this._listbox.setBorderStyle("border:0;");
	        this._listbox.setStyle("width:100%;height:auto;");
	
	        this._listbox.render(this.popup._contentEl);
	        this._listbox.on("itemclick", this.__OnItemClick, this);
	        this._listbox.on("drawcell", this.__OnItemDrawCell, this);
	        var a = this;
	        this._listbox.on("beforeload", function(b) {
	            a.fire("beforeload", b);
	        }, this);
	        this._listbox.on("load", function(b) {
	            a.fire("load", b);
	        }, this);
	        this._listbox.on("loaderror", function(b) {
	            a.fire("loaderror", b);
	        }, this);
	    }
});

kitui.copyTo(kitui.DatePicker.prototype,{
	_getCalendar: function() {
        if (!kitui.DatePicker._Calendar) {
            var e = kitui.DatePicker._Calendar = new kitui.Calendar();
            if(kitui_useCrossFrame){
				var __uuid = e._idPre+ UUID();
				e._id = __uuid;
				e.uid = __uuid;
				e.setId(__uuid);
			}
            e.setStyle("border:0;");
        }
        return kitui.DatePicker._Calendar;
    }
});

kitui.copyTo(kitui.TimeSpinner.prototype,{
    _StartSpin: function(e, t, i) {
        this._StopSpin();
        this._ChangeValue(e, this._timeType);
        var n = this, s = i, o = new Date();
        this._SpinTimer = setInterval(function() {
            n._ChangeValue(e, n._timeType);
            i--;
            if (0 == i && t > 50) {
                n._StartSpin(e, t - 100, s + 3);
            }
            var r = new Date();
            if (r - o > 500) {
                n._StopSpin();
            }
            o = r;
        }, t);
        if(kitui_useCrossFrame){
        	kitui.on(kitui._getTopWindow().document, "mouseup", this._OnDocumentMouseUp, this);
        }else{
        	kitui.on(document, "mouseup", this._OnDocumentMouseUp, this);
        }
    },
    _OnDocumentMouseUp: function() {
        this._StopSpin();
        if(kitui_useCrossFrame){
        	kitui.un(kitui._getTopWindow().document, "mouseup", this._OnDocumentMouseUp, this);
        }else{
        	kitui.un(document, "mouseup", this._OnDocumentMouseUp, this);
        }        
        if (this._DownValue != this.getFormValue()) {
            this._OnValueChanged();
        }
    }
});
kitui.copyTo(kitui.TreeSelect.prototype, {
    setValue: function(e) {
        var t = this.tree.getValueAndText(e);
        if ("" == t[1] && !this.valueFromSelect) {
            t[0] = e;
            t[1] = e;
        }
        this.value = e;
        this._valueEl.value = e;
        this.text = this._textEl.value = t[1];
        this._doEmpty();
    }	
});
//公司版本要注释，中科要放开

kitui.copyTo(kitui.Fit.prototype, {
    doLayout: function() {
        if (!this.canLayout()) {
            return;
        }

        var e = this.el.parentNode, t = kitui.getChildNodes(e);
        if (e == document.body) {
            this.el.style.height = "0px";
        }else{
            if(e.tagName=="TD"|| e.tagName=="TH"){
			    this.el.style.height = "0px";
				jQuery(e).siblings().each(function(item){
				    var $c = $(this).children(":first");
					if($c.hasClass("kitui-fit")){
					   var d = kitui.get($c[0]);
					   if(d && d.el){
					      d.el.style.height="0px";
					   }
					}
				});
			}		 
		} 
        for (var i = kitui.getHeight(e, true), n = 0, s = t.length; n < s; n++) {
            var o = t[n], r = o.tagName ? o.tagName.toLowerCase() : "";
            if (o == this.el || "style" == r || "script" == r || "hidden" == o.type) {
                continue;
            }
            var l = kitui.getStyle(o, "position");
            if ("absolute" == l || "fixed" == l) {
                continue;
            }
            var a = kitui.getHeight(o), h = kitui.getMargins(o);
            i = i - a - h.top - h.bottom;
        }
        var u = kitui.getBorders(this.el), d = kitui.getPaddings(this.el), h = kitui.getMargins(this.el);
        i = i - h.top - h.bottom;
        if (jQuery.boxModel) {
            i = i - d.top - d.bottom - u.top - u.bottom;
        }
        if (i < 0) {
            i = 0;
        }
        this.el.style.height = i + "px";
        try {
            t = kitui.getChildNodes(this.el);
            for (n = 0, s = t.length; n < s; n++) {
                o = t[n];
                kitui.layout(o);
            }
            
        } catch (c) {}
       
        if(e.tagName=="TD"|| e.tagName=="TH"){
		    jQuery(e).siblings().each(function(item){
			    var $c = $(this).children(":first");
				if($c.hasClass("kitui-fit")){
				   var d = kitui.get($c[0]);
				   if(d && d.el){
				      d.el.style.height=i + "px";
				   }
				}
			});
		}
    }
});

///<jscompress sourcefile="swfupload.js" />
/**
 * SWFUpload: http://www.swfupload.org, http://swfupload.googlecode.com
 *
 * mmSWFUpload 1.0: Flash upload dialog - http://profandesign.se/swfupload/,  http://www.vinterwebb.se/
 *
 * SWFUpload is (c) 2006-2007 Lars Huring, Olov Nilz閚 and Mammon Media and is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 *
 * SWFUpload 2 is (c) 2007-2008 Jake Roberts and is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 *
 */


/* ******************* */
/* Constructor & Init  */
/* ******************* */
var SWFUpload;

if (SWFUpload == undefined) {
	SWFUpload = function (settings) {
		this.initSWFUpload(settings);
	};
}

SWFUpload.prototype.initSWFUpload = function (settings) {
	try {
		this.customSettings = {};	// A container where developers can place their own settings associated with this instance.
		this.settings = settings;
		this.eventQueue = [];
		this.movieName = "SWFUpload_" + SWFUpload.movieCount++;
		this.movieElement = null;


		// Setup global control tracking
		SWFUpload.instances[this.movieName] = this;

		// Load the settings.  Load the Flash movie.
		this.initSettings();
		this.loadFlash();
		this.displayDebugInfo();
	} catch (ex) {
		delete SWFUpload.instances[this.movieName];
		throw ex;
	}
};

/* *************** */
/* Static Members  */
/* *************** */
SWFUpload.instances = {};
SWFUpload.movieCount = 0;
SWFUpload.version = "2.2.0 2009-03-25";
SWFUpload.QUEUE_ERROR = {
	QUEUE_LIMIT_EXCEEDED	  		: -100,
	FILE_EXCEEDS_SIZE_LIMIT  		: -110,
	ZERO_BYTE_FILE			  		: -120,
	INVALID_FILETYPE		  		: -130
};
SWFUpload.UPLOAD_ERROR = {
	HTTP_ERROR				  		: -200,
	MISSING_UPLOAD_URL	      		: -210,
	IO_ERROR				  		: -220,
	SECURITY_ERROR			  		: -230,
	UPLOAD_LIMIT_EXCEEDED	  		: -240,
	UPLOAD_FAILED			  		: -250,
	SPECIFIED_FILE_ID_NOT_FOUND		: -260,
	FILE_VALIDATION_FAILED	  		: -270,
	FILE_CANCELLED			  		: -280,
	UPLOAD_STOPPED					: -290
};
SWFUpload.FILE_STATUS = {
	QUEUED		 : -1,
	IN_PROGRESS	 : -2,
	ERROR		 : -3,
	COMPLETE	 : -4,
	CANCELLED	 : -5
};
SWFUpload.BUTTON_ACTION = {
	SELECT_FILE  : -100,
	SELECT_FILES : -110,
	START_UPLOAD : -120
};
SWFUpload.CURSOR = {
	ARROW : -1,
	HAND : -2
};
SWFUpload.WINDOW_MODE = {
	WINDOW : "window",
	TRANSPARENT : "transparent",
	OPAQUE : "opaque"
};

// Private: takes a URL, determines if it is relative and converts to an absolute URL
// using the current site. Only processes the URL if it can, otherwise returns the URL untouched
SWFUpload.completeURL = function(url) {
	if (typeof(url) !== "string" || url.match(/^https?:\/\//i) || url.match(/^\//)) {
		return url;
	}
	
	var currentURL = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "");
	
	var indexSlash = window.location.pathname.lastIndexOf("/");
	if (indexSlash <= 0) {
		path = "/";
	} else {
		path = window.location.pathname.substr(0, indexSlash) + "/";
	}
	
	return /*currentURL +*/ path + url;
	
};


/* ******************** */
/* Instance Members  */
/* ******************** */

// Private: initSettings ensures that all the
// settings are set, getting a default value if one was not assigned.
SWFUpload.prototype.initSettings = function () {
	this.ensureDefault = function (settingName, defaultValue) {
		this.settings[settingName] = (this.settings[settingName] == undefined) ? defaultValue : this.settings[settingName];
	};
	
	// Upload backend settings
	this.ensureDefault("upload_url", "");
	this.ensureDefault("preserve_relative_urls", false);
	this.ensureDefault("file_post_name", "Filedata");
	this.ensureDefault("post_params", {});
	this.ensureDefault("use_query_string", false);
	this.ensureDefault("requeue_on_error", false);
	this.ensureDefault("http_success", []);
	this.ensureDefault("assume_success_timeout", 0);
	
	// File Settings
	this.ensureDefault("file_types", "*.*");
	this.ensureDefault("file_types_description", "All Files");
	this.ensureDefault("file_size_limit", 0);	// Default zero means "unlimited"
	this.ensureDefault("file_upload_limit", 0);
	this.ensureDefault("file_queue_limit", 0);

	// Flash Settings
	this.ensureDefault("flash_url", "swfupload.swf");
	this.ensureDefault("prevent_swf_caching", true);
	
	// Button Settings
	this.ensureDefault("button_image_url", "");
	this.ensureDefault("button_width", 1);
	this.ensureDefault("button_height", 1);
	this.ensureDefault("button_text", "");
	this.ensureDefault("button_text_style", "color: #000000; font-size: 16pt;");
	this.ensureDefault("button_text_top_padding", 0);
	this.ensureDefault("button_text_left_padding", 0);
	this.ensureDefault("button_action", SWFUpload.BUTTON_ACTION.SELECT_FILES);
	this.ensureDefault("button_disabled", false);
	this.ensureDefault("button_placeholder_id", "");
	this.ensureDefault("button_placeholder", null);
	this.ensureDefault("button_cursor", SWFUpload.CURSOR.ARROW);
	this.ensureDefault("button_window_mode", SWFUpload.WINDOW_MODE.WINDOW);
	
	// Debug Settings
	this.ensureDefault("debug", false);
	this.settings.debug_enabled = this.settings.debug;	// Here to maintain v2 API
	
	// Event Handlers
	this.settings.return_upload_start_handler = this.returnUploadStart;
	this.ensureDefault("swfupload_loaded_handler", null);
	this.ensureDefault("file_dialog_start_handler", null);
	this.ensureDefault("file_queued_handler", null);
	this.ensureDefault("file_queue_error_handler", null);
	this.ensureDefault("file_dialog_complete_handler", null);
	
	this.ensureDefault("upload_start_handler", null);
	this.ensureDefault("upload_progress_handler", null);
	this.ensureDefault("upload_error_handler", null);
	this.ensureDefault("upload_success_handler", null);
	this.ensureDefault("upload_complete_handler", null);
	
	this.ensureDefault("debug_handler", this.debugMessage);

	this.ensureDefault("custom_settings", {});

	// Other settings
	this.customSettings = this.settings.custom_settings;
	
	// Update the flash url if needed
	if (!!this.settings.prevent_swf_caching) {
		this.settings.flash_url = this.settings.flash_url + (this.settings.flash_url.indexOf("?") < 0 ? "?" : "&") + "preventswfcaching=" + new Date().getTime();
	}
	
	if (!this.settings.preserve_relative_urls) {
		//this.settings.flash_url = SWFUpload.completeURL(this.settings.flash_url);	// Don't need to do this one since flash doesn't look at it
		this.settings.upload_url = SWFUpload.completeURL(this.settings.upload_url);
		this.settings.button_image_url = SWFUpload.completeURL(this.settings.button_image_url);
	}
	
	delete this.ensureDefault;
};

// Private: loadFlash replaces the button_placeholder element with the flash movie.
SWFUpload.prototype.loadFlash = function () {
	var targetElement, tempParent;

	// Make sure an element with the ID we are going to use doesn't already exist
	if (document.getElementById(this.movieName) !== null) {
		throw "ID " + this.movieName + " is already in use. The Flash Object could not be added";
	}

	// Get the element where we will be placing the flash movie
	targetElement = document.getElementById(this.settings.button_placeholder_id) || this.settings.button_placeholder;

	if (targetElement == undefined) {
		throw "Could not find the placeholder element: " + this.settings.button_placeholder_id;
	}

	// Append the container and load the flash
	tempParent = document.createElement("div");
	tempParent.innerHTML = this.getFlashHTML();	// Using innerHTML is non-standard but the only sensible way to dynamically add Flash in IE (and maybe other browsers)
	targetElement.parentNode.replaceChild(tempParent.firstChild, targetElement);

	// Fix IE Flash/Form bug
	if (window[this.movieName] == undefined) {
		window[this.movieName] = this.getMovieElement();
	}
	
};

// Private: getFlashHTML generates the object tag needed to embed the flash in to the document
//SWFUpload.prototype.getFlashHTML = function () {
//	// Flash Satay object syntax: http://www.alistapart.com/articles/flashsatay
//	return ['<object id="', this.movieName, '" type="application/x-shockwave-flash" data="', this.settings.flash_url, '" width="', this.settings.button_width, '" height="', this.settings.button_height, '" class="swfupload">',
//				'<param name="wmode" value="', this.settings.button_window_mode, '" />',
//				'<param name="movie" value="', this.settings.flash_url, '" />',
//				'<param name="quality" value="high" />',
//				'<param name="menu" value="false" />',
//				'<param name="allowScriptAccess" value="always" />',
//				'<param name="flashvars" value="' + this.getFlashVars() + '" />',
//				'</object>'].join("");
//};

// Private: getFlashHTML generates the object tag needed to embed the flash in to the document
SWFUpload.prototype.getFlashHTML = function () {
    // Flash Satay object syntax: http://www.alistapart.com/articles/flashsatay
    var classid = 'classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"';
    if (!document.all) classid = "";
    return ['<object id="', this.movieName, '" ' + classid + '  type="application/x-shockwave-flash" data="', this.settings.flash_url, '" width="', this.settings.button_width, '" height="', this.settings.button_height, '" class="swfupload">',
                '<param name="wmode" value="', this.settings.button_window_mode, '" />',
                '<param name="movie" value="', this.settings.flash_url, '" />',
                '<param name="quality" value="high" />',
                '<param name="menu" value="false" />',
                '<param name="allowScriptAccess" value="always" />',
                '<param name="flashvars" value="' + this.getFlashVars() + '" />',
                '</object>'].join("");
};

// Private: getFlashVars builds the parameter string that will be passed
// to flash in the flashvars param.
SWFUpload.prototype.getFlashVars = function () {
	// Build a string from the post param object
	var paramString = this.buildParamString();
	var httpSuccessString = this.settings.http_success.join(",");
	
	// Build the parameter string
	return ["movieName=", encodeURIComponent(this.movieName),
			"&amp;uploadURL=", encodeURIComponent(this.settings.upload_url),
			"&amp;useQueryString=", encodeURIComponent(this.settings.use_query_string),
			"&amp;requeueOnError=", encodeURIComponent(this.settings.requeue_on_error),
			"&amp;httpSuccess=", encodeURIComponent(httpSuccessString),
			"&amp;assumeSuccessTimeout=", encodeURIComponent(this.settings.assume_success_timeout),
			"&amp;params=", encodeURIComponent(paramString),
			"&amp;filePostName=", encodeURIComponent(this.settings.file_post_name),
			"&amp;fileTypes=", encodeURIComponent(this.settings.file_types),
			"&amp;fileTypesDescription=", encodeURIComponent(this.settings.file_types_description),
			"&amp;fileSizeLimit=", encodeURIComponent(this.settings.file_size_limit),
			"&amp;fileUploadLimit=", encodeURIComponent(this.settings.file_upload_limit),
			"&amp;fileQueueLimit=", encodeURIComponent(this.settings.file_queue_limit),
			"&amp;debugEnabled=", encodeURIComponent(this.settings.debug_enabled),
			"&amp;buttonImageURL=", encodeURIComponent(this.settings.button_image_url),
			"&amp;buttonWidth=", encodeURIComponent(this.settings.button_width),
			"&amp;buttonHeight=", encodeURIComponent(this.settings.button_height),
			"&amp;buttonText=", encodeURIComponent(this.settings.button_text),
			"&amp;buttonTextTopPadding=", encodeURIComponent(this.settings.button_text_top_padding),
			"&amp;buttonTextLeftPadding=", encodeURIComponent(this.settings.button_text_left_padding),
			"&amp;buttonTextStyle=", encodeURIComponent(this.settings.button_text_style),
			"&amp;buttonAction=", encodeURIComponent(this.settings.button_action),
			"&amp;buttonDisabled=", encodeURIComponent(this.settings.button_disabled),
			"&amp;buttonCursor=", encodeURIComponent(this.settings.button_cursor)
		].join("");
};

// Public: getMovieElement retrieves the DOM reference to the Flash element added by SWFUpload
// The element is cached after the first lookup
SWFUpload.prototype.getMovieElement = function () {
	if (this.movieElement == undefined) {
		this.movieElement = document.getElementById(this.movieName);
	}

	if (this.movieElement === null) {
		throw "Could not find Flash element";
	}
	
	return this.movieElement;
};

// Private: buildParamString takes the name/value pairs in the post_params setting object
// and joins them up in to a string formatted "name=value&amp;name=value"
SWFUpload.prototype.buildParamString = function () {
	var postParams = this.settings.post_params; 
	var paramStringPairs = [];

	if (typeof(postParams) === "object") {
		for (var name in postParams) {
			if (postParams.hasOwnProperty(name)) {
				paramStringPairs.push(encodeURIComponent(name.toString()) + "=" + encodeURIComponent(postParams[name].toString()));
			}
		}
	}

	return paramStringPairs.join("&amp;");
};

// Public: Used to remove a SWFUpload instance from the page. This method strives to remove
// all references to the SWF, and other objects so memory is properly freed.
// Returns true if everything was destroyed. Returns a false if a failure occurs leaving SWFUpload in an inconsistant state.
// Credits: Major improvements provided by steffen
SWFUpload.prototype.destroy = function () {
	try {
		// Make sure Flash is done before we try to remove it
		this.cancelUpload(null, false);
		

		// Remove the SWFUpload DOM nodes
		var movieElement = null;
		movieElement = this.getMovieElement();
		
		if (movieElement && typeof(movieElement.CallFunction) === "unknown") { // We only want to do this in IE
			// Loop through all the movie's properties and remove all function references (DOM/JS IE 6/7 memory leak workaround)
			for (var i in movieElement) {
				try {
					if (typeof(movieElement[i]) === "function") {
						movieElement[i] = null;
					}
				} catch (ex1) {}
			}

			// Remove the Movie Element from the page
			try {
				movieElement.parentNode.removeChild(movieElement);
			} catch (ex) {}
		}
		
		// Remove IE form fix reference
		window[this.movieName] = null;

		// Destroy other references
		SWFUpload.instances[this.movieName] = null;
		delete SWFUpload.instances[this.movieName];

		this.movieElement = null;
		this.settings = null;
		this.customSettings = null;
		this.eventQueue = null;
		this.movieName = null;
		
		
		return true;
	} catch (ex2) {
		return false;
	}
};


// Public: displayDebugInfo prints out settings and configuration
// information about this SWFUpload instance.
// This function (and any references to it) can be deleted when placing
// SWFUpload in production.
SWFUpload.prototype.displayDebugInfo = function () {
	this.debug(
		[
			"---SWFUpload Instance Info---\n",
			"Version: ", SWFUpload.version, "\n",
			"Movie Name: ", this.movieName, "\n",
			"Settings:\n",
			"\t", "upload_url:               ", this.settings.upload_url, "\n",
			"\t", "flash_url:                ", this.settings.flash_url, "\n",
			"\t", "use_query_string:         ", this.settings.use_query_string.toString(), "\n",
			"\t", "requeue_on_error:         ", this.settings.requeue_on_error.toString(), "\n",
			"\t", "http_success:             ", this.settings.http_success.join(", "), "\n",
			"\t", "assume_success_timeout:   ", this.settings.assume_success_timeout, "\n",
			"\t", "file_post_name:           ", this.settings.file_post_name, "\n",
			"\t", "post_params:              ", this.settings.post_params.toString(), "\n",
			"\t", "file_types:               ", this.settings.file_types, "\n",
			"\t", "file_types_description:   ", this.settings.file_types_description, "\n",
			"\t", "file_size_limit:          ", this.settings.file_size_limit, "\n",
			"\t", "file_upload_limit:        ", this.settings.file_upload_limit, "\n",
			"\t", "file_queue_limit:         ", this.settings.file_queue_limit, "\n",
			"\t", "debug:                    ", this.settings.debug.toString(), "\n",

			"\t", "prevent_swf_caching:      ", this.settings.prevent_swf_caching.toString(), "\n",

			"\t", "button_placeholder_id:    ", this.settings.button_placeholder_id.toString(), "\n",
			"\t", "button_placeholder:       ", (this.settings.button_placeholder ? "Set" : "Not Set"), "\n",
			"\t", "button_image_url:         ", this.settings.button_image_url.toString(), "\n",
			"\t", "button_width:             ", this.settings.button_width.toString(), "\n",
			"\t", "button_height:            ", this.settings.button_height.toString(), "\n",
			"\t", "button_text:              ", this.settings.button_text.toString(), "\n",
			"\t", "button_text_style:        ", this.settings.button_text_style.toString(), "\n",
			"\t", "button_text_top_padding:  ", this.settings.button_text_top_padding.toString(), "\n",
			"\t", "button_text_left_padding: ", this.settings.button_text_left_padding.toString(), "\n",
			"\t", "button_action:            ", this.settings.button_action.toString(), "\n",
			"\t", "button_disabled:          ", this.settings.button_disabled.toString(), "\n",

			"\t", "custom_settings:          ", this.settings.custom_settings.toString(), "\n",
			"Event Handlers:\n",
			"\t", "swfupload_loaded_handler assigned:  ", (typeof this.settings.swfupload_loaded_handler === "function").toString(), "\n",
			"\t", "file_dialog_start_handler assigned: ", (typeof this.settings.file_dialog_start_handler === "function").toString(), "\n",
			"\t", "file_queued_handler assigned:       ", (typeof this.settings.file_queued_handler === "function").toString(), "\n",
			"\t", "file_queue_error_handler assigned:  ", (typeof this.settings.file_queue_error_handler === "function").toString(), "\n",
			"\t", "upload_start_handler assigned:      ", (typeof this.settings.upload_start_handler === "function").toString(), "\n",
			"\t", "upload_progress_handler assigned:   ", (typeof this.settings.upload_progress_handler === "function").toString(), "\n",
			"\t", "upload_error_handler assigned:      ", (typeof this.settings.upload_error_handler === "function").toString(), "\n",
			"\t", "upload_success_handler assigned:    ", (typeof this.settings.upload_success_handler === "function").toString(), "\n",
			"\t", "upload_complete_handler assigned:   ", (typeof this.settings.upload_complete_handler === "function").toString(), "\n",
			"\t", "debug_handler assigned:             ", (typeof this.settings.debug_handler === "function").toString(), "\n"
		].join("")
	);
};

/* Note: addSetting and getSetting are no longer used by SWFUpload but are included
	the maintain v2 API compatibility
*/
// Public: (Deprecated) addSetting adds a setting value. If the value given is undefined or null then the default_value is used.
SWFUpload.prototype.addSetting = function (name, value, default_value) {
    if (value == undefined) {
        return (this.settings[name] = default_value);
    } else {
        return (this.settings[name] = value);
	}
};

// Public: (Deprecated) getSetting gets a setting. Returns an empty string if the setting was not found.
SWFUpload.prototype.getSetting = function (name) {
    if (this.settings[name] != undefined) {
        return this.settings[name];
	}

    return "";
};



// Private: callFlash handles function calls made to the Flash element.
// Calls are made with a setTimeout for some functions to work around
// bugs in the ExternalInterface library.
SWFUpload.prototype.callFlash = function (functionName, argumentArray) {
	argumentArray = argumentArray || [];
	
	var movieElement = this.getMovieElement();
	var returnValue, returnString;

	// Flash's method if calling ExternalInterface methods (code adapted from MooTools).
	try {
		returnString = movieElement.CallFunction('<invoke name="' + functionName + '" returntype="javascript">' + __flash__argumentsToXML(argumentArray, 0) + '</invoke>');
		returnValue = eval(returnString);
	} catch (ex) {
		throw "Call to " + functionName + " failed";
	}
	
	// Unescape file post param values
	if (returnValue != undefined && typeof returnValue.post === "object") {
		returnValue = this.unescapeFilePostParams(returnValue);
	}

	return returnValue;
};

/* *****************************
	-- Flash control methods --
	Your UI should use these
	to operate SWFUpload
   ***************************** */

// WARNING: this function does not work in Flash Player 10
// Public: selectFile causes a File Selection Dialog window to appear.  This
// dialog only allows 1 file to be selected.
SWFUpload.prototype.selectFile = function () {
	this.callFlash("SelectFile");
};

// WARNING: this function does not work in Flash Player 10
// Public: selectFiles causes a File Selection Dialog window to appear/ This
// dialog allows the user to select any number of files
// Flash Bug Warning: Flash limits the number of selectable files based on the combined length of the file names.
// If the selection name length is too long the dialog will fail in an unpredictable manner.  There is no work-around
// for this bug.
SWFUpload.prototype.selectFiles = function () {
	this.callFlash("SelectFiles");
};


// Public: startUpload starts uploading the first file in the queue unless
// the optional parameter 'fileID' specifies the ID 
SWFUpload.prototype.startUpload = function (fileID) {
	this.callFlash("StartUpload", [fileID]);
};

// Public: cancelUpload cancels any queued file.  The fileID parameter may be the file ID or index.
// If you do not specify a fileID the current uploading file or first file in the queue is cancelled.
// If you do not want the uploadError event to trigger you can specify false for the triggerErrorEvent parameter.
SWFUpload.prototype.cancelUpload = function (fileID, triggerErrorEvent) {
	if (triggerErrorEvent !== false) {
		triggerErrorEvent = true;
	}
	this.callFlash("CancelUpload", [fileID, triggerErrorEvent]);
};

// Public: stopUpload stops the current upload and requeues the file at the beginning of the queue.
// If nothing is currently uploading then nothing happens.
SWFUpload.prototype.stopUpload = function () {
	this.callFlash("StopUpload");
};

/* ************************
 * Settings methods
 *   These methods change the SWFUpload settings.
 *   SWFUpload settings should not be changed directly on the settings object
 *   since many of the settings need to be passed to Flash in order to take
 *   effect.
 * *********************** */

// Public: getStats gets the file statistics object.
SWFUpload.prototype.getStats = function () {
	return this.callFlash("GetStats");
};

// Public: setStats changes the SWFUpload statistics.  You shouldn't need to 
// change the statistics but you can.  Changing the statistics does not
// affect SWFUpload accept for the successful_uploads count which is used
// by the upload_limit setting to determine how many files the user may upload.
SWFUpload.prototype.setStats = function (statsObject) {
	this.callFlash("SetStats", [statsObject]);
};

// Public: getFile retrieves a File object by ID or Index.  If the file is
// not found then 'null' is returned.
SWFUpload.prototype.getFile = function (fileID) {
	if (typeof(fileID) === "number") {
		return this.callFlash("GetFileByIndex", [fileID]);
	} else {
		return this.callFlash("GetFile", [fileID]);
	}
};

// Public: addFileParam sets a name/value pair that will be posted with the
// file specified by the Files ID.  If the name already exists then the
// exiting value will be overwritten.
SWFUpload.prototype.addFileParam = function (fileID, name, value) {
	return this.callFlash("AddFileParam", [fileID, name, value]);
};

// Public: removeFileParam removes a previously set (by addFileParam) name/value
// pair from the specified file.
SWFUpload.prototype.removeFileParam = function (fileID, name) {
	this.callFlash("RemoveFileParam", [fileID, name]);
};

// Public: setUploadUrl changes the upload_url setting.
SWFUpload.prototype.setUploadURL = function (url) {
	this.settings.upload_url = url.toString();
	this.callFlash("SetUploadURL", [url]);
};

// Public: setPostParams changes the post_params setting
SWFUpload.prototype.setPostParams = function (paramsObject) {
	this.settings.post_params = paramsObject;
	this.callFlash("SetPostParams", [paramsObject]);
};

// Public: addPostParam adds post name/value pair.  Each name can have only one value.
SWFUpload.prototype.addPostParam = function (name, value) {
	this.settings.post_params[name] = value;
	this.callFlash("SetPostParams", [this.settings.post_params]);
};

// Public: removePostParam deletes post name/value pair.
SWFUpload.prototype.removePostParam = function (name) {
	delete this.settings.post_params[name];
	this.callFlash("SetPostParams", [this.settings.post_params]);
};

// Public: setFileTypes changes the file_types setting and the file_types_description setting
SWFUpload.prototype.setFileTypes = function (types, description) {
	this.settings.file_types = types;
	this.settings.file_types_description = description;
	this.callFlash("SetFileTypes", [types, description]);
};

// Public: setFileSizeLimit changes the file_size_limit setting
SWFUpload.prototype.setFileSizeLimit = function (fileSizeLimit) {
	this.settings.file_size_limit = fileSizeLimit;
	this.callFlash("SetFileSizeLimit", [fileSizeLimit]);
};

// Public: setFileUploadLimit changes the file_upload_limit setting
SWFUpload.prototype.setFileUploadLimit = function (fileUploadLimit) {
	this.settings.file_upload_limit = fileUploadLimit;
	this.callFlash("SetFileUploadLimit", [fileUploadLimit]);
};

// Public: setFileQueueLimit changes the file_queue_limit setting
SWFUpload.prototype.setFileQueueLimit = function (fileQueueLimit) {
	this.settings.file_queue_limit = fileQueueLimit;
	this.callFlash("SetFileQueueLimit", [fileQueueLimit]);
};

// Public: setFilePostName changes the file_post_name setting
SWFUpload.prototype.setFilePostName = function (filePostName) {
	this.settings.file_post_name = filePostName;
	this.callFlash("SetFilePostName", [filePostName]);
};

// Public: setUseQueryString changes the use_query_string setting
SWFUpload.prototype.setUseQueryString = function (useQueryString) {
	this.settings.use_query_string = useQueryString;
	this.callFlash("SetUseQueryString", [useQueryString]);
};

// Public: setRequeueOnError changes the requeue_on_error setting
SWFUpload.prototype.setRequeueOnError = function (requeueOnError) {
	this.settings.requeue_on_error = requeueOnError;
	this.callFlash("SetRequeueOnError", [requeueOnError]);
};

// Public: setHTTPSuccess changes the http_success setting
SWFUpload.prototype.setHTTPSuccess = function (http_status_codes) {
	if (typeof http_status_codes === "string") {
		http_status_codes = http_status_codes.replace(" ", "").split(",");
	}
	
	this.settings.http_success = http_status_codes;
	this.callFlash("SetHTTPSuccess", [http_status_codes]);
};

// Public: setHTTPSuccess changes the http_success setting
SWFUpload.prototype.setAssumeSuccessTimeout = function (timeout_seconds) {
	this.settings.assume_success_timeout = timeout_seconds;
	this.callFlash("SetAssumeSuccessTimeout", [timeout_seconds]);
};

// Public: setDebugEnabled changes the debug_enabled setting
SWFUpload.prototype.setDebugEnabled = function (debugEnabled) {
	this.settings.debug_enabled = debugEnabled;
	this.callFlash("SetDebugEnabled", [debugEnabled]);
};

// Public: setButtonImageURL loads a button image sprite
SWFUpload.prototype.setButtonImageURL = function (buttonImageURL) {
	if (buttonImageURL == undefined) {
		buttonImageURL = "";
	}
	
	this.settings.button_image_url = buttonImageURL;
	this.callFlash("SetButtonImageURL", [buttonImageURL]);
};

// Public: setButtonDimensions resizes the Flash Movie and button
SWFUpload.prototype.setButtonDimensions = function (width, height) {
	this.settings.button_width = width;
	this.settings.button_height = height;
	
	var movie = this.getMovieElement();
	if (movie != undefined) {
		movie.style.width = width + "px";
		movie.style.height = height + "px";
	}
	
	this.callFlash("SetButtonDimensions", [width, height]);
};
// Public: setButtonText Changes the text overlaid on the button
SWFUpload.prototype.setButtonText = function (html) {
	this.settings.button_text = html;
	this.callFlash("SetButtonText", [html]);
};
// Public: setButtonTextPadding changes the top and left padding of the text overlay
SWFUpload.prototype.setButtonTextPadding = function (left, top) {
	this.settings.button_text_top_padding = top;
	this.settings.button_text_left_padding = left;
	this.callFlash("SetButtonTextPadding", [left, top]);
};

// Public: setButtonTextStyle changes the CSS used to style the HTML/Text overlaid on the button
SWFUpload.prototype.setButtonTextStyle = function (css) {
	this.settings.button_text_style = css;
	this.callFlash("SetButtonTextStyle", [css]);
};
// Public: setButtonDisabled disables/enables the button
SWFUpload.prototype.setButtonDisabled = function (isDisabled) {
	this.settings.button_disabled = isDisabled;
	this.callFlash("SetButtonDisabled", [isDisabled]);
};
// Public: setButtonAction sets the action that occurs when the button is clicked
SWFUpload.prototype.setButtonAction = function (buttonAction) {
	this.settings.button_action = buttonAction;
	this.callFlash("SetButtonAction", [buttonAction]);
};

// Public: setButtonCursor changes the mouse cursor displayed when hovering over the button
SWFUpload.prototype.setButtonCursor = function (cursor) {
	this.settings.button_cursor = cursor;
	this.callFlash("SetButtonCursor", [cursor]);
};

/* *******************************
	Flash Event Interfaces
	These functions are used by Flash to trigger the various
	events.
	
	All these functions a Private.
	
	Because the ExternalInterface library is buggy the event calls
	are added to a queue and the queue then executed by a setTimeout.
	This ensures that events are executed in a determinate order and that
	the ExternalInterface bugs are avoided.
******************************* */

SWFUpload.prototype.queueEvent = function (handlerName, argumentArray) {
	// Warning: Don't call this.debug inside here or you'll create an infinite loop
	
	if (argumentArray == undefined) {
		argumentArray = [];
	} else if (!(argumentArray instanceof Array)) {
		argumentArray = [argumentArray];
	}
	
	var self = this;
	if (typeof this.settings[handlerName] === "function") {
		// Queue the event
		this.eventQueue.push(function () {
			this.settings[handlerName].apply(this, argumentArray);
		});
		
		// Execute the next queued event
		setTimeout(function () {
			self.executeNextEvent();
		}, 0);
		
	} else if (this.settings[handlerName] !== null) {
		throw "Event handler " + handlerName + " is unknown or is not a function";
	}
};

// Private: Causes the next event in the queue to be executed.  Since events are queued using a setTimeout
// we must queue them in order to garentee that they are executed in order.
SWFUpload.prototype.executeNextEvent = function () {
	// Warning: Don't call this.debug inside here or you'll create an infinite loop

	var  f = this.eventQueue ? this.eventQueue.shift() : null;
	if (typeof(f) === "function") {
		f.apply(this);
	}
};

// Private: unescapeFileParams is part of a workaround for a flash bug where objects passed through ExternalInterface cannot have
// properties that contain characters that are not valid for JavaScript identifiers. To work around this
// the Flash Component escapes the parameter names and we must unescape again before passing them along.
SWFUpload.prototype.unescapeFilePostParams = function (file) {
	var reg = /[$]([0-9a-f]{4})/i;
	var unescapedPost = {};
	var uk;

	if (file != undefined) {
		for (var k in file.post) {
			if (file.post.hasOwnProperty(k)) {
				uk = k;
				var match;
				while ((match = reg.exec(uk)) !== null) {
					uk = uk.replace(match[0], String.fromCharCode(parseInt("0x" + match[1], 16)));
				}
				unescapedPost[uk] = file.post[k];
			}
		}

		file.post = unescapedPost;
	}

	return file;
};

// Private: Called by Flash to see if JS can call in to Flash (accountcheck if External Interface is working)
SWFUpload.prototype.testExternalInterface = function () {
	try {
		return this.callFlash("TestExternalInterface");
	} catch (ex) {
		return false;
	}
};

// Private: This event is called by Flash when it has finished loading. Don't modify this.
// Use the swfupload_loaded_handler event setting to execute custom code when SWFUpload has loaded.
SWFUpload.prototype.flashReady = function () {
	// Check that the movie element is loaded correctly with its ExternalInterface methods defined
	var movieElement = this.getMovieElement();

	if (!movieElement) {
		this.debug("Flash called back ready but the flash movie can't be found.");
		return;
	}

	this.cleanUp(movieElement);
	
	this.queueEvent("swfupload_loaded_handler");
};

// Private: removes Flash added fuctions to the DOM node to prevent memory leaks in IE.
// This function is called by Flash each time the ExternalInterface functions are created.
SWFUpload.prototype.cleanUp = function (movieElement) {
	// Pro-actively unhook all the Flash functions
	try {
		if (this.movieElement && typeof(movieElement.CallFunction) === "unknown") { // We only want to do this in IE
			this.debug("Removing Flash functions hooks (this should only run in IE and should prevent memory leaks)");
			for (var key in movieElement) {
				try {
					if (typeof(movieElement[key]) === "function") {
						movieElement[key] = null;
					}
				} catch (ex) {
				}
			}
		}
	} catch (ex1) {
	
	}

	// Fix Flashes own cleanup code so if the SWFMovie was removed from the page
	// it doesn't display errors.
	window["__flash__removeCallback"] = function (instance, name) {
		try {
			if (instance) {
				instance[name] = null;
			}
		} catch (flashEx) {
		
		}
	};

};


/* This is a chance to do something before the browse window opens */
SWFUpload.prototype.fileDialogStart = function () {
	this.queueEvent("file_dialog_start_handler");
};


/* Called when a file is successfully added to the queue. */
SWFUpload.prototype.fileQueued = function (file) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("file_queued_handler", file);
};


/* Handle errors that occur when an attempt to queue a file fails. */
SWFUpload.prototype.fileQueueError = function (file, errorCode, message) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("file_queue_error_handler", [file, errorCode, message]);
};

/* Called after the file dialog has closed and the selected files have been queued.
	You could call startUpload here if you want the queued files to begin uploading immediately. */
SWFUpload.prototype.fileDialogComplete = function (numFilesSelected, numFilesQueued, numFilesInQueue) {
	this.queueEvent("file_dialog_complete_handler", [numFilesSelected, numFilesQueued, numFilesInQueue]);
};

SWFUpload.prototype.uploadStart = function (file) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("return_upload_start_handler", file);
};

SWFUpload.prototype.returnUploadStart = function (file) {
	var returnValue;
	if (typeof this.settings.upload_start_handler === "function") {
		file = this.unescapeFilePostParams(file);
		returnValue = this.settings.upload_start_handler.call(this, file);
	} else if (this.settings.upload_start_handler != undefined) {
		throw "upload_start_handler must be a function";
	}

	// Convert undefined to true so if nothing is returned from the upload_start_handler it is
	// interpretted as 'true'.
	if (returnValue === undefined) {
		returnValue = true;
	}
	
	returnValue = !!returnValue;
	
	this.callFlash("ReturnUploadStart", [returnValue]);
};



SWFUpload.prototype.uploadProgress = function (file, bytesComplete, bytesTotal) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("upload_progress_handler", [file, bytesComplete, bytesTotal]);
};

SWFUpload.prototype.uploadError = function (file, errorCode, message) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("upload_error_handler", [file, errorCode, message]);
};

SWFUpload.prototype.uploadSuccess = function (file, serverData, responseReceived) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("upload_success_handler", [file, serverData, responseReceived]);
};

SWFUpload.prototype.uploadComplete = function (file) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("upload_complete_handler", file);
};

/* Called by SWFUpload JavaScript and Flash functions when debug is enabled. By default it writes messages to the
   internal debug console.  You can override this event and have messages written where you want. */
SWFUpload.prototype.debug = function (message) {
	this.queueEvent("debug_handler", message);
};


/* **********************************
	Debug Console
	The debug console is a self contained, in page location
	for debug message to be sent.  The Debug Console adds
	itself to the body if necessary.

	The console is automatically scrolled as messages appear.
	
	If you are using your own debug handler or when you deploy to production and
	have debug disabled you can remove these functions to reduce the file size
	and complexity.
********************************** */
   
// Private: debugMessage is the default debug_handler.  If you want to print debug messages
// call the debug() function.  When overriding the function your own function should
// check to see if the debug setting is true before outputting debug information.
SWFUpload.prototype.debugMessage = function (message) {
	if (this.settings.debug) {
		var exceptionMessage, exceptionValues = [];

		// Check for an exception object and print it nicely
		if (typeof message === "object" && typeof message.name === "string" && typeof message.message === "string") {
			for (var key in message) {
				if (message.hasOwnProperty(key)) {
					exceptionValues.push(key + ": " + message[key]);
				}
			}
			exceptionMessage = exceptionValues.join("\n") || "";
			exceptionValues = exceptionMessage.split("\n");
			exceptionMessage = "EXCEPTION: " + exceptionValues.join("\nEXCEPTION: ");
			SWFUpload.Console.writeLine(exceptionMessage);
		} else {
			SWFUpload.Console.writeLine(message);
		}
	}
};

SWFUpload.Console = {};
SWFUpload.Console.writeLine = function (message) {
	var console, documentForm;

	try {
		console = document.getElementById("SWFUpload_Console");

		if (!console) {
			documentForm = document.createElement("form");
			document.getElementsByTagName("body")[0].appendChild(documentForm);

			console = document.createElement("textarea");
			console.id = "SWFUpload_Console";
			console.style.fontFamily = "monospace";
			console.setAttribute("wrap", "off");
			console.wrap = "off";
			console.style.overflow = "auto";
			console.style.width = "700px";
			console.style.height = "350px";
			console.style.margin = "5px";
			documentForm.appendChild(console);
		}

		console.value += message + "\n";

		console.scrollTop = console.scrollHeight - console.clientHeight;
	} catch (ex) {
		alert("Exception: " + ex.name + " Message: " + ex.message);
	}
};

///<jscompress sourcefile="kitui.spliter.bridge.js" />
function spliterBridge(id) {
	var self = $(id);
	id=id.replace("#","")
	var selfparent = self.parent();

	if(selfparent.parent().children().length==1)
		isvertical=true
	else
		isvertical=false
	var panelObj1, panelObj2;

	//isvertical=false 说明左右拖动
	var size = "";
	if (isvertical) {
		panelObj1 = selfparent.parent().prev().children(":first").children(":first");
	    panelObj2 = selfparent.parent().next().children(":first").children(":first");
	    //size =  selfparent.parent().prev().children(":first").css("height");
	    size=panelObj1.parent().attr("height");
	}else{//左右拖动
		panelObj1 = selfparent.prev().children(":first");
		panelObj2 = selfparent.next().children(":first");
		//size =  selfparent.prev().css("width");
		size = panelObj1.parent().attr("width");
	}
	
	
	var spliterDiv = $("<div id='"+id+"' class='kitui-splitter' data-options=\"vertical:"+((isvertical)?true:false)+",style:\'width:100%;height:100%;\'\"><div showCollapseButton=true></div><div showCollapseButton=true></div></div>");
	//alert("<div id='"+id+"' class='kitui-splitter' data-options=\"vertical:"+((isvertical)?true:false)+",style:\'width:100%;height:100%;\'\"><div showCollapseButton=true></div><div showCollapseButton=true></div></div>")
	var p1 = panelObj1.clone(true);
	var p2 = panelObj2.clone(true);
	
	
	spliterDiv.children("div:eq(0)").append(p1);
	spliterDiv.children("div:eq(0)").attr("size",size)
	spliterDiv.children("div:eq(1)").append(p2);
	var panelTable=selfparent.closest("table");

	spliterDiv.appendTo(panelTable.parent());

	panelTable.remove();

}
///<jscompress sourcefile="jquery.toolbaroverflow.js" />
if (!window.UserControl) window.UserControl = {};

// 实现下拉弹出层的工具栏

UserControl.ToolBarOverflow = function () {

    UserControl.ToolBarOverflow.superclass.constructor.apply(this, arguments);

    this.initComponents();
    this.bindEvents();
}

kitui.extend(UserControl.ToolBarOverflow, kitui.Container, {

    uiCls: 'kitui-toolbaroverflow',

    _clearBorder: false,

    popupVisible: false,

    _create: function () {
        this.el = document.createElement("div");
        this.el.className = "fs-toolbar kitui-toolbar fs-toolbaroverflow";
        this.el.innerHTML = '<div class="fs-toolbar-inner"><div class="fs-toolbar-content"></div></div><div class="fs-toolbar-arrow "></div>';
        this._innerEl = this.el.firstChild;
        this._contentEl = this._innerEl.firstChild;

        this._arrowEl = this.el.childNodes[1];
        this._popupEl = kitui.append(document.body, '<div class="fs-toolbar-popup kitui-toolbar" style="z-index:100"></div>');
        if(kitui.isIE && kitui_useShims){
        	var toolbar_iframe_id = "toolbariframe";
        	this._popupEl.style.display="table";
            var _topWin = window; 
	        var h = _topWin.document.getElementById(toolbar_iframe_id)   
	        if(!h){
	        	h = "<iframe frameborder='0' id='"+toolbar_iframe_id+"' style='z-index:-1; position:absolute;width:0; height:0; top:0;left:0;scrolling:no;'></iframe>";
	        }
            this._shimEl = kitui.append(document.body, h);
            this._shimEl.style.display = "";
        }
    },

    initComponents: function () {

    },

    bindEvents: function () {
        var me = this;

        jQuery(me._arrowEl).bind("click", function () {

            if (me.popupVisible) {
                me.hidePopup();
            } else {
                me.showPopup();
            }
        });

        jQuery(document).bind("mouseup", function (e) {

            if (me.popupVisible) {
                if (!kitui.isAncestor(me._popupEl, e.target) && e.target != me._arrowEl) {
                    me.hidePopup();
                }
            }
        });

    },

    doLayout: function () {
        if (!this.canLayout()) return;

        //document.title = "layout:" + new Date().getTime();

        var me = this,
            innerEl = me._innerEl,
            contentEl = me._contentEl,
            popupEl = me._popupEl,
            innerBox = kitui.getBox(innerEl),
            popupBox = kitui.getBox(popupEl),
            contentNodes = kitui.getChildNodes(contentEl, true),
            popupNodes = kitui.getChildNodes(popupEl, true);

        var toPopup = false;

        //1) 超过InnerBox.right则加入到popupEl中
        var lastBox = null;
        for (var i = contentNodes.length - 1; i >= 0; i--) {
            var node = contentNodes[i];

            if (node.nodeType != 1) {
                if (toPopup) kitui.prepend(popupEl, node);

            } else {
                var nodeBox = kitui.getBox(node);

                if (!lastBox) lastBox = nodeBox;

                if (nodeBox.right <= innerBox.right) break;

                kitui.prepend(popupEl, node);
                toPopup = true;
            }



        }
        if (!lastBox) lastBox = { right: innerBox.left };

        //2) toPopup为false时，将部分popupNodes中节点加回contentEl
        var addNodes = [];
        if (toPopup == false) {

            var preTextNode = null;
            for (var i = 0, l = popupNodes.length; i < l; i++) {
                var node = popupNodes[i];
                if (node.nodeType != 1) {
                    preTextNode = node;
                } else {
                    var nodeBox = kitui.getBox(node);
                    nodeBox.right = nodeBox.right - popupBox.left + lastBox.right;
                    if (nodeBox.right > innerBox.right) break;

                    if (preTextNode) addNodes.push(preTextNode);
                    preTextNode = null;

                    addNodes.push(node);
                }
            }

            for (var i = 0, l = addNodes.length; i < l; i++) {
                var node = addNodes[i];
                contentEl.appendChild(node);
            }
        }

        var childNodes = kitui.getChildNodes(popupEl);
        if (childNodes.length > 0) {
            this._arrowEl.style.display = "block";
            //if (this.popupVisible) this.syncPopup();
        } else {
            this._arrowEl.style.display = "none";
            //this.hidePopup();
        }
        this.hidePopup();

        $(this._arrowEl).height(me.el.offsetHeight);//ie6
    },

    syncPopup: function () {
        var box = kitui.getBox(this.el);

        //        this._popupEl.style.top = "0px";
        //        this._popupEl.style.left = "0px";

        //        alert(this._popupEl.offsetWidth);
        //        alert(this._popupEl.offsetWidth);

        var pbox = kitui.getBox(this._popupEl);
        var x = box.right - pbox.width,
            y = box.bottom;
        if (x < 0) x = 0;   
		kitui.setXY(this._popupEl, x, y);
      
	     if(this._shimEl){
	    	var t = this._shimEl.style;
	    	t.width = pbox.width + "px";
	        t.height = pbox.height + "px";
	        var i = kitui.getStyle(this._popupEl, "zIndex");
	        if (!isNaN(i)) {
	            t.zIndex = i - 3;
	        }  
	        kitui.setXY(this._shimEl, x, y);  
	     }
        
    },

    showPopup: function () {

        this.popupVisible = true;

        this.syncPopup();

    },

    hidePopup: function () {
        this._popupEl.style.left = "-10000px";
        this._popupEl.style.top = "-10000px";
        if(this._shimEl){
            this._shimEl.style.left = "-10000px";
        	this._shimEl.style.top = "-10000px";
        }
        this.popupVisible = false;
    },

    getAttrs: function (el) {
		var attrs = UserControl.ToolBarOverflow.superclass.getAttrs.call(this, el);

		var $el = jQuery(el).children(":first");

		var cs = [];

		if($el.is("table")){
		   $el.find("td,th").each(function(item){
			 var _el = $(this)[0];
		     cs = cs.concat(kitui.getChildNodes(_el,true));
		   });
		}else{
           cs = kitui.getChildNodes(el, true);
		}

        attrs.controls = cs;

        return attrs;

    }

});

kitui.regClass(UserControl.ToolBarOverflow, "toolbaroverflow");
///<jscompress sourcefile="jquery.progressbar.js" />
kitui.ProgressBar = function() {
    kitui.ProgressBar.superclass.constructor.apply(this, arguments);
};

kitui.extend(kitui.ProgressBar, kitui.Control, {
    formField: true,
    uiCls: "kitui-progressbar",
    showText: false,
    textAlign: "center",
    text: "",
    format: "{0}%",
    value: 0,
    set: function(e) {
        if ("string" == typeof e) {
            return this;
        }
        var t = e.value;
        delete e.value;
        kitui.ProgressBar.superclass.set.call(this, e);
        if (!kitui.isNull(t)) {
            this.setValue(t);
        }
        return this;
    },
    _create: function() {
        this.el = document.createElement("div");
        this.el.className = "kitui-progressbar";
        var e = '<div class="kitui-progressbar-border"><div class="kitui-progressbar-bar"></div><div class="kitui-progressbar-text"></div></div>';
        this.el.innerHTML = e;
        this._borderEl = this.el.firstChild;
        this._barEl = this._borderEl.firstChild;
        this._textEl = this._borderEl.lastChild;
    },
    setText: function(e) {
        this.text = e;
        this._textEl.innerHTML = e;
    },
    setShowText: function(e) {
        this.showText = e;
        this._textEl.style.display = e ? "" : "none";
    },
    getShowText: function() {
        return this.showText;
    },
    setTextAlign: function(e) {
        this.textAlign = e;
        this._textEl.style.textAlign = e;
    },
    getTextAlign: function() {
        return this.textAlign;
    },
    setValue: function(e) {
        e = parseFloat(e);
        if (isNaN(e)) {
            e = 0;
        }
        if (e < 0) {
            e = 0;
        }
        if (e > 100) {
            e = 100;
        }
        this.value = e;
        this._barEl.style.width = e + "%";
        var t = String.format(this.format, e);
        this.setText(t);
    },
    getValue: function() {
        return this.value;
    },
    getAttrs: function(e) {
        var t = kitui.ProgressBar.superclass.getAttrs.call(this, e);
        kitui._ParseString(e, t, [ "text", "format", "textAlign" ]);
        kitui._ParseBool(e, t, [ "showText" ]);
        return t;
    }
});

kitui.regClass(kitui.ProgressBar, "progressbar");	

//js中复制对象
function _cloneObj(obj) {
    var newObj = {};  
    if (obj instanceof Array) {  
        newObj = [];  
    }
    for (var key in obj) {  
        var val = obj[key];
        if(val == null) {
        	 newObj[key] = null;
        }else {
	        newObj[key] = typeof val === 'object' ? _cloneObj(val): val;  
        }
    }  
    return newObj;  
};
